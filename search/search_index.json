{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Recursos Doc\u00e8ncia Xavier Sastre","text":""},{"location":"index.html#curs-2024-2025","title":"Curs 2024-2025","text":"SMX AW SI AOF DAW DWES DWEC DAM PSP"},{"location":"0.7frameworks.html","title":"0.7frameworks","text":""},{"location":"0.7frameworks.html#frameworks-php-laravel","title":"Frameworks PHP. Laravel","text":""},{"location":"0.7frameworks.html#posada-en-funcionament","title":"Posada en funcionament","text":"<p>Per posar en marxa Laravel us remetr\u00e9 a la p\u00e0gina oficial, on es contempla la instal\u00b7laci\u00f3 des de distintes perspectives. <pre><code>https://laravel.com/docs/8.x/installation\n</code></pre></p>"},{"location":"0.7frameworks.html#carpetes-en-laravel","title":"Carpetes en Laravel","text":"<p>En crear un nou projecte amb aquest framework, Laravel crea una s\u00e8rie de carpetes per defecte. Aquesta estructura de carpetes \u00e9s la recomanada per utilitzar Laravel.</p>"},{"location":"0.7frameworks.html#public","title":"Public","text":"<p>Aquesta \u00e9s la carpeta m\u00e9s important ja que \u00e9s on es posen tots els fitxers que el client mostrar\u00e0 a l'usuari quan introdu\u00efm la URL del nostre lloc web. Normalment es carrega el fitxer <code>index.php</code> per defecte.</p>"},{"location":"0.7frameworks.html#routes","title":"Routes","text":"<p>Una altra de les carpetes que m\u00e9s farem servir al llarg d'aquest curs de Laravel. S'hi allotgen totes les rutes (redireccions web) del nostre projecte, per\u00f2 m\u00e9s concretament a l'arxiu <code>web.php</code></p> <pre><code>Donada una ruta \u2192 se carregar\u00e0 una vista\n</code></pre>"},{"location":"0.7frameworks.html#resources","title":"Resources","text":"<p>Aquesta \u00e9s la nostra carpeta de recursos on guardarem els seg\u00fcents arxius, que tamb\u00e9 estan separats per les seves carpetes... com cada nom indica:</p> <ul> <li><code>css</code> Arxius CSS</li> <li><code>js</code> Arxius JS (JavaScript)</li> <li><code>lang</code> Arxius relacionats amb l'idioma del site (variables &amp; strings)</li> <li><code>views</code> Arxius de les nostres vistes, all\u00f2 que les rutes carreguen</li> </ul>"},{"location":"0.7frameworks.html#rutes","title":"Rutes","text":"<p>Les rutes a Laravel (i en gaireb\u00e9 qualsevol Framework) serveixen per redireccionar el client (o navegador) a les vistes que nosaltres vulguem.</p> <p>Aquestes rutes es configuren al fitxer public/routes/web.php on es defineix la ruta que l'usuari posa a la URL despr\u00e9s del domini i es retorna la vista que es vol carregar en introduir aquesta adre\u00e7a al navegador.</p> <pre><code>&lt;?php\n\n// Ruta per defecte per carregar la vista welcome quan l'usuari introdueix simplement el domini\n\nRoute::get('/', function () {\n    return view('welcome');\n});\n</code></pre> <p>En l'exemple de dalt anem a carregar la vista anomenada <code>welcome</code> que fa refer\u00e8ncia a la vista <code>resources/views/welcome.blade.php</code></p>"},{"location":"0.7frameworks.html#alies","title":"Alies","text":"<p>\u00c9s interessant donar-li un \u00e0lies o un nom a les nostres rutes per poder utilitzar aquests \u00e0lies a les nostres plantilles de Laravel que veurem m\u00e9s endavant.</p> <p>Per aix\u00f2, nom\u00e9s cal utilitzar la paraula <code>name</code> al final de l'estructura de la ruta i donar-li un nom que vulguem; normalment descriptiu i associat a la vista que ha de carregar l'encaminador de Laravel.</p> <pre><code>&lt;?php\n\nRoute::get('/users', function () {\n    return view('users');\n}) -&gt; name('usuaris');\n</code></pre> <p>Despr\u00e9s veurem que \u00e9s molt \u00fatil ja que a l'hora de refactoritzar o fer un canvi, si tenim enlla\u00e7os o men\u00fas de navegaci\u00f3 que apunten a aquesta ruta, nom\u00e9s haur\u00edem de canviar el par\u00e0metre dins del <code>get()</code> i no haver d'anar fitxer per fitxer.</p> <p>Laravel ens proporciona una manera m\u00e9s c\u00f2moda a l'hora de carregar una vista si no volem ni par\u00e0metres ni condicions. Nom\u00e9s definirem la seg\u00fcent l\u00ednia que fa refer\u00e8ncia la ruta <code>dades</code> a la URL i carregar\u00e0 el fitxer <code>usuaris.php</code> de la nostra carpeta <code>views</code> com li hem indicat al segon par\u00e0metre. <pre><code>&lt;?php\n\n/* http://localhost/dades/ */\n\nRoute::view('dades', 'usuaris');\n</code></pre></p> <p>Per\u00f2 no nom\u00e9s podem retornar una vista, sin\u00f3 des d'un simple string fins a m\u00f2duls propis de Laravel.</p>"},{"location":"0.7frameworks.html#parametres","title":"Par\u00e0metres","text":"<p>Ja hem vist que amb PHP podem passar par\u00e0metres a trav\u00e9s de la URL, com si fossin variables, que les recuper\u00e0vem a trav\u00e9s del m\u00e8tode GET o POST.</p> <p>Amb Laravel tamb\u00e9 podem introduir par\u00e0metres per\u00f2 d'una manera m\u00e9s vistosa i ordenada, de manera que sigui visualment m\u00e9s c\u00f2mode de recordar i d'indexar pels motors de cerca com Google.</p> <pre><code>  http://localhost/client/324\n</code></pre> <p>Per configurar aquest tipus de rutes en el nostre arxiu de rutes <code>public/routes/web.php</code> farem el seg\u00fcent.</p> <pre><code>&lt;?php\n\nRoute::get('client/{id}', function($id) {\n    return('Client amb id: ' . $id);\n});\n</code></pre> <p>Qu\u00e8 passa si no introdu\u00efm un id i nom\u00e9s naveguem fins a <code>client/</code>? ... Ens tornar\u00e0 un 404</p> <p>Per resoldre-ho, podem definir una ruta per defecte en cas que l'id (o par\u00e0metre) no sigui passat. Per aix\u00f2 farem servir el s\u00edmbol <code>?</code> en el nostre nom de ruta i inicialitzarem la variable amb el valor que vulguem.</p> <pre><code>&lt;?php\n\nRoute::get('client/{id?}', function($id = 1) {\n    return ('Client amb id: ' . $id);\n});\n</code></pre> <p>Ara tenim un altre problema, perqu\u00e8 estem filtrant per id del client que, normalment \u00e9s un n\u00famero, per\u00f2 si posem un par\u00e0metre que no sigui un n\u00famero, obtindrem un resultat no desitjat.</p> <p>Per resoldre aquest cas farem \u00fas de la cl\u00e0usula <code>where</code> juntament amb una expressi\u00f3 regular n\u00famerica.</p> <pre><code>&lt;?php\n\nRoute::get('client/{id?}', function($id = 1) {\n    return ('Client amb id: ' . $id);\n}) -&gt; where('id', '[0-9]+');\n</code></pre> <p>A m\u00e9s, podem passar variables a la nostra URL per despr\u00e9s utilitzar-les en els nostres fitxers de plantilles o en fitxers <code>.php</code> fent \u00fas d'un array associatiu. Vegem-ne un exemple amb la forma redu\u00efda per estalviar-nos codi.</p> <pre><code>&lt;?php\n\nRoute::view('dades', 'usuaris', ['id' =&gt; 5446]);\n</code></pre> <p>... i l'arxiu <code>resources/views/usuaris.php</code> ha de tenir quelcom parescut a aix\u00f2</p> <pre><code>&lt;!-- Estructura t\u00edpica d'un arxiu HTML5 --&gt;\n\n&lt;p&gt;Usuari amb id: &lt;?= $id ?&gt;&lt;/p&gt;\n\n&lt;!-- ... --&gt;\n</code></pre> <p>Amb les plantilles de Laravel <code>blade.php</code> veurem com simplificar encara m\u00e9s el nostre codi.</p> <p>Per a m\u00e9s informaci\u00f3 sobre les rutes, par\u00e0metres i expressions regulars a les rutes pots fer una ullada a la documentaci\u00f3 oficial de rutes que cont\u00e9 nombrosos exemples.</p>"},{"location":"0.7frameworks.html#plantilles-o-templates","title":"Plantilles o Templates","text":"<p>A trav\u00e9s de les plantilles de Laravel escriurem menys codi PHP i tindrem els nostres arxius millor organitzats.</p> <p>Blade \u00e9s el sistema de plantilles que porta Laravel, per aix\u00f2 els fitxers de plantilles que guardem al directori de <code>views</code> porten l'extensi\u00f3 <code>blade.php</code>.</p> <p>D'aquesta manera sabem immediatament que es tracta d'una plantilla de Laravel i que forma part d'una vista que es mostrar\u00e0 al navegador.</p>"},{"location":"0.7frameworks.html#directives","title":"Directives","text":"<p>Laravel t\u00e9 un gran nombre de directives que podem utilitzar per estalviar-nos molt de codi repetitiu entre altres funcions.</p> <p>Diguem que les directives s\u00f3n petites funcions ja escrites que accepten par\u00e0metres i que cadascuna fa una funci\u00f3 diferent dins de Laravel.</p> <ul> <li><code>@yield</code> Defineix el contingut din\u00e0mic que es carregar\u00e0. S'usa conjuntament amb @section</li> <li><code>@section</code> i <code>@endsection</code> bloc de codi din\u00e0mic</li> <li><code>@extends</code> importa el contingut d'una plantilla ja creada</li> </ul>"},{"location":"0.7frameworks.html#separant-codi","title":"Separant codi","text":"<p>Vegem un exemple de com fer \u00fas del poder de Laravel per crear plantilles i no repetir codi.</p> <p>Suposem que tenim certes estructures HTML repetides com ara una cap\u00e7alera <code>header</code>, un men\u00fa de navegaci\u00f3 <code>nav</code> i un parell de seccions que fan \u00fas d'aquest mateix codi.</p> <p>Suposem que tenim 2 apartats a la web:</p> <ul> <li><code>Blog</code></li> <li><code>Fotos</code></li> </ul> <p>Primer de tot haurem de generar un fitxer que faci de <code>plantilla</code> del nostre lloc web.</p> <p>Per aix\u00f2 creem el fitxer <code>plantilla.blade.php</code> dins del nostre directori de plantilles <code>resources/views</code>.</p> <p>Aquest fitxer contindr\u00e0 el t\u00edpic codi d'una p\u00e0gina simple d'HTML i al body afegirem els nostres continguts est\u00e0tics i din\u00e0mics.</p> <pre><code>&lt;body&gt;\n    &lt;!-- CONTINGUT EST\u00c0TIC PER A TOTES LES SECCIONS --&gt;\n    &lt;h1&gt;Benvinguts a Laravel&lt;/h1&gt;\n    &lt;hr&gt;\n\n    &lt;!-- MEN\u00da --&gt;\n    &lt;nav&gt;\n        &lt;a href={{ route('noticies') }}&gt;Blog&lt;/a&gt; |\n        &lt;a href={{ route('galeria') }}&gt;Fotos&lt;/a&gt;\n    &lt;/nav&gt;\n\n    &lt;!-- CONTINGUT DIN\u00c0MIC EN FUNCI\u00d3 DE LA SECCI\u00d3 QUE ES VISITA --&gt;\n    &lt;header&gt;\n        @yield('apartat')\n    &lt;/header&gt;\n&lt;/body&gt;\n</code></pre> <p>Cada secci\u00f3 que faci \u00fas d'aquesta plantilla contindr\u00e0 el text est\u00e0tic <code>Benvinguts a Laravel</code> seguit d'un men\u00fa de navegaci\u00f3 amb enlla\u00e7os a cadascuna de les seccions i el contingut din\u00e0mic de cada secci\u00f3.</p> <p>Ara crearem els fitxers din\u00e0mics de cadascuna de les seccions, en el nostre cas <code>blog.blade.php</code> i <code>fotos.blade.php</code></p> <pre><code>&lt;?php\n\n// blog.blade.php\n\n@extends('plantilla')\n\n@section('apartat')\n  &lt;h2&gt;Est\u00e0s a BLOG&lt;/h2&gt;\n@endsection\n</code></pre> <p>Importem el contingut de <code>plantilla</code> sota la directiva <code>@extends</code> perqu\u00e8 carregueu els elements est\u00e0tics que hem declarat i amb la directiva <code>@section</code> i <code>@endsection</code> definim el bloc de codi din\u00e0mic, en funci\u00f3 de la secci\u00f3 que estiguem visitant.</p> <p>Ara gaireb\u00e9 el mateix per a la secci\u00f3 de <code>fotos</code></p> <pre><code>&lt;?php\n\n// fotos.blade.html\n\n@extends('plantilla')\n\n@section('apartat')\n   &lt;h2&gt;Est\u00e0s a FOTOS&lt;/h2&gt;\n@endsection\n</code></pre> <p>El darrer pas que ens queda \u00e9s configurar el fitxer de rutes <code>routes/web.php</code></p> <pre><code>&lt;?php\n\n// web.php\n\nRoute::view('blog', 'blog') -&gt; name('noticies');\nRoute::view('fotos', 'fotos') -&gt; name('galeria');\n</code></pre> <p>D'aquesta manera podrem fer \u00fas del men\u00fa de navegaci\u00f3 que hem posat a la nostra plantilla i gr\u00e0cies als \u00e0lies <code>noticies</code> i <code>galeria</code>, la URL ser\u00e0 m\u00e9s amigable.</p>"},{"location":"0.7frameworks.html#estructures-de-control","title":"Estructures de control","text":"<p>Com en tot bon llenguatge de programaci\u00f3, a Laravel tamb\u00e9 tenim estructures de control.</p> <p>A Blade (plantilles de Laravel) sempre que iniciem un bloc d'estructura de control HEM de tancar-la</p> <ul> <li><code>@foreach</code> ~ <code>@endforeach</code> el fem servir per rec\u00f3rrer arrays</li> <li><code>@if</code> ~ <code>@endif</code> per comprovar condicions l\u00f2giques</li> <li><code>@switch</code> ~ <code>@endswitch</code> en funci\u00f3 del valor d'una variable executar un codi<ul> <li><code>@case</code> defineix la casu\u00edstica del switch</li> <li><code>@break</code> trenca l'execuci\u00f3 del codi en curs</li> <li><code>@default</code> si cap casu\u00edstica es compleix</li> </ul> </li> </ul> <pre><code>&lt;?php\n\n$equip = ['Maria', 'Alfredo', 'William', 'Veronica'];\n\n@foreach ($equip as $nom)\n   &lt;p&gt; {{ $nom }} &lt;/p&gt;\n@endforeach\n</code></pre> <p>Recordeu-vos que podem passar variables a trav\u00e9s de les rutes com si fossin par\u00e0metres. Per\u00f2 en aquest cas, veurem una altra directiva m\u00e9s; l'\u00fas de <code>@compact</code>.</p> <pre><code>&lt;?php\n\n// \u00das de @compact\n$equip = ['Maria', 'Alfredo', 'William', 'Veronica'];\n\n// Route::view('nosaltres', ['equip' =&gt; 'equip']);\nRoute::view('nosaltres', @compact('equip'));\n</code></pre>"},{"location":"0.7frameworks.html#controladors","title":"Controladors","text":"<p>Els controladors s\u00f3n el lloc perfecte per definir la l\u00f2gica de negoci de la nostra aplicaci\u00f3 o lloc web.</p> <p>Fa intermediari entre la vista (el que veiem amb el nostre navegador o client) i el servidor on l'app est\u00e0 allotjada.</p> <p>Per defecte, els controladors es guarden en una carpeta espec\u00edfica situada a <code>app/Http/Controllers</code> i tenen extensi\u00f3 <code>.php</code>.</p> <p>Per crear un controlador nou hem de fer \u00fas del nostre estimat aut\u00f2mat <code>artisan</code> on us direm que creeu un controlador amb el nom que nosaltres vulguem.</p> <p>Obrim la consola i ens situem a l'arrel del nostre projecte</p> <p><pre><code>php artisan make:controller PagesController\n</code></pre> Si tot ha sortit b\u00e9, rebrem un missatge per consola amb qu\u00e8 tot ha anat b\u00e9 i podrem comprovar que, efectivament, s'ha creat el fitxer <code>PagesController.php</code> amb una estructura b\u00e0sica de controlador, dins de la carpeta <code>Controllers</code> que hem descrit anteriorment.</p> <p>Ara podem modificar el nostre fitxer de rutes <code>web.pbp</code> per deixar-lo net de l\u00f2gica i traslladar aquesta al nostre nou controlador.</p> <p>La idea \u00e9s deixar el fitxer <code>web.php</code> tan net com puguem perqu\u00e8, d'una ullada, s'entengui tot perfectament.</p> <p>RECORDA que nom\u00e9s movem la l\u00f2gica, mentre que les cl\u00e0usules com <code>where</code> i <code>name</code> les seguim deixant a l'arxiu de rutes <code>web.php</code></p> <p>Vegem com quedaria un refactor del fitxer de rutes utilitzant un <code>Controller</code> com el que acabem de crear</p> <p>Ara ens quedaria de la manera seg\u00fcent</p> <pre><code>&lt;?php\n\n// web.php (v2.0) \u2592\u2592\u2592\u2592 Refactoritzat\n\nuse App\\Http\\Controllers\\PagesController;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/', [ PagesController::class, 'inici' ]);\nRoute::get('dades', [ PagesController::class, 'dades' ]);\nRoute::get('client/{id?}', [ PagesController::class, 'client' ]) -&gt; where('id', '[0-9]+');\nRoute::get('nosaltres/{nosaltres?}', [ PagesController::class, 'nosaltres']) -&gt; name('nosaltres');\n</code></pre> <p>i al nostre arxiu controlador el deixar\u00edem de la seg\u00fcent manera</p> <pre><code>&lt;?php\n\n// PagesController.php\n\nnamespace App\\Http\\Controllers;\n\nclass PagesController extends Controller\n{\n     public function inici() { return view('welcome'); }\n\n     public function dades() {\n         return view('usuaris', ['id' =&gt; 56]);\n     }\n\n     public function client($id = 1) {\n         return ('Client amb id: ' . $id);\n     }\n\n     public function nosaltres($nom = null) {\n         $equip = [\n             'Paco',\n             'Enrique',\n             'Maria',\n             'Veronica'\n         ];\n\n         return view('nosaltres', @compact('equip', 'nom'));\n     }\n}\n</code></pre>"},{"location":"0.7frameworks.html#migracions-eloquent","title":"Migracions &amp; Eloquent","text":"<p>Amb les migracions gestionarem la base de dades del nostre lloc web; tant crear noves BBDD com editar-les des de Laravel.</p> <p>Les migracions d'un lloc fet amb Laravel s'allotgen a la ruta <code>database/migrations</code> i tenen extensi\u00f3 <code>.php</code>.</p> <p>Si t'hi fixes, nom\u00e9s instal\u00b7lar Laravel amb la imatge de Bitnami, s'han creat diversos arxius de migracions que podem fer servir, per\u00f2 de moment els deixem aqu\u00ed i NO ELS ESBORREM perqu\u00e8 s\u00f3n molt \u00fatils.</p>"},{"location":"0.7frameworks.html#fitxers-env","title":"Fitxers .env","text":"<p>\u00c9s d'\u00fas com\u00fa treballar amb arxius d'entorn anomenats tamb\u00e9 fitxers .env. Normalment, un projecte real pots trobar-te amb diversos arxius d'aquest tipus en funci\u00f3 del desplegament que es vulgui fer; com per exemple:</p> <ul> <li><code>test.env</code> config. per desplegar en entorn segur de proves</li> <li><code>release.env</code> config. per desplegar canvis de versi\u00f3 que s'envia als beta testers</li> <li><code>production.env</code>config. per desplegar el codi ja provat a la resta del m\u00f3n.</li> </ul> <p>En el nostre cas, com que no desplegarem res, nom\u00e9s farem servir un \u00fanic fitxer <code>.env</code> i en q\u00fcesti\u00f3 de les migracions ens fixarem a partir de la l\u00ednia 11 on diu:</p> <pre><code>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=blog\nDB_USERNAME=root\nDB_PASSWORD=\n</code></pre> <p>En aquest fitxer hem de configurar les dades del nostre servidor MySQL i emplenar-lo amb la informaci\u00f3 corresponent a la nostra base de dades ja creada</p> <p>Un cop tinguem aix\u00f2, el que ens queda \u00e9s executar l'ordre de les migracions a trav\u00e9s del CLI <code>artisan</code></p> <pre><code>php artisan migrate\n</code></pre> <p>Si tot ha sortit b\u00e9 obtindrem el resultat seg\u00fcent on podrem observar que totes les migracions s'han inserit correctament a la base de dades.</p> <p>Si anem al client que utilitzem per manejar la base de dades (phpMyAdmin per exemple) veurem que a la nostra base de dades s'han creat totes les taules de la migraci\u00f3 que hem executat i a m\u00e9s una taula que s'anomena migrations.</p> <p>La taula <code>migrations</code> \u00e9s simplement un registre de totes les migracions dutes a terme. A m\u00e9s, podem fer un rollback en cas que vulguem restablir la nostra base de dades.</p> <pre><code>php artisan migrate:rollback\n</code></pre> <p>O si preferim fer un reset per deixar-la neta</p> <pre><code>php artisan migrate:reset\n</code></pre>"},{"location":"0.7frameworks.html#models","title":"Models","text":"<p>Gr\u00e0cies a Eloquent i la seva integraci\u00f3 amb Laravel, podrem crear models de dades d'una manera automatitzada a trav\u00e9s de <code>artisan</code></p> <p>Ara que ja sabem fer servir les migracions \u00e9s hora de crear les nostres pr\u00f2pies migracions per\u00f2 a trav\u00e9s d'Eloquent.</p> <p>A trav\u00e9s de la instrucci\u00f3 <code>make:model</code> creem un nou model de dades, a continuaci\u00f3 posem el nom sempre comen\u00e7ant a Maj\u00fasucla ia SINGULAR i passem el par\u00e0metre relacionat amb les migracions <code>-m</code>.</p> <pre><code>php artisan make:model Nota -m\n</code></pre> <p>Si tot ha sortit b\u00e9, veurem al nostre directori de migracions <code>database/migrations</code> un nou fitxer que s'anomena <code>2022_01_07_81237_create_notas_table.php</code>.</p> <p>El seg\u00fcent pas \u00e9s veure el nostre fitxer de migracions i editar-lo perqu\u00e8 contingui les taules que nosaltres vulguem. Si ho visualitzem tan sols tindreu l'estructura b\u00e0sica amb un parell de taules. Hi afegirem un parell de taules m\u00e9s.</p> <p><pre><code>&lt;?php\n\nSchema::create('notes', function (Blueprint $table) {\n   $table-&gt;id();\n   $table-&gt;timestamps();\n\n   $table-&gt;string('nom');\n   $table-&gt;text('descripcio');\n});\n</code></pre> En aquesta <code>Schema</code> podem posar totes les taules que nosaltres vulguem i establir el tipus de dada per a cadascuna, aix\u00ed com el nom.</p> <p>Quan estem satisfets amb el nostre esquema hem de tornar a executar el codi de migraci\u00f3 a trav\u00e9s d'artisan perqu\u00e8 s'introdueixi aquesta nova informaci\u00f3 a la base de dades.</p> <p>Per veure tots els tipus de dades que maneja Eloquent pots visitar la documentaci\u00f3 oficial.</p>"},{"location":"0.7frameworks.html#recuperant-dades","title":"Recuperant dades","text":"<p>Ja tenim la nostra base de dades creada amb les nostres taules migrades, ara nom\u00e9s falta emplenar aquestes taules amb dades per poder pintar-les al nostre codi HTML.</p> <p>Omplim les taules a trav\u00e9s del client de MySQL que m\u00e9s ens agradi:</p> <ul> <li>PHP MyAdmin</li> <li>MySQL Workbench</li> <li>HeidiSQL *</li> <li>SquirrelSQL</li> </ul> <p>Ara haurem d'anar-nos a una vista ja creada o en creem una de nova i sol\u00b7licitem les dades des de l'HTML.</p> <p>Ens recordem del <code>PagesController</code>? doncs fer \u00fas de la seva m\u00e0gia juntament amb les rutes que creem a <code>web.php</code></p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 web.php\n\nRoute::get('notes', [ PagesController::class, 'notes' ]);\n</code></pre> <p>Abans d'intentar entrar, hem de configurar el nostre controlador de la manera seg\u00fcent:</p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 PagesController.php\n\npublic\nfunction notes() {\n   $notes = Nota::all();\n\n   return view('notes', compact('notes'));\n}\n</code></pre> <p>L'\u00faltim pas seria crear la vista amb la taula que pinti les dades a trav\u00e9s de la variable que li passem per par\u00e0metre a la ruta que acabem de descriure.</p> <p><pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 notes.blade.php\n\n&lt;h1&gt;Notes des de base de dades&lt;/h1&gt;\n\n&lt;table border=\"1\"&gt;\n     &lt;thead&gt;\n         &lt;tr&gt;\n             &lt;th&gt;Nom&lt;/th&gt;\n             &lt;th&gt;Descripci\u00f3&lt;/th&gt;\n         &lt;/tr&gt;\n     &lt;/thead&gt;\n\n     @foreach ($notes as $nota)\n         &lt;tr&gt;\n             &lt;td&gt;{{$nota -&gt; nom}}&lt;/td&gt;\n             &lt;td&gt;{{$nota -&gt; descripci\u00f3}}&lt;/td&gt;\n         &lt;/tr&gt;\n     @endforeach\n&lt;/table&gt;\n</code></pre> Cal fixar-se b\u00e9 en els noms de les columnes que tenen les nostres bases de dades, \u00e9s just el que va despr\u00e9s de <code>-&gt;</code> i sempre envoltat pels s\u00edmbols <code>{{}}</code> ja que estem en un fitxer de plantilla.</p> <p>Qu\u00e8 passaria si nom\u00e9s volem accedir a un \u00fanic element? com si f\u00e9ssim un <code>SELECT * from usuaris where id = 1</code></p> <p>Per aix\u00f2, tenim una instrucci\u00f3 espec\u00edfica a Eloquent que ens soluciona el problema. En aquest cas farem servir la instrucci\u00f3 <code>findOrFail</code> i com a bons usuaris de Laravel, l'utilitzarem dins del controlador.</p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 PagesController.php\n\npublic function detall($id) {\n   $nota = Nota::findOrFail($id);\n\n   return view('notes.detall', compact('nota'));\n}\n</code></pre> <p>Cal recordar que hem de configurar la ruta al nostre arxiu de rutes.</p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 web.php\n\nRoute::get('notes/{id?}', [ PagesController::class, 'detall' ]) -&gt; name('notes.detall');\n</code></pre> <p>I finalment, hem de crear la plantilla, per\u00f2 com que \u00e9s un fitxer de detall o que est\u00e0 relacionat amb una altra plantilla ja creada, podem crear una carpeta amb el nom de la plantilla i dins, el fitxer de plantilla en q\u00fcesti\u00f3.</p> <p>De manera que quedaria aix\u00ed <code>resources/views/notas/detalle.blade.php</code></p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 detalle.blade.php\n\n@extends('plantilla')\n\n@section('apartat')\n     &lt;h1&gt;Detall de la nota&lt;/h1&gt;\n\n     &lt;h3&gt;ID: {{ $nota -&gt; id }}&lt;/h3&gt;\n     &lt;h3&gt;Nom: {{ $nota -&gt; nom }}&lt;/h3&gt;\n     &lt;h3&gt;Descripci\u00f3: {{ $nota -&gt; descripci\u00f3 }}&lt;/h3&gt;\n@endsection\n</code></pre>"},{"location":"0.7frameworks.html#modificar-taules-sense-perdre-dades","title":"Modificar taules sense perdre dades","text":"<p>Un dels dilemes que tenim a l'hora de manejar les bases de dades amb Laravel i Eloquent, \u00e9s que de vegades cometem errors i volem introduir una nova columna dins la nostra taula o modificar-ne una  SENSE PERDRE LES DADES DE LA BASE DE DADES.</p> <p>Imaginem que a la nostra taula <code>notes</code> volem afegir una columna amb el nom <code>autor</code>.</p> <p>El primer de tot \u00e9s crear una nova migraci\u00f3 per fer aquest canvi. Per fer-ho, farem \u00fas del nostre estimat <code>artisan</code> i hem de crear el nom d\u02bbaquesta migraci\u00f3 amb la seg\u00fcent f\u00f3rmula <code>add_fields_to_</code> seguidament del nom de la taula que volem modificar.</p> <pre><code>php artisan migrate add_fields_to_nota\n</code></pre> <p>Seguidament, ens fiquem a l'arxiu de la migraci\u00f3 que acabem de crear ia l'apartat up() hem de posar el canvi que volem fer ia la secci\u00f3 down() hem de fer el mateix per\u00f2 hem de dir a l'Eloquent que l'elimini per qu\u00e8? per en cas de fer migrate rollback, es carregui aquest nou camp que hem creat.</p> <pre><code>&lt;?php\n\npublic function up()\n{\n   Schema::table('notes', function (Blueprint $table) {\n       $table -&gt; string('autor');\n   });\n}\n\npublic function down()\n{\n   Schema::table('notes', function (Blueprint $table) {\n       $table -&gt; dropColumn('autor');\n   });\n}\n</code></pre>"},{"location":"0.7frameworks.html#formularis","title":"Formularis","text":"<p>Ara que ja sabem com carregar una base de dades, veurem com inserir-los amb Laravel i sense escriure ni una sola l\u00ednia de SQL.</p> <p>Gr\u00e0cies al m\u00e8tode <code>save()</code> de Laravel podrem desar dades que provinguin d'un formulari des de les nostres plantilles. Per aix\u00f2, el primer que necessitem el seg\u00fcent:</p> <ul> <li><code>formulari HTML</code> que arreplegue les dades que l'usuari introdueix</li> <li>Una <code>ruta</code> que sigui l'encarregada de rebre les dades del formulari</li> <li>M\u00e8tode <code>POST</code> per enviar les dades al servidor</li> <li>Un m\u00e8tode al nostre <code>controlador</code> que processi les dades i les guardi a trav\u00e9s de <code>save()</code></li> <li>La cl\u00e0usula de seguretat <code>@csrf</code> per evitar atacs des d'altres llocs</li> </ul> <p>Aix\u00ed doncs, comencem pel formulari</p> <pre><code>&lt;form action=\"{{ route('notes.crear') }}\" method=\"POST\"&gt;\n     @csrf {{-- Cl\u00e0usula per obtenir un token de formulari en enviar-lo --}}\n\n     &lt;input type=\"text\" name=\"nom\" placeholder=\"Nom de la nota\" class=\"form-control mb-2\" autofocus&gt;\n     &lt;input type=\"text\" name=\"descripcio\" placeholder=\"Descripci\u00f3 de la nota\" class=\"form-control mb-2\"&gt;\n\n     &lt;button class=\"btn btn-primary btn-block\" type=\"submit\"&gt;\n       Crear nova nota\n     &lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Com veiem, creem 2 inputs relacionats amb les nostres columnes dins de la taula, en aquest cas <code>nom</code> i <code>descripci\u00f3</code></p> <p>El <code>action</code> del formulari ha d'apuntar a una nova ruta que crearem i on enviem les dades mitjan\u00e7ant <code>POST</code>.</p> <p>Ara crearem la ruta al nostre arxiu de rutes <code>web.php</code></p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 web.php\n\nRoute::post('notes', [ PagesController::class, 'crear' ]) -&gt; name('notes.crear');\n</code></pre> <p>Si ens fixem, ja no estem fent \u00fas del <code>get</code>sin\u00f3 del m\u00e8tode <code>post</code> i com que s\u00f3n m\u00e8todes diferents, podem anomenar la ruta de la mateixa manera que a <code>get</code> ja que no hi haur\u00e0 conflicte.</p> <p>D'altra banda, necessitem invocar el nostre <code>PagesController</code> fam\u00f3s i dir-li que utilitzarem el m\u00e8tode <code>crear</code> que b\u00e9, encara no existeix per\u00f2 que crearem a continuaci\u00f3. No oblidem crear un \u00e0lies per poder vincular-lo al <code>action</code> del formulari SUPER IMPORTANT.</p> <p>Per acabar, editarem el nostre fitxer <code>PagesController.php</code> perqu\u00e8 el controlador que estem usant tingui el m\u00e8tode que hem anomenat pr\u00e8viament.</p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 PagesController.php\n\nuse App\\Models\\Nota;\nuse Illuminate\\Http\\Request;\n\npublic function crear(Request $request) {\n     $notaNova = new Nota;\n\n     $notaNova -&gt; nom = $request -&gt; nom;\n     $notaNova -&gt; descripcio = $request -&gt; descripcio;\n\n     $notaNova -&gt; save();\n\n     return back() -&gt; with('missatge', 'Nota agregada amb \u00e8xit');\n}\n</code></pre> <p>El nostre m\u00e8tode <code>crear</code> rebr\u00e0 un objecte anomenat <code>$request</code> (el qual podem canviar-li el nom perfectament) de tipus <code>Request</code> pel que HEM DE IMPORTAR Request&lt; /span&gt; per poder utilitzar aquesta classe de Laravel. <p>Dins del m\u00e8tode <code>crear</code> que acabem d\u201fescriure, hem de fer \u00fas del model <code>Nota</code> que ja creem en altres exemples i instanciar-la a trav\u00e9s d\u201funa variable, en el nostre cas <code>$notaNueva</code>.</p> <p>D'aquesta manera, podrem accedir als m\u00e8todes i propietats de la mateixa, per aix\u00f2 podem utilitzar <code>nom</code> i <code>descripcio</code>.</p> <p>Aix\u00ed mateix, la variable <code>$request</code> est\u00e0 formada pels mateixos noms de <code>input</code> que hem posat al formulari de la plantilla, si us acordeu eren <code>name=\"nom\"</code> i <code>name=\"descripcio\"</code>.</p> <p>Finalment fem servir el m\u00e8tode <code>save()</code> per desar aquestes noves dades a la base de dades i retornem a la p\u00e0gina del formulari amb el m\u00e8tode <code>back()</code> afegint un missatge amb <code>with()</code>.</p> <p>Per\u00f2, on sortir\u00e0 aquest missatge? -- ho hem de declarar a la nostra plantilla</p> <pre><code>@if (session('missatge'))\n   &lt;div class=\"missatge-nota-creada\"&gt;\n       {{ session('missatge') }}\n   &lt;/div&gt;\n@endif\n</code></pre>"},{"location":"0.7frameworks.html#validacions","title":"Validacions","text":"<p>Laravel ens proporciona eines per poder validar les dades que l'usuari introdueix als camps del formulari.</p> <p>A m\u00e9s de poder-ho fer amb l'etiqueta <code>required</code> d'HTML5, hem de validar les dades a trav\u00e9s del Framework.</p> <p>Per aix\u00f2, necessitem modificar diversos elements:</p> <ul> <li>En primer lloc, el nostre arxiu <code>controller</code></li> <li>En segon lloc, la nostra <code>plantilla</code> que carrega el formulari</li> </ul> <p>Comencem amb el controlador. A trav\u00e9s del m\u00e8tode <code>validate()</code> us diem a Eloquent quins camps s\u00f3n requerits per poder enviar el formulari. Farem servir un array associatiu amb el nom de l'input i la paraula reservada <code>required</code></p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 PagesController.php\n\n$request -&gt; validate([\n   'nom' =&gt; 'required',\n   'descripcio' =&gt; 'required'\n]);\n</code></pre> <p>Seguidament ens mourem a la plantilla on estigui el formulari ia trav\u00e9s de la directiva <code>@error</code> crearem un bloc html amb el nostre missatge d\u02bberror per cadascun dels inputs requerits.</p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 notes.blade.php\n\n@error('nom')\n     &lt;div class=\"alert alert-danger\"&gt;\n       No oblidis emplenar el nom\n     &lt;/div&gt;\n@enderror\n</code></pre> <p>Per\u00f2 qu\u00e8 passa quan hi ha hagut un error i ens mostra el missatge que hem escrit? Si t'hi fixes, els camps que havies emplenat perdran la informaci\u00f3, per\u00f2 amb Laravel els podem persistir sense fer que l'usuari torni a introduir-los.</p> <p>Per poder persistir les dades un cop enviades per\u00f2 amb algun error de camp requerit, utilitzarem la directiva <code>old()</code> com a value de l'input dins del nostre formulari i us passarem el nom de l'input declarat a l'etiqueta <code>name</code>.</p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 notes.blade.php\n\n&lt;input\n   type=\"text\"\n   name=\"nom\"\n   value=\"{{ old('nom') }}\"\n   class=\"form-control mb-2\"\n   placeholder=\"Nom de la nota\"\n   autofocus\n&gt;\n</code></pre>"},{"location":"0.7frameworks.html#editant-registres","title":"Editant registres","text":"<p>Despr\u00e9s de tenir camps a la base de dades, seria interessant poder editar-los a trav\u00e9s d'un formulari.</p> <p>Laravel ens proporciona les eines necess\u00e0ries; vegem doncs el que necessitem per poder fer el canvi a trav\u00e9s de la directiva <code>put()</code>.</p> <p>Per poder fer el canvi de registres necessitem el seg\u00fcent:</p> <ul> <li>Un enlla\u00e7 per redirigir a la p\u00e0gina d'editar, passant l'ID de l'element en q\u00fcesti\u00f3</li> <li>Una nova <code>ruta</code> que apunti a la nostra plantilla d'editar</li> <li>Una <code>plantilla</code> per poder editar amb un formulari que rebi les dades a editar</li> <li>Una nova funci\u00f3 dins del nostre <code>controlador</code> per poder manejar les dades ja introdu\u00efdes</li> <li>Una nova <code>ruta</code> que utilitzi el m\u00e8tode <code>put()</code> per poder actualitzar les dades</li> <li>Un nou m\u00e8tode dins del nostre <code>controlador</code> per actualitzar les dades noves introdu\u00efdes</li> </ul> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 notes.blade.php\n\n&lt;a href=\"{{ route('notes.editar', $nota) }}\" class=\"btn btn-warning btn-sm\"&gt;\n   Edita\n&lt;/a&gt;\n</code></pre> <p>Ara creem la ruta</p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 wep.php\n\nRoute::get('editar/{id}', [ PagesController::class, 'editar' ]) -&gt; name('notes.editar');\nRoute::put('editar/{id}', [ PagesController::class, 'actualitzar' ]) -&gt; name('notes.actualitzar');\n</code></pre> <p>Ara necessitem crear una nova plantilla <code>resources/views/notas/editar.blade.php</code></p> <p><pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 editar.blade.php\n@extends('plantilla')\n\n@section('apartat')\n&lt;h2&gt;Editant la nota {{ $nota -&gt; id }}&lt;/h2&gt;\n\n@if (session('missatge'))\n   &lt;div class=\"alert alert-success\"&gt;{{ session('missatge')}}&lt;/div&gt;\n@endif\n\n&lt;form action=\"{{ route('notes.actualitzar', $nota -&gt; id) }}\" method=\"POST\"&gt;\n   @method('PUT') {{-- Necessitem canviar el m\u00e8tode PUT per editar --}}\n   @csrf {{-- Cl\u00e0usula per obtenir un token de formulari en enviar-lo --}}\n\n   @error('nom')\n       &lt;div class=\"alert alert-danger\"&gt;\n           El nom \u00e9s obligatori\n       &lt;/div&gt;\n   @enderror\n   @error('descripcio')\n       &lt;div class=\"alert alert-danger\"&gt;\n           La descripci\u00f3 \u00e9s obligat\u00f2ria\n       &lt;/div&gt;\n   @enderror\n\n   &lt;input\n       type=\"text\"\n       name=\"nom\"\n       class=\"form-control mb-2\"\n       value=\"{{ $nota -&gt; nom }}\"\n       placeholder=\"Nom de la nota\"\n       autofocus\n   &gt;\n   &lt;input\n       type=\"text\"\n       name=\"descripcio\"\n       placeholder=\"Descripci\u00f3 de la nota\"\n       class=\"form-control mb-2\"\n       value=\"{{ $nota -&gt; descripci\u00f3 }}\"\n   &gt;\n\n   &lt;button class=\"btn btn-primary btn-block\" type=\"submit\"&gt;Desa els canvis&lt;/button&gt;\n&lt;/form&gt;\n@endsection\n</code></pre> I per \u00faltim, modifiquem el nostre <code>PagesController</code></p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 PagesController.php\n\npublic function editar($id) {\n   $nota = Nota::findOrFail($id);\n\n   return view('notes.editar', compact('nota'));\n}\n\npublic function actualitzar(Request $request, $id) {\n   $request -&gt; validate([\n       'nom' =&gt; 'required',\n       'descripcio' =&gt; 'required'\n   ]);\n\n   $notaActualitza = Nota::findOrFail($id);\n\n   $notaActualitzar -&gt; nom = $request -&gt; nom;\n   $notaActualitzar -&gt; descripcio = $request -&gt; descripcio;\n\n   $notaActualitzar -&gt; save();\n\n   return back() -&gt; with('missatge', 'Nota actualitzada');\n}\n</code></pre>"},{"location":"0.7frameworks.html#eliminant-registres","title":"Eliminant registres","text":"<p>A l'hora d'eliminar un registre nou, no necessitem crear una plantilla nova ja que podem enviar la instrucci\u00f3 directament a trav\u00e9s d'un altre formulari.</p> <p>Per tant, per eliminar un registre de la base de dades utilitzarem el seg\u00fcent.</p> <ul> <li>Un formulari b\u00e0sic amb un \u00fanic bot\u00f3 d'eliminar</li> <li>Usarem el m\u00e8tode <code>DELETE</code> per sobreescriure el m\u00e8tode del formulari HTML</li> <li>Una <code>ruta</code> nova per controlar l\u02bbaction d\u02bbaquest nou formulari</li> <li>Un nou m\u00e8tode dins del nostre <code>Controlador</code> que porti la l\u00f2gica per esborrar el registre</li> </ul> <p>Veurem com ficar aquest formulari dins del nostre llistat de notes</p> <p><pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 notes.blade.php\n\n&lt;form action=\"{{ route('notes.eliminar', $nota) }}\" method=\"POST\" class=\"d-inline\"&gt;\n   @method('DELETE')\n   @csrf\n\n   &lt;button class=\"btn btn-danger btn-sm\" type=\"submit\"&gt;Eliminar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> Ara que ja tenim muntat el formulari a la nostra plantilla, passem a crear la ruta que hem col\u00b7locat al <code>action</code> del formulari per esborrar elements.</p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 web.php\n\nRoute::delete('eliminar/{id}', [ PagesController::class, 'eliminar' ]) -&gt; name('notes.eliminar');\n</code></pre> <p>El darrer pas que ens queda \u00e9s modificar el PagesController</p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 PagesController.php\n\npublic function eliminar($id) {\n   $notaElimina = Nota::findOrFail($id);\n   $notaElimina -&gt; delete();\n\n   return back() -&gt; with('missatge', 'Nota Eliminada');\n}\n</code></pre> <p>Si tot ha sortit b\u00e9, haurem creat un lloc a Laravel i Eloquent que \u00e9s capa\u00e7 de fer un CRUD validant camps en formularis i inserint dades reals a una base de dades.</p>"},{"location":"0.7frameworks.html#paginacio","title":"Paginaci\u00f3","text":"<p>Per afegir paginaci\u00f3 als nostres resultats, Eloquent t\u00e9 un m\u00e8tode que s'anomena <code>paginate()</code> on li passem un nombre enter com a par\u00e0metre per indicar-li el nombre de resultats que volem per p\u00e0gina.</p> <pre><code>&lt;?php\n\n// estem a \u2593\u2593\u2593 PagesController.php\n\npublic function notes() {\n   // $notes = Nota::all();\n   $notes = Nota::paginate(5);\n\n   return view('notes', compact('notes'));\n}\n</code></pre> <p>Ara veurem certs elements HTML que s'han generat a la nostra vista, aix\u00f2 \u00e9s perqu\u00e8 Laravel fa \u00fas d'una llibreria de paginaci\u00f3 situada a la carpeta <code>vendor/laravel/framework/src/illuminate/Pagination</code></p> <p>Si us fiqueu al directori i obriu l'arxiu <code>tailwind.blade.php</code> veureu l'estructura HTML que us surt a la vista. Podeu modificar aquest arxiu al vostre gust, per\u00f2 \u00e9s recomanable guardar-ne una c\u00f2pia.</p> <p>Hi ha una altra depend\u00e8ncia a <code>resources/lang/en/pagination.php</code> on trobar\u00e0s l'idioma per a la paginaci\u00f3.</p>"},{"location":"0.7frameworks.html#autenticacio","title":"Autenticaci\u00f3","text":"<p>Per a l'utenticaci\u00f3 d'usuaris necessitem instal\u00b7lar unes quantes depend\u00e8ncies ja preparades.</p> <p>No cal crear un projecte nou per\u00f2 nosaltres ho farem per tenir-ne un amb autenticaci\u00f3 i un altre no, el que ja vam fer al principi.</p> <p>Primer de tot, crearem un nou projecte a Laravel que s'anomeni <code>notas_auth</code> i ens fiquem dins de la carpeta del mateix quan l'script hagi acabat.</p> <p>Dins de la carpeta <code>notes_auth</code> llancem les seg\u00fcents ordres.</p> <pre><code>composer require laravel/ui\nphp artisan ui vue --auth\n</code></pre> <p>Per acabar, llan\u00e7arem la comanda <code>migrate</code> que ja coneixem... SI EST\u00c0S WINDOWS fora de la imatge de Docker (utilitzant xampp o semblants) has de crear una nova base de dades i posteriorment modificar el fitxer <code>.env</code> posant el nom d\u02bbaquesta base de dades que acabes de crear.</p> <pre><code>php artisan migrate\n</code></pre> <p>Si tot ha sortit b\u00e9, podreu veure a la carpeta <code>resources/views</code> una carpeta que s'anomena auth i un controlador nou que anomena <code>HomeController</code></p>"},{"location":"0.7frameworks.html#restringir-una-ruta","title":"Restringir una ruta","text":"<p>Si ens fixem, al nou controlador que s'ha creat <code>HomeController</code> podem veure unes l\u00ednies al principi del fitxer que s\u00f3n les que determinen si la ruta est\u00e0 restringida a usuaris registrats i loguejats.</p> <pre><code>&lt;?php\npublic function __construct()\n{\n     $this-&gt;middleware('auth');\n}\n</code></pre> <p>Mitjan\u00e7ant l'\u00fas del <code>middleware</code> anomenat <code>auth</code> establim que totes les rutes que facin \u00fas d\u02bbaquest controlador hagin de passar pel login per mostrar el contingut.</p> <p>Per tant, en els nostres projectes \u00e9s recomanable fer servir diferents controladors per a diferents vistes; les que estiguin reestringides pel login i les que no.</p>"},{"location":"0.7frameworks.html#dades-de-lusuari","title":"Dades de l'usuari","text":"<p>Sempre que vulguem accedir a qualsevol dada de l'usuari loguejat, farem servir el m\u00e8tode <code>auth()</code> per treure per pantalla la informaci\u00f3 o per utilitzar l\u00f2gica a l'hora de desar dades a la base de dades en funci\u00f3 d'un usuari, un email o el camp que sigui.</p> <p>Imaginem que tenim una ruta on accedim a aquesta informaci\u00f3</p> <pre><code>&lt;?php\n\npublic function notes() {\n   return auth()-&gt;user();\n\n   // return auth()-&gt;user() -&gt; name;\n   // return auth()-&gt;user() -&gt; email;\n   // ...\n}\n</code></pre> <p>Si visitem aquesta ruta amb el nostre login i password, ens apareixer\u00e0 per pantalla tota la informaci\u00f3 del nostre <code>user</code> a excepci\u00f3 de la contrasenya i, encara que aix\u00ed fos perqu\u00e8 li forcem, aquesta apareixer\u00e0 encriptada.</p>"},{"location":"0.7frameworks.html#relacions-amb-eloquent","title":"Relacions amb Eloquent","text":"<p>A trav\u00e9s d'Eloquent podrem gestionar les relacions entre les nostres taules de la base de dades d'una manera molt senzilla i sense sent\u00e8ncies SQL.</p>"},{"location":"0.7frameworks.html#un-a-un-1-a-1","title":"Un a un (1 a 1)","text":"<p>Per crear aquest tipus de relacions a Eloquent i Laravel, hem de tenir creades les taules que relacionarem i establir la relaci\u00f3 entre elles a trav\u00e9s del m\u00e8tode <code>hasOne</code>.</p> <p>Suposem que tenim una taules <code>usuari</code> que est\u00e0 relacionada amb la taula <code>telefono</code>.</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Usuari extends Model\n{\n   /**\n    * Obtenir el Tel\u00e8fon associat amb l'Usuari\n    */\n   public function tel\u00e8fon()\n   {\n       return $this -&gt; hasOne(Telefon::class);\n   }\n}\n</code></pre> <p>Un cop feta aix\u00f2, per poder recuperar la dada relacionada, hem d'utilitzar les propietats din\u00e0miques d'Eloquent. Amb aquestes propietats din\u00e0miques podrem obtenir aquesta dada.</p> <pre><code>&lt;?php\n\n$telefon = Usuari::find(1)-&gt;telefon;\n</code></pre> <p>En aquest cas, Eloquent assumeix que a <code>Usuari</code> existeix la clau aliena <code>usuari_id</code> per\u00f2 qu\u00e8 passa si tenim un altre nom? doncs s'ho passem com a par\u00e0metre.</p> <pre><code>&lt;?php\n\nreturn $this-&gt;hasOne(Tel\u00e8fon::class, 'clau_aliena');\n</code></pre>"},{"location":"0.7frameworks.html#un-a-un-inversa","title":"Un a Un INVERSA","text":"<p>Ara que podem accedir al model tel\u00e8fon des del model usuari, veurem com fer-ho de manera inversa, \u00e9s a dir, com accedir des del model <code>usuari</code> des del model <code>telefono</code> gr\u00e0cies al m\u00e8tode <code>belongsTo()</code>.</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Telefon extends Model\n{\n   public function usuari()\n   {\n       return $this -&gt; belongsTo(Usuari::class);\n   }\n}\n</code></pre> <p>En anomenar el m\u00e8tode de <code>usuari</code>, Eloquent intentar\u00e0 trobar un model d\u02bbusuari que tingui un <code>id</code> que coincideixi amb la columna de <code>usuari_id</code> en el model de <code>telefon</code>.</p> <p>Eloquent determina el nom de la clau externa examinant el nom del m\u00e8tode de relaci\u00f3 i afegint el sufix <code>_id</code> al nom del m\u00e8tode. Aleshores, assumeix que el model <code>Tel\u00e8fon</code> t\u00e9 una columna <code>usuari_id</code>. No obstant aix\u00f2, si no es diu aix\u00ed, podeu passar-li com a argument el nom de la clau.</p> <pre><code>&lt;?php\n\npublic function usuari()\n{\n     return $this -&gt; belongsTo(Usuari::class, 'clau_aliena');\n}\n</code></pre>"},{"location":"0.7frameworks.html#un-a-molts-1-a-mm","title":"Un a Molts (1 a MM)","text":"<p>En aquest cas, les relacions de 1 a molts podem dir que en una entrada d'un bloc, o en un post de Facebook, hi ha molts comentaris relacionats amb aquesta mateixa publicaci\u00f3.</p> <p>Per comen\u00e7ar, ja sabem que hem de crear el model i en aquest cas farem servir el m\u00e8tode <code>hasMany()</code> per obtenir les dades relacionades amb aquest post o entrada al bloc</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n\n   public function comentaris()\n   {\n       return $this -&gt; hasMany(Comentari::class);\n   }\n}\n</code></pre> <p>Compte amb les claus alienes, que aqu\u00ed passa el mateix... Eloquent estableix per defecte el sufix <code>_id</code> per tant, en aquest exemple buscaria per <code>post_id</code>. Si no volem aix\u00f2 o la nostra clau aliena t\u00e9 un altre nom, ho vam passar per par\u00e0metre en el m\u00e8tode <code>hasMany</code> com f\u00e8iem m\u00e9s amunt.</p> <p>Ara, en haver-hi m\u00e9s d'una dada, necessitem iterar, per tant, hem de crear un bucle per poder treure cada dada.</p> <pre><code>&lt;?php\nuse App\\Models\\Post;\n\n$comentaris = Post::find(1) -&gt; comentaris;\n\nforeach ($comentaris as $comentari) {\n     // El que sigui que fem amb aquestes dades\n}\n</code></pre> <p>A m\u00e9s, com que totes les relacions s\u00f3n sent\u00e8ncies SQL, podem niar diversos filtres en funci\u00f3 del que vulguem treure.</p> <pre><code>$comentari = Post::find(1) -&gt; comentaris()\n     -&gt;where('t\u00edtol', 'el que sigui')\n     -&gt;first();\n</code></pre>"},{"location":"0.7frameworks.html#un-a-molts-inversa","title":"Un a Molts INVERSA","text":"<p>Ara que podem accedir a tots els comentaris d'una publicaci\u00f3, definim una relaci\u00f3 per permetre que un comentari accedeixi a la publicaci\u00f3 principal.</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Comentari extends Model\n{\n\n   public function post()\n   {\n       return $this -&gt; belongsTo(Post::class);\n   }\n}\n</code></pre> <p>I ara, a trav\u00e9s de la propietat de relaci\u00f3 din\u00e0mica...</p> <pre><code>&lt;?php\n\nuse App\\Models\\Comentari;\n\n$comentari = Comentari::find(1);\n\nreturn $comentari -&gt; post -&gt; titulo;\n</code></pre> <p>Passaria el mateix amb el nom de la clau aliena, si no es diu de la mateixa manera que Eloquent estableix amb el sufix <code>_id</code> podem passar-li com a par\u00e0metre el nom de la clau on heu de buscar.</p>"},{"location":"0.7frameworks.html#molts-a-molts-mm-a-mm","title":"Molts a Molts (MM a MM)","text":"<p>Aquest tipus de relacions s\u00f3n les m\u00e9s complicades ja que, en un Blog de l'estil Wordpress per exemple, un usuari pot tenir molts rols (lector, autor, administrador) per\u00f2 un rol poden tenir-lo diversos usuaris, \u00e9s a dir, hi pot haver molts usuaris administradors, altres lectors i altres.</p> <p>Per fer aquest tipus de relacions necessitar\u00edem 3 taules diferents.</p> <ul> <li>usuaris [ id, nom]</li> <li>rols [id, nom]</li> <li>rol_usuari [usuari_id, rol_id] (Taula Pivote)</li> </ul> <p>Primer de tot, crearem les taules amb els seus models a excepci\u00f3 de la taula pivot rol_usuari que nom\u00e9s crearem la taula, sense el seu model</p> <pre><code>php artisan make:migration create_rol_usuari_table --create=rol_usuari\n</code></pre> <p>I l'estructura de la dita seria de la seg\u00fcent manera...</p> <pre><code>&lt;?php\n\npublic function up()\n{\n     Schema::create('rol_usuari', function (Blueprint $table) {\n         $table-&gt;bigIncrements('id');\n         $table-&gt;unsignedInteger('usuari_id');\n         $table-&gt;unsignedInteger('rol_id');\n         $table-&gt;timestamps();\n     });\n}\n</code></pre> <p>Ara que ja tenim tot llest, les relacions de Molts a Molts v\u00e9nen definides per un m\u00e8tode que torna el resultat d'usar el m\u00e8tode <code>belongsToMany()</code></p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Usuari extends Model\n{\n     public function roles()\n     {\n         return $this -&gt; belongsToMany(Rol::class);\n     }\n}\n</code></pre> <p>Un cop tinguem les relacions definides, hi accedirem mitjan\u00e7ant les propietats din\u00e0miques de <code>rol</code></p> <pre><code>&lt;?php\n\nuseu App\\Models\\Usuari;\n\n$usuari = Usuari::find(1);\n\nforeach ($usuari -&gt; rols as $rol) {\n     // el nostre codi\n}\n</code></pre> <p>Recordeu-vos que podem encadenar comandes sql a trav\u00e9s dels m\u00e8todes d'Eloquent</p> <pre><code>&lt;?php\n\n$roles = Usuari::find(1) -&gt; rols() -&gt; orderBy('nom') -&gt; get();\n</code></pre>"},{"location":"0.7frameworks.html#molts-a-molts-inversa","title":"Molts a Molts INVERSA","text":"<p>Per definir el \"invers\" d'una relaci\u00f3 de molts a molts, cal establir un m\u00e8tode en el model relacionat que tamb\u00e9 retorni el resultat del m\u00e8tode <code>belongsToMany</code>. Segons l'exemple que estem seguint...</p> <p><pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Rol extends Model\n{\n   public function usuaris()\n   {\n       return $this -&gt; belongsToMany(Usuari::class);\n   }\n}\n</code></pre> Farem un exemple amb una APP que gestions alumnes i assignatures, de manera que MOLTS ALUMNES poden cursar MOLTES ASSIGNATURES</p> <p>Qu\u00e8 necessitem per a aquest exemple?</p> <ul> <li> <p>3 migracions per crear les taules</p> <ul> <li><code>Alumnes</code> /// <code>Materies</code> /// <code>AlumneMateria</code></li> </ul> </li> <li> <p>Modificar els fitxers de les migracions <code>create_alumnes_table</code> i <code>create_materies_table</code>.</p> </li> <li>Crear la base de dades <code>molts_a_molts</code></li> <li>Executar les Migracions</li> <li>2 models per a <code>Alumnes</code> /// <code>Materies</code></li> <li>M\u00e8tode dins de <code>Alumne</code> per crear la relaci\u00f3 Alumne -&gt; Mat\u00e8ria</li> <li>Crear el controlador per a la vista</li> <li>Crear la ruta de la nostra vista</li> <li>Emplenar la base de dades</li> <li>Crear la vista amb les dades</li> </ul> <p>3 MIGRACIONS <pre><code>php artisan make:migration create_alumnes_table\nphp artisan make:migration create_materies_table\nphp artisan make:migration create_alumne_materia_table\n</code></pre></p> <p>MODIFICANT LES MIGRACIONS</p> create_alumnes_table.phpcreate_materies_table.phpcreate_alumne_materia_table.php <pre><code>&lt;?php\n\npublic function up()\n{\n  Schema::create('alumnes', function (Blueprint $table) {\n    $table-&gt;id();\n    $table-&gt;string('nom');\n    $table-&gt;timestamps();\n  });\n}\n</code></pre> <pre><code>&lt;?php\n\npublic function up()\n{\n  Schema::create('materies', function (Blueprint $table) {\n    $table-&gt;id();\n    $table-&gt;string('nom');\n    $table-&gt;timestamps();\n  });\n}\n</code></pre> <pre><code>&lt;?php\n\npublic function up()\n{\n  Schema::create('alumne_materia', function (Blueprint $table) {\n    $table-&gt;id();\n\n    $table-&gt;foreignId('alumne_id')\n      -&gt;nullable()\n      -&gt;constrained('alumnes')\n      -&gt;cascadeOnUpdate()\n      -&gt;nullOnDelete();\n\n    $table-&gt;foreignId('materia_id')\n      -&gt;nullable()\n      -&gt;constrained('materies')\n      -&gt;cascadeOnUpdate()\n      -&gt;nullOnDelete();\n\n    $table-&gt;timestamps();\n  });\n}\n</code></pre> <p>CREEM LA BASE DE DADES</p> <p>Per a aquest exemple, crearem una base de dades que s'anomeni <code>molts_a_molts</code> des de la consola de MySQL o MariaDB.</p> <pre><code>CREATE TABLE `molts_a_molts`\n</code></pre> <p>EXECUTANT LES MIGRACIONS</p> <p>Ja tenim les migracions creades i la base de dades llesta per inserir el contingut de les migracions que hem escrit m\u00e9s amunt, el que ens queda \u00e9s \u201cexecutar les migracions\u201d per bolcar tota l'estructura a la nostra nova base de dades.</p> <pre><code>php artisan migrate\n</code></pre> <p>2 MODELS PER ALUMNES I MAT\u00c8RIES</p> <pre><code>php artisan make:model Alumne\nphp artisan make:model Materia\n</code></pre> <p>M\u00c8TODES PER CREAR LES RELACIONS ALUMNE &lt;-&gt; MAT\u00c8RIA</p> Alumne.phpMateria.php <pre><code>&lt;?php\n\npublic function materies() {\n  return $this -&gt; belongsToMany(Materia::class, 'alumne_materia');\n}\n</code></pre> <pre><code>&lt;?php\n\npublic function alumnes() {\n  return $this -&gt; belongsToMany(Alumne::class, 'alumne_materia');\n}\n</code></pre> <p>CREANT EL CONTROLADOR DE LA VISTA</p> <p>Necessitem un controlador per redireccionar les rutes a les vistes que nosaltres vulguem, per aix\u00f2 crearem el controlador <code>RelacionController</code></p> <pre><code>php artisan make:controller RelacionController\n</code></pre> <p>CREANT RUTES</p> <p>Ara que ja tenim el nostre controlador, crearem una \u00fanica vista per mostrar l'exemple de la relaci\u00f3 MOLTS a MOLTS, en aquest cas un alumne determinat.</p> <p>A m\u00e9s, al nostre controlador <code>RelacioController</code> escriurem el codi necessari perqu\u00e8 ens torni les dades relacionades amb l'alumne amb id <code>1</code> i la mat\u00e8ria amb id <code>2</code>.</p> web.phpRelacioController.php <pre><code>&lt;?php\n\n  use App\\Http\\Controllers\\RelacioController;\n  use Illuminate\\Support\\Facades\\Route;\n\n  Route::get('molts', [ RelacioController::class, 'index' ]);\n</code></pre> <pre><code>&lt;?php\n\n  namespace App\\Http\\Controllers;\n\n  use App\\Models\\Alumne;\n  use App\\Models\\Materia;\n  use Illuminate\\Http\\Request;\n\n  class RelacioController extends Controller\n  {\n    public function index() {\n      $alumne = Alumne::find(1);\n      $materia = Mat\u00e8ria::find(2);\n\n      return view('molts', compact('alumne', 'mat\u00e8ria'));\n    }\n  }\n</code></pre> <p>EMPLENANT LA BASE DE DADES</p> <p>Necessitem ficar alguns registres a la nostra base de dades, per tant, crearem diverses dades al nostre sistema amb les seg\u00fcents sent\u00e8ncies SQL.</p> Taula AlumnesTaula Mat\u00e8riesTaula Alumne_Materia <pre><code>  INSERT INTO alumnes (`nom`) VALUS\n  ('Antonio'),\n  ('Laura'),\n  ('Marta'),\n  ('Pedro');\n</code></pre> <pre><code>  INSERT INTO mat\u00e8ries (`nom`) VALUS\n  ('Programaci\u00f3'),\n  ('Interfaces'),\n  ('JavaScript'),\n  ('Sistemes');\n</code></pre> <pre><code>  INSERT INTO alumne_mat\u00e8ria (`alumne_id`, `mat\u00e8ria_id`) VALUES\n  (1, 2),\n  (1, 4),\n  (3, 2),\n  (3, 1),\n  (2, 3),\n  (2, 4),\n  (4, 4),\n  (4, 1);\n</code></pre> <p>CREANT LA VISTA AMB LES DADES</p> <p>L'\u00faltim pas que farem \u00e9s, llistar les dades relacionades en una vista o plantilla <code>Blade</code> senzilla. Per aix\u00f2 ens creem l'arxiu <code>muchos.blade.php</code> ja que \u00e9s el nom que hem posat al nostre arxiu de rutes.</p> Alumnes que cursen mat\u00e8riesMateries cursades per alumnes <pre><code>&lt;div class=\"row justify-content-center\"&gt;\n  &lt;div class=\"col-auto\"&gt;\n    &lt;h3&gt;Alumne {{ $alumne -&gt; nom }} est\u00e0 cursant les mat\u00e8ries&lt;/h3&gt;\n\n    &lt;table class=\"table table-striped table-hover\"&gt;\n      &lt;thead class=\"bg-primary text-white\"&gt;\n        &lt;th&gt;MAT\u00c8RIES&lt;/th&gt;\n      &lt;/thead&gt;\n\n      &lt;tbody&gt;\n        @foreach ($alumne -&gt; mat\u00e8ries as $registre)\n          &lt;tr&gt;\n            &lt;td&gt;\n                {{ $registre -&gt; nom }}\n             &lt;/td&gt;\n          &lt;/tr&gt;\n        @endforeach\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>&lt;div class=\"row justify-content-center\"&gt;\n  &lt;div class=\"col-auto\"&gt;\n    &lt;h3&gt;La mat\u00e8ria {{$materia -&gt; nom }} l'estan cursant els alumnes&lt;/h3&gt;\n\n    &lt;table class=\"table table-striped table-hover\"&gt;\n      &lt;thead class=\"bg-primary text-white\"&gt;\n        &lt;th&gt;ALUMNES&lt;/th&gt;\n      &lt;/thead&gt;\n\n      &lt;tbody&gt;\n        @foreach ($materia -&gt; alumnes as$registre)\n          &lt;tr&gt;\n            &lt;td&gt;\n              {{ $registre -&gt; nom }}\n            &lt;/td&gt;\n          &lt;/tr&gt;\n        @endforeach\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"071Laravel_introduccio.html","title":"Introducci\u00f3 als frameworks PHP i Laravel","text":""},{"location":"071Laravel_introduccio.html#frameworks","title":"Frameworks","text":"<p>Un framework \u00e9s una eina que proporciona una s\u00e8rie de m\u00f2duls que ajuden a organitzar i desenvolupar un producte programari. En el cas concret dels frameworks PHP, la majoria d'ells proporcionen una s\u00e8rie de comandos o eines per a crear projectes amb una estructura determinada (normalment, seguint el patr\u00f3 MVC que veurem despr\u00e9s), de manera que ja donen una base de treball feta, i facilitats per a poder crear el model de dades, la connexi\u00f3 a la base de dades, les rutes de les diferents seccions de l'aplicaci\u00f3, etc.</p>"},{"location":"071Laravel_introduccio.html#exemples-de-frameworks-php","title":"Exemples de frameworks PHP","text":"<p>Actualment existeix una gran varietat de frameworks PHP que triar per a desenvolupar les nostres aplicacions. Alguns dels m\u00e9s populars s\u00f3n:</p> <ul> <li> <p>Laravel, un framework relativament recent (va ser creat en 2011), i que ha guanyat bastant popularitat en els \u00faltims anys. La seua \ufb01losofia \u00e9s el poder desenvolupar projectes de manera elegant i simple. Compta amb una \u00e0mplia comunitat de suport darrere, i se li augura un futur bastant consolidat.</p> </li> <li> <p>Symfony, creat en 2005, compta amb m\u00e9s cam\u00ed fet que Laravel, i una estructura m\u00e9s consolidada. En les seues primeres versions es presentava com un framework m\u00e9s monol\u00edtic (s'instal\u00b7laven massa m\u00f2duls que despr\u00e9s no necessit\u00e0vem), per\u00f2 recentment ha adaptat la seua estructura per a fer-la m\u00e9s modular.</p> </li> <li> <p>CodeIgniter, un framework m\u00e9s lleuger que els anteriors, per\u00f2 tamb\u00e9 amb un ampli grup de seguidors i desenvolupadors. Va ser creat en 2006 i, encara que ha patit una etapa d'aband\u00f3, ha tornat a agafar for\u00e7a en els \u00faltims anys, potser a causa de la seua simplicitat d'\u00fas.</p> </li> <li> <p>CakePHP, creat en 2005, \u00e9s un altre framework similar a CodeIgniter quant a simplicitat i facilitat d'\u00fas. T\u00e9 una \u00e0mplia comunitat tamb\u00e9 darrere que li d\u00f3na suport.</p> </li> <li> <p>Zend, creat en 2006, \u00e9s un altre framework bastant popular, encara que potser amb menor visibilitat que els anteriors hui dia, a l'altura de CakePHP.</p> </li> <li> <p>Phalcon, un altre framework de recent creaci\u00f3 (2012), amb una potent capacitat de processament de p\u00e0gines PHP, i la possibilitat de treballar com microframework (m\u00e9s lleuger, per a oferir funcionalitats molt espec\u00ed\ufb01cas) o com framework complet. </p> </li> </ul> <p>De fet, molts frameworks m\u00e9s antics tamb\u00e9 han incorporat recentment la possibilitat d'executar-los com microframeworks. Quasi tots els frameworks PHP tenen una s\u00e8rie de caracter\u00edstiques comunes, com s\u00f3n l'\u00fas del patr\u00f3 MVC per a desenvolupar els seus projectes, la injecci\u00f3 de depend\u00e8ncies per a gestionar recursos com ara connexions a bases de dades, o elements compartits per tota l'aplicaci\u00f3, la possibilitat de desenvolupar tant webs completes com serveis REST accessibles des de diversos clients, etc.</p>"},{"location":"071Laravel_introduccio.html#quin-triar","title":"Quin triar","text":"<p>A l'hora de decantar-nos per l'un o l'altre framework, no ens haur\u00edem de deixar enganyar per la popularitat d'aquest, en termes de quota de mercat. En aqueix terreny, Symfony i Laravel probablement s\u00f3n els m\u00e9s demandats, per\u00f2 la corba d'aprenentatge en ells pot ser que siga m\u00e9s pronunciada que en uns altres a priori m\u00e9s senzills, com CodeIgniter o CakePHP.</p> <p>Cada framework pot estar millor orientat que un altre per a determinats tipus de projectes o necessitats. Si volem aprendre una cosa r\u00e0pida per a llan\u00e7ar l'aplicaci\u00f3 com m\u00e9s prompte millor, potser Symfony no \u00e9s la millor opci\u00f3. Si, per contra, preferim xopar-nos d'un framework amb una comunitat important darrere que ens puga donar suport i ens garantisca un temps de vida llarg, llavors Symfony o Laravel poden ser millors candidats.</p>"},{"location":"071Laravel_introduccio.html#per-que-laravel","title":"Per qu\u00e8 Laravel?","text":"<p>Arribats a aquest punt... quines caracter\u00edstiques t\u00e9 Laravel que ens hagen fet triar-ho per a aquest curs enfront d'altres frameworks? \u00c9s un framework que ofereix bastants avantatges.</p> <p>\u00c9s bastant popular hui dia, potser el que m\u00e9s, si atenem diferents webs estad\u00edstiques. Per exemple, si comparem les cerques en Google Trends dels principals frameworks PHP, observem que Laravel \u00e9s el m\u00e9s destacat:</p> <p></p> <p>Tamb\u00e9 \u00e9s un dels frameworks PHP que m\u00e9s demanda laboral a nivell nacional segons  InfoJobs.</p> <p>T\u00e9 una gran comunitat darrere, la qual cosa permet trobar f\u00e0cilment ajuda per a problemes que tinguem T\u00e9 una bona documentaci\u00f3, tant per terceres parts com a trav\u00e9s de la seua pr\u00f2pia p\u00e0gina o\ufb01cial. Disposa d'algunes llibreries addicionals que permeten afegir funcionalitat molt interessant, com el motor de plantilles Blade, o el ORM Eloquent, que veurem m\u00e9s endavant, aix\u00ed com llibreries de terceres parts que podem incorporar als nostres projectes.</p> <p>En realitat, una vegada es coneix un d'aquests frameworks, \u00e9s m\u00e9s senzill assimilar la resta, arribat el moment. Aix\u00ed que Laravel pot ser un bon punt de partida. En concret, durant el curs utilitzarem la versi\u00f3 8 del framework, que es recolza en PHP 7 per a funcionar.</p>"},{"location":"071Laravel_introduccio.html#caracteristiques","title":"Caracter\u00edstiques","text":"<p>Laravel \u00e9s un framework de codi obert per al desenvolupament d'aplicacions web en PHP que posseeix una sintaxi simple, expressiva i elegant. Va ser creat en 2011 per Taylor Otwell, inspirant-se en Ruby on Rails i Symfony, dels quals ha adoptat els seus principals avantatges.</p> <p>Laravel facilita el desenvolupament simplificant el treball amb tasques comunes com l'autenticaci\u00f3, el enrutamiendo, gesti\u00f3 sessions, l'emmagatzematge en cach\u00e9, etc. Algunes de les principals caracter\u00edstiques i avantatges de Laravel s\u00f3n:</p> <ul> <li>Esta dissenyat per a desenvolupar sota el patr\u00f3 MVC (model - vista - controlador), centrant-se en la correcta separaci\u00f3 i modularitzaci\u00f3 del codi. El que facilita el treball en equip, aix\u00ed com la claredat, el manteniment i la reutilitzaci\u00f3 del codi.</li> <li>Integra un sistema ORM de mapeado de dades relacional anomenat Eloquent encara que tamb\u00e9 permet la construcci\u00f3 de consultes directes a for\u00e7a de dades mitjan\u00e7ant la seua Query Builder.</li> <li>Permet la gesti\u00f3 de bases de dades i la manipulaci\u00f3 de taules des de codi, mantenint un control de versions de les mateixes mitjan\u00e7ant el seu sistema de Migracions.</li> <li>Utilitza un sistema de plantilles per a les vistes anomenat Blade, el qual fa \u00fas de la cache per a donar-li major velocitat. Blade facilita la creaci\u00f3 de vistes mitjan\u00e7ant l'\u00fas de layouts, her\u00e8ncia i seccions.</li> <li>Facilita l'extensi\u00f3 de funcionalitat mitjan\u00e7ant paquets o llibreries externes. D'aquesta forma \u00e9s molt senzill afegir paquets que ens faciliten el desenvolupament d'una aplicaci\u00f3 i ens estalvien molt temps de programaci\u00f3.</li> <li>Incorpora un int\u00e8rpret de l\u00ednia de comandos anomenat Artisan que ens ajudar\u00e0 amb un munt de tasques rutin\u00e0ries com la creaci\u00f3 de diferents components de codi, treball amb la base de dades i migracions, gesti\u00f3 de rutes, cach\u00e9s, cues, tasques programades, etc.</li> </ul>"},{"location":"1.Introduccio.html","title":"1.Introduccio","text":""},{"location":"1.Introduccio.html#introduccio-al-desenvolupament-daplicacions-web","title":"Introducci\u00f3 al desenvolupament d'aplicacions web","text":"<p>Las aplicacions web es basen en el model client-servidor. </p> <p>El client inicia el proc\u00e9s amb una sol\u00b7licitud al servidor que genera un missatge de resposta. Ambdos es comuniquen utilitzant un protocol com\u00fa. En el cas del servidors web, els clients solen ser navegadors els que realitzen peticions, i estos responen amb la p\u00e0gina web sol\u00b7licitada o amb un missatge d'error.</p> <p></p> <p>La comunicaci\u00f3 es realitza mitjan\u00e7ant els protocols HTTP (80) o HTTPS (443), i on la capa de presentaci\u00f3 s'executa en el navegador, la capa de negoci al servidor i la capa de dades en el servidor de base de dades.  </p>"},{"location":"1.Introduccio.html#generacio-dinamica-de-pagines-web","title":"Generaci\u00f3 din\u00e0mica de p\u00e0gines web","text":"<p>El llenguatge b\u00e0sic de la web \u00e9s el HTML i el CSS. Si el contingut no varia estariem parlant de p\u00e0gines est\u00e0tiques. </p> <p>Avantatges:</p> <ul> <li>Nom\u00e9s necesitem coneixements HTML i CSS o eines de disseny web.</li> <li>F\u00e0cil indexaci\u00f3 per part dels cercadors.</li> <li>No requereix recursos extra del servidor web.</li> <li>Podem vore les p\u00e0gines sense la necessitat d'un servidor web.</li> </ul> <p>Desavantatges:</p> <ul> <li>Contingut mantingut manualment.</li> </ul> <p>Quan s'utilitza un llenguatge de programaci\u00f3 al servidor tindrem p\u00e0gines din\u00e0miques i es poden generar diferentes respostes segons l'usuari connectat,el navegador amb el qual s'accedisca, les accions anteriors dels usuaris o les peticions de l'usuari. </p> <p>Encara que estariem parlant de diferents llenguatges de programaci\u00f3, </p>"},{"location":"1.Introduccio.html#esquema-de-funcionamient","title":"Esquema de funcionamient","text":""},{"location":"1.Introduccio.html#execucio-de-codi","title":"Execuci\u00f3 de codi","text":"<p>Hi ha dos tipus de codi que fan una web din\u00e0mica:</p> <ul> <li>El que s\u2019executa en el servidor (back-end). S\u00f3n m\u00e9s senzilles de programar, s'executen al servidor i generen la resposta visible per als navegadors, en llenguatge HTML.</li> <li>El que s\u2019executa en el navegador (front-end). T\u00edpicament javascript i els seus derivats.</li> <li>Tamb\u00e9 hi han models h\u00edbrids on s'obtenen dades del servidor des del codi javascript utilitzant peticions AJAX.</li> </ul>"},{"location":"1.Introduccio.html#tecnologies-al-costat-del-servidor","title":"Tecnologies al costat del servidor","text":"<ul> <li>Servidor web</li> <li>M\u00f2dul encarregat de l'execuci\u00f3 de codi<ul> <li>Integrat al servidor</li> <li>Dep\u00e9n de cada tecnologia emprada i llenguatge de programaci\u00f3</li> </ul> </li> <li>SGBD</li> <li>Llenguate de programaci\u00f3</li> </ul>"},{"location":"1.Introduccio.html#arquitectures-i-plataformes","title":"Arquitectures i plataformes","text":"<ul> <li>JAVA EE -&gt; Java -&gt; Aplicacions mitjanes/grans -&gt; diferents tecnologies JSP, Servlets, EJB.</li> <li>AMP -&gt; Apache o Nginx, Mysql,  PHP/Perl/Phyton -&gt; Aplicacions mitjanes/petites</li> <li>CGI/Perl -&gt; primitiu -&gt; lent</li> <li>ASP.NET -&gt; Microsoft -&gt; ISS -&gt; C#,Visual Basic,.. -&gt;Visual Studio</li> </ul>"},{"location":"1.Introduccio.html#llenguatges-de-programacio-en-entorns-servidor","title":"Llenguatges de programaci\u00f3 en entorns servidor","text":"<ul> <li>PHP: El m\u00e9s est\u00e9s. Normalment s'executa com un m\u00f2dul al servidor. Es f\u00e0cil i barat trobar allotjaments que l'oferisquen.</li> <li>JSP: La versi\u00f3 de Java per a la web. Li cal un contenidor web.</li> <li>ASP.NET: Integrada en la plataforma de microsoft .NET</li> <li>Ruby: Molt apreciat per els desenvolupadors web.</li> <li>GO: La versi\u00f3 de google de phyton.</li> <li>Phyton: El m\u00e9s popular.</li> <li>NodeJS: Utilitza Javascript.</li> </ul> <p>A m\u00e9s tenim frameworks associats. (Laravel, Symphony, Ruby on Rails, Django)</p> <p>Quins criteris utilitzariem a l'hora de triar un llenguatje per a fer un lloc web.</p> <ul> <li>Com \u00e9s el lloc web.</li> <li>Com esperem que siga el creixement.</li> <li>Com necesitem que siga de r\u00e0pida.</li> <li>Qu\u00e9 ser\u00e0 m\u00e9s prevalent el back-end o el front-end.</li> <li>Quin llenguatge coneixem.</li> <li>On l'allotjarem.</li> <li>Quin suport tindrem.</li> <li>Quins components tindrem.</li> <li>Quina actualitzaci\u00f3 tindrem.</li> </ul> <p>Comparaci\u00f3 de llenguatges</p> <p>Criteris per apendre un llenguatge de programaci\u00f3</p>"},{"location":"1.Introduccio.html#installacio-de-lentorn-de-desenvolupament","title":"Instal\u00b7laci\u00f3 de l'entorn de desenvolupament","text":"<p>Pera fer correr les aplicacions de servidor ens cal, com a m\u00ednim, un servidor web, l'interpret de php i un motor de base de dades. Hem de distinguir l'entorn de desenvolupament, on anem a programar i mantindre la nostra aplicaci\u00f3, de l'entorn de producci\u00f3, on anem a executar-la. Normalment el primer dep\u00e9n de nosaltres mentre que el segon pot dependre de l'empresa on s'allotjar\u00e0 la nostra web. Per a preparar el nostre entorn de desenvolupament podem optar per:</p> <ul> <li>Qualsevol soluci\u00f3 LAMP (Linux, Apache, Mysql, PHP). Als que haurem d'afegir, una vegada els projectes es facen grans composer, git i les opcions de la part de client.</li> <li>Una m\u00e0quina virtual ja configurada. </li> <li>Una soluci\u00f3 docker.</li> </ul> <p>La primera soluci\u00f3 \u00e9s senzilla d'implementar per\u00f2 no hauria de ser la nostra primera opci\u00f3 per:</p> <ul> <li>Estem possant en marxa en la nostra m\u00e0quina una s\u00e8rie de servicis que normalment no fariem, baixant el rendiment de la m\u00e0quina i obrint vulnerabilitats.</li> <li>Si treballem en grup, les instal\u00b7lacions i el funcionament no s\u00f3n iguals, depenen del sistema operatiu que t\u00e9 instal\u00b7lat cadasc\u00fa. All\u00f2 que li funciona a \u00fa  pot ser no li funciona a un altre. Aix\u00f2 \u00e9s inevitable quan el projecte es complica i es perd molt de temps.</li> <li>Passa el mateix quan passem a l'entorn de producci\u00f3.</li> </ul> <p>La segona soluci\u00f3 soluciona els dos primers problemes, doncs tots els desenvolupadors poden tindre virtualitzada, la mateixa m\u00e0quina. Encara que si la m\u00e0quina no la fem nosaltres sin\u00f3 que utilitzem alguna ja configurada (vagrant) o si ens cal instal\u00b7lar alguna cosa m\u00e9s, ho hauria de fer tot l'equip. </p> <p>Aix\u00ed i tot, tindriem les seg\u00fcents desaventatges:</p> <ul> <li>A l'instal\u00b7lar una maquina virtual sencera ocupa recursos del sistema.</li> <li>La m\u00e0quina instal\u00b7la m\u00e9s coses de les necess\u00e0ries habitualment.</li> <li>No reprodueix l'entorn de producci\u00f3.</li> </ul> <p>Pot ser molt \u00fatil, per exemple, quan la fem servir per desenvolupar en un framework, que ja ve configurat per fer-lo funcionar inmediatament i amb totes les caracter\u00edstiques instal\u00b7lades. </p> <p>La tercera opci\u00f3 t\u00e9 les seg\u00fcents caracter\u00edstiques:</p> <ul> <li>Al principi \u00e9s m\u00e9s dif\u00edcil de possar en funcionamet ja que calen coneixements de docker.</li> <li>Tots els desenvolupadors comparteixen entorn encara que utilitzen m\u00e0quines o sistemes operatius diferents.</li> <li>Si hi ha algun canvi de configuraci\u00f3 de l'entorn \u00e9s f\u00e1cilment transladable a tots els desenvolupadors.</li> <li>Es poden crear tants entorns  de desenvolupament com projectes diferents hi hajen.</li> <li>Els contenidors ocupen pocs recursos.</li> <li>Els projectes es poden possar en producci\u00f3 utilitzan una soluci\u00f3 docker de manera inmediata.</li> </ul>"},{"location":"1.Introduccio.html#configurant-lentorn-de-desenvolupament","title":"CONFIGURANT L'ENTORN DE DESENVOLUPAMENT","text":"<p>En el nostre ordinador he de tindre instal\u00b7lats:</p> <ul> <li>VirtualBox per a allotjar el servidor WEB.</li> <li>Vagrant per a generar la m\u00e0quina virtual</li> </ul>"},{"location":"1.Introduccio.html#vagrant","title":"Vagrant","text":"<p>Vagrant \u00e9s una eina gratu\u00efta de l\u00ednia de comandos, disponible per a Windows, MacOS X i GNU/Linux, que permet generar entorns de desenvolupament reprodu\u00efbles i compartibles de forma molt senzilla. Per a aix\u00f2, Vagrant crea i configura m\u00e0quines virtuals a partir de simples fitxers de configuraci\u00f3.</p> <p>N'hi ha prou amb compartir el fitxer de configuraci\u00f3 de Vagrant (anomenat \u201cVagrantfile\u201d) amb un altre desenvolupador perqu\u00e8, amb un simple comando, puga reproduir el mateix entorn de desenvolupament. Aix\u00f2 \u00e9s especialment \u00fatil en equips formats per diverses persones, ja que assegura que tots els desenvolupadors tenen el mateix entorn, amb les mateixes depend\u00e8ncies i configuraci\u00f3. </p> <p>A m\u00e9s, at\u00e9s que la configuraci\u00f3 de la m\u00e0quina virtual \u00e9s un simple fitxer de text pla, podem incloure aquest fitxer en el nostre repositori en el control de versions, juntament amb la resta del codi del projecte. D'aquesta manera, un nou desenvolupador que s'incorpore a l'equip simplement haur\u00e0 de clonar el repositori del projecte i executar Vagrant per a tindre l'entorn de desenvolupament muntat i funcionant en q\u00fcesti\u00f3 de minuts.</p>"},{"location":"1.Introduccio.html#installacio-de-vagrant","title":"Instal\u00b7laci\u00f3 de vagrant","text":"<p>El primer pas \u00e9s descarregar i instal\u00b7lar Vagrant i a m\u00e9s instal\u00b7lar el prove\u00efdor de m\u00e0quines virtuals que vulguem utilitzar, que per defecte ser\u00e0 VirtualBox, ja que \u00e9s gratu\u00eft i ve integrat en Vagrant. Per a linux:</p> <pre><code>curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\nsudo apt-get update &amp;&amp; sudo apt-get install vagrant\n</code></pre> <p>Una vegada instal\u00b7lats, podrem executar el comando vagrant per a obtindre un llistat de les opcions disponibles.</p> <p>Crear una m\u00e0quina virtual amb Vagrant \u00e9s tan senzill com executar els seg\u00fcents comandos:</p> <pre><code>vagrant init nom_del_box\nvagrant up\n</code></pre> <p>Vagrant funciona amb Boxes que es poden cercar en https://app.vagrantup.com/boxes/search</p> <p>El comando vagrant init crea un fitxer VagrantFile amb la configuraci\u00f3 del box i el comando vagrant up baixa i engega la m\u00e0quina en el virtualBox.</p>"},{"location":"1.Introduccio.html#configuracio-del-box-de-vagrant","title":"Configuraci\u00f3 del box de vagrant:","text":"<ul> <li>Crea un directori en el teu ordinador DEWS i dins d'ell un code i un altre vagrant i ubicat dins del mateix.</li> </ul> <pre><code>mkdir DWES\ncd DWES\nmkdir Code\nmkdir vagrant\ncd vagrant\n</code></pre> <ul> <li>crea un fitxer Vagrantfile amb el seg\u00fcent contingut</li> </ul> <pre><code>Vagrant.configure(\"2\") do |config|\n  config.vm.box = \"Ignasi/dwes\"\n  config.vm.network \"private_network\", ip: \"192.168.99.10\"\n  config.ssh.password = \"vagrant\"\n  config.vm.synced_folder \"../Code\", \"/home/vagrant/code\"\nend\n</code></pre> <ul> <li>o baixa'l del github</li> </ul> <pre><code>git clone https://github.com/igomis/vagrantFile.git .\n</code></pre> <ul> <li>arranca la m\u00e0quina</li> </ul> <pre><code>vagrant up\n</code></pre> <ul> <li>aturant la m\u00e0quina</li> </ul> <pre><code>vagrant halt\nvagrant suspend\n</code></pre>"},{"location":"1.Introduccio.html#configuracio-del-etchosts","title":"Configuraci\u00f3 del /etc/hosts","text":"<p>En la maquina host hem de configurar el /etc/hosts per tal que pugam fer peticions al nostre navegador i responga el servidor web de la m\u00e0quina virtual. La m\u00e0quina virtual t\u00e9 adre\u00e7a 192.168.99.10 i t\u00e9 configurat tres llocs web en els seg\u00fcents directoris:</p> <p>test.dwes.my en /var/www/html</p> <p>phpmyadmin.dwes.my en /var/www/html/phpmyadmin</p> <p>php.dwes.my en /home/vagrant/code/php/public</p> <p>example.dwes.my en /home/vagrant/code/example/public</p> <p>projecte.dwes.my en /home/vagrant/code/projecte/public</p> <p>examen.dwes.my en /home/vagrant/code/examen/public</p> <p>per lo tant estos dominis els haur\u00e8 d'afegir al fitxer de hosts, que en linux i mac esta ubicat al directori /etc</p> <pre><code>sudo nano /etc/hosts\n</code></pre> <p>i all\u00ec haur\u00e8 d'afegir les seg\u00fcents l\u00ednees:</p> <pre><code>192.168.99.10   test.dwes.my\n192.168.99.10   php.dwes.my\n192.168.99.10   example.dwes.my\n192.168.99.10   phpmyadmin.dwes.my\n192.168.99.10   projecte.dwes.my\n192.168.99.10   examen.dwes.my\n</code></pre> <p>en windows el fitxer es troba en C:\\Windows\\System32\\drivers\\etc\\hosts</p>"},{"location":"1.Introduccio.html#provant-la-maquina","title":"Provant la m\u00e0quina","text":"<p> Video</p> <ul> <li>Podem comen\u00e7ar en provar els dominis de la m\u00e0quina.</li> </ul> <p> </p> <ul> <li>Si provem php.dwes.my ens donar\u00e0 un missatge d'error perqu\u00e8 no hi ha cap fitxer dins de code/php/public. Aix\u00ed que anem a crear un fitxer index.php dins d'eixes carpetes. Haurem d'ubicar-nos dins del directori code que hem creat abans i crear un directori php que cont\u00e9 un altre public i all\u00ed crear un fitxer index.php amb el seg\u00fcent codi.</li> </ul> <pre><code>&lt;?php\n\n$host = 'localhost';\n$dbname = 'test';\n$username = 'batoi';\n$password = '1234';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    echo \"Connected to $dbname at $host successfully.\";\n} catch (PDOException $pe) {\n    die(\"Could not connect to the database $dbname :\" . $pe-&gt;getMessage());\n}\n</code></pre> <p>I ara el provar obtenim</p> <p></p> <ul> <li>El primer si volem connectar-nos a la m\u00e0quina creada o podem fer via ssh</li> </ul> <pre><code>vagrant ssh\n</code></pre> <ul> <li>La podem parar amb</li> </ul> <pre><code>vagrant halt\n</code></pre>"},{"location":"1.Introduccio.html#que-trobem-a-la-maquina","title":"QUE TROBEM A LA M\u00c0QUINA","text":""},{"location":"1.Introduccio.html#nginx-18","title":"NGINX (1.8)","text":"<p>nginx (pronunciat en angl\u00e8s \"engine X\") \u00e9s un servidor web / proxy invers lleuger d'alt rendiment i un proxy per protocols de correu electr\u00f2nic ( IMAP / POP3). \u00c9s programari lliure i de codi obert, llicenciat sota la Llic\u00e8ncia BSD simplificada i multiplataforma.</p>"},{"location":"1.Introduccio.html#mysql-80","title":"MYSQL (8.0)","text":"<p>MySQL \u00e9s un sistema de gesti\u00f3 de bases de dades relacional (angl\u00e8s RDBMS - Relational DataBase Management System) multi-fil (multithread) i multiusuari, que usa el llenguatge SQL (Structured Query Language).</p>"},{"location":"1.Introduccio.html#php-80","title":"PHP (8.0)","text":"<p>PHP \u00e9s un llenguatge de programaci\u00f3 interpretat que s'utilitza per a generar p\u00e0gines web de forma din\u00e0mica. S'executa al cant\u00f3 del servidor, per aquest motiu al navegador web ja l'hi arriba la p\u00e0gina en format HTML, no podent visualitzar-ne el codi php. </p>"},{"location":"1.Introduccio.html#composer","title":"COMPOSER","text":"<p>El composer \u00e9s un ferrament molt \u00fatil per a incorporar paquets de tercers a les nostres aplicacions i per a ordenar les classes del nostre projecte dins d'un espai de noms i aix\u00ed control.lar les deped\u00e8ncies entre fitxers. Poden trobar la documentaci\u00f3 en la seua p\u00e0gina web.</p> <p>Per comen\u00e7ar, cada vegada que en baixe un projecte i el pose en marxa, haur\u00e9 d'executar el composer per baixar els paquets associats.</p>"},{"location":"1.Introduccio.html#mailhog","title":"MAILHOG","text":"<p>MailHog \u00e9s una eina de proves de correu electr\u00f2nic de codi obert dirigida principalment als desenvolupadors. Us permet provar les capacitats d'enviament i recepci\u00f3 de correu electr\u00f2nic de la vostra aplicaci\u00f3 web de forma m\u00e9s eficient. El podeu vore en funcionament si aneua a 192.168.99.10:8025</p>"},{"location":"1.Introduccio.html#phpmyadmin","title":"PHPMYADMIN","text":"<p>phpMyAdmin \u00e9s una eina d'administraci\u00f3 de programari lliure i de codi obert per a MySQL i MariaDB. \u00c9s una aplicaci\u00f3 web escrita principalment en PHP, s'ha convertit en una de les eines d'administraci\u00f3 MySQL m\u00e9s populars, especialment per a allotjament web. El podeu trobar en https://phpmyadmin.dwes.my</p>"},{"location":"1.Introduccio.html#altres-eines-imprescindibles","title":"ALTRES EINES IMPRESCINDIBLES","text":""},{"location":"1.Introduccio.html#github","title":"GITHUB","text":"<p>Est\u00e0 ferramenta online ens permet possar al n\u00favol els nostres projectes, compartint-los, permet el treball en equip i ens servir\u00e0 per a la correci\u00f3 dels treballs.</p>"},{"location":"1.Introduccio.html#ide-phpstorm","title":"IDE: PHPSTORM","text":""},{"location":"1.Introduccio.html#installacio","title":"Instal.laci\u00f3","text":"<p>Podem fer-ho de manera autom\u00e0tica utilitzant snap. Per fer-ho amb linux-mint</p> <pre><code>sudo rm /etc/apt/preferences.d/nosnap.pref\nsudo apt update\nsudo apt install snapd\nsudo snap install phpstorm --classic\n</code></pre> <p>Tamb\u00e9 es pot instal\u00b7lar baixant-se el paquet de la p\u00e0gina web.</p>"},{"location":"1.Introduccio.html#llicencia","title":"Llic\u00e8ncia","text":"<p>Podeu sol\u00b7licitar una llic\u00e8ncia a igomis@cipfpbatoi.es</p>"},{"location":"1.Introduccio.html#github-classroom","title":"GitHub Classroom","text":"<p>Us podeu registrar</p> <p>Metodologia de treball amb el github classroom</p> <ul> <li>Se proporcionar\u00e0 a l'alumnat un enlla\u00e7 amb la invitaci\u00f3.</li> <li>Accedint a l'enlla\u00e7 a cada alumne se li crear\u00e0 un repositori individual en l'organitzaci\u00f3.</li> <li>L'alumnat treballa en el seu repositori assignat. Se'l pot baixar per treballar en local.</li> <li>Inicialment, l'alumne crea una branca nova sobre la que va a treballar.</li> <li>Quan vullga sol.licitar ajuda o revisi\u00f3 del professor, l'alumne genera una pull request a la branca principal del seu repositori en la que cita al professor per tal que reba una notificaci\u00f3.</li> <li>El profesor proporciona retroalimentaci\u00f3 mitjan\u00e7ant comentaris en la pull request o en un determinat commit individual.</li> <li>Opcionalment es poden utilitzar els issues y les cites d'usuari per sol\u00b7licitar la intervenci\u00f3 del profesor.</li> <li>Quan l'alumne finalitza la tasca, genera una \u00faltim pull request</li> <li>El profesor revisa la pull request i opcionalment fa comentaris.</li> </ul>"},{"location":"2.Caracteristicas_llenguatge_php.html","title":"Introducci\u00f3 al llenguatge PHP.","text":"<p>El llenguatge PHP \u00e9s flexible i permiteix programar xicotets scripts rapidament. La sintaxi \u00e9s semblant a JAVA i C, encara que requereix meyns codi. </p> <p>Taula de continguts</p> <ul> <li>PHP i HTML. Codi incrustat</li> <li>Variables i tipus de dades<ul> <li>Tipus de dades</li> <li>Comentaris</li> <li>Estructures de control de flux</li> <li>Operadors</li> </ul> </li> <li>Separar la l\u00f2gica de la presentaci\u00f3</li> <li>Cadenes de text</li> <li>Arrays</li> <li>Funcions i llibreries</li> </ul>"},{"location":"2.Caracteristicas_llenguatge_php.html#php-i-html","title":"PHP i HTML","text":""},{"location":"2.Caracteristicas_llenguatge_php.html#codi-incrustat","title":"Codi incrustat","text":"<p>El documents que contenen codi php s'han d'anomenar amb l'extensi\u00f3 .php</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#el-nostre-primer-codi-php","title":"El nostre primer codi PHP","text":"<p>Video</p> <ul> <li>El codi php sempre va entre els simbolos &lt;?php y ?&gt;.</li> <li>Les instruccions php acaben sempre amb ;</li> <li>Per a generar codi html des de php podem utilitzar el m\u00e8tode echo passant-li el text del codi que volem generar.</li> <li>El codi pot anar entre les etiquetes de \\ <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;?php echo 'Hola m\u00f3n' ?&gt;&lt;/h1&gt;\n&lt;body&gt;\n</code></pre> <ul> <li>Tamb\u00e9 podem utilitzar l'etiqueta &lt;?= fa el echo al mateix temps.</li> </ul> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;?= Hola m\u00f3n ?&gt;&lt;/h1&gt;\n&lt;body&gt;\n</code></pre>"},{"location":"2.Caracteristicas_llenguatge_php.html#comentaris","title":"Comentaris","text":"<ul> <li>De bloc entre / i /</li> <li>De linea comen\u00e7ant per // o per #</li> </ul>"},{"location":"2.Caracteristicas_llenguatge_php.html#variables","title":"Variables","text":"<p>Una de les caracter\u00edstiques de php \u00e9s que \u00e9s un llenguatge no fortament tipat. De fet no cal declarar la variable ni indicar el tipus de dades si la declare. Encara que si volem codi de qualitat ho hauriem de fer.</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#declaracio","title":"Declaraci\u00f3","text":"<ul> <li>Els noms de les variables sempre comencen per $ </li> <li>Despr\u00e9s del $ els noms de les variables han d'anar seguits per una lletra o el car\u00e0cter _ i poden contenir tamb\u00e9 n\u00fameros. </li> <li>No \u00e9s necessari declarar una variable ni especificar-li un tipus (sencer, cadena,...) concret.</li> </ul> <p>Per crear una variable que continga el text a generar i mostrar-la:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;\n    &lt;?php \n        $salutacio = 'Hola m\u00f3n';\n        echo $salutacio; \n    ?&gt;\n    &lt;/h1&gt;\n&lt;body&gt;\n</code></pre>"},{"location":"2.Caracteristicas_llenguatge_php.html#tipus-de-les-variables","title":"Tipus de les variables","text":"<ul> <li>El tipus de la variable es decideix en funci\u00f3 del context en qu\u00e8 s'utilitze.</li> <li>En assignar-li el valor 7, la variable \u00e9s de tipus \u201csencer\u201d </li> </ul> <pre><code>$la_meua_variable = 7;  // ara \u00e9s un n\u00famero\n$la_meua_variable = \"set\"; // ara \u00e9s cadena\n</code></pre> <p>Si li canviem el contingut passa a ser de tipus \u201ccadena\u201d</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#variable-no-inicialitzades","title":"Variable no inicialitzades","text":"<p>Si s'intenta utilitzar una variable abans d'assignar-li un valor, es genera un error de tipus E_NOTICE per\u00f2 no s'interromp l'execusi\u00f3 de l'script. L'eixida mostrar\u00e0 un av\u00eds cada volta que s'intente.</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#constants","title":"Constants","text":"<p>Per a definir variables utilitze define(), que reb el nom de la constant i el valor que li volem donar</p> <pre><code>define(\"LIMITE\",1000);\n</code></pre> <p>\u00c9s habitual i una bona pr\u00e0ctica, utilitzar identificadors en majuscules per a les constants.</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#tipus-de-dades-en-php","title":"Tipus de dades en PHP","text":"<ul> <li>boole\u00e0 (boolean). Els seus possibles valors s\u00f3n true i false. A m\u00e9s, qualsevol nombre enter es considera com true, excepte el 0 que \u00e9s false.</li> <li>sencer (integer). Qualsevol nombre sense decimals. Es poden representar en format decimal, octal (comen\u00e7ant per un 0), o hexadecimal (comen\u00e7ant per 0x).</li> <li>real (float). Qualsevol nombre amb decimals. Es poden representar tamb\u00e9 en notaci\u00f3 cient\u00edfica.</li> <li>cadena (string). Conjunts de car\u00e0cters delimitats per cometes simples o dobles.</li> <li>vector (array). Conjunt de variables del mateix tipus ordenades.</li> <li>Objecte (object). Utilitzat per les inst\u00e0ncies de classes.</li> <li>null. \u00c9s un tipus de dades especial, que s'usa per a indicar que la variable no t\u00e9 valor.</li> </ul>"},{"location":"2.Caracteristicas_llenguatge_php.html#ambit-de-les-variables","title":"\u00c0mbit de les variables","text":"<p>L'\u00e0mbit d'una variable \u00e9s la part del codi en que \u00e9s visible. Una variable declarada en un fitxer de PHP est\u00e0 disponible en eixe fitxer i en els que l'incloguen. Les funcions definixen un \u00e0mbit local, separat de la resta del codi. Es poden definir variables globlals amb la paraula reservada global, encara que no s\u00f3n aconsellables.</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#variables-predefinides","title":"Variables predefinides","text":"<p>S\u00f3n variables internes i globals predefinides de PHP que poden usar-se des de qualsevol \u00e0mbit. Tomem forma d'arrays associatius que contenen un conjunt de valors.</p> <ul> <li>$_SERVER. Cont\u00e9 informaci\u00f3 sobre l'entorn del servidor web i d'execuci\u00f3.</li> <li>$_GET, $_POST i $_COOKIE contenen les variables que s'han passat al script actual utilitzant, respectivament, els m\u00e8todes GET (par\u00e0metres en la URL), HTTP POST i Cookies HTTP </li> <li>$_REQUEST junta en un solament el contingut dels tres *arrays anteriors, $_GET, $_POST i $_COOKIE. </li> <li>$_ENV cont\u00e9 les variables que es puguen haver passat a PHP des de l'entorn en qu\u00e8 s'executa. </li> <li>$_FILES cont\u00e9 els fitxers que es puguen haver pujat al servidor utilitzant el m\u00e8tode POST. </li> <li>$_SESSION cont\u00e9 les variables de sessi\u00f3 disponibles per al gui\u00f3 actual.</li> </ul> <p>http://es.php.net/manual/es/language.variables.superglobals.php</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#expansio-de-variables","title":"Expansi\u00f3 de variables","text":"<ul> <li>Podem introduir una variable dins d'un text sempre que usem les cometes dobles per a delimitar el text. A\u00e7\u00f2 far\u00e0 que el contingut de la variable s'expandisca i es concatene amb el text existent en la cadena.</li> </ul> <pre><code>echo \"&lt;p&gt;M\u00f2dul: $module&lt;/p&gt;\"\n</code></pre> <ul> <li>A voltes, \u00e9s necessari envoltar-la entre claus</li> </ul> <pre><code>echo \"&lt;p&gt;M\u00f2dul: {$module}DAW&lt;/p&gt;\"\n</code></pre> <ul> <li>Si no pos\u00e0rem les claus l'int\u00e8rpret cercaria una variable que es cride $moduleDAW</li> </ul>"},{"location":"2.Caracteristicas_llenguatge_php.html#separar-la-logica-de-la-presentacio","title":"Separar la l\u00f2gica de la presentaci\u00f3","text":"<p>Video</p> <p>Quan estem programant, sempre hem de fer que cada fitxer, classe, funci\u00f3 ... s'encarregue d'una sola cosa. La m\u00e9s clara \u00e9s separem la l\u00f2gica del programa (en el nostre cas en php) de la presentaci\u00f3 a l'usuari (majoritariament amb codi html).  Per a poder separar estes dos funcions en calen sent\u00e8ncies per incloure fixers.</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#sentencies-per-a-incloure-fitxers","title":"Sent\u00e8ncies per a incloure Fitxers","text":"<p>Les sent\u00e8ncies include() i include_once() i require() i require_once() inclouen i avaluen l'artxiu especificat. include_once() i require_once()  verifica que l'arxiu no haja sigut incl\u00f2s abans i \u00e9s preferible a include. Cal ser cur\u00f2s amb el path de l'arxiu a incloure. La difer\u00e8ncia entre require i include \u00e9s el tractament de l'error quan el fitxer no existeix.</p> <pre><code>fruites.php\n&lt;?php\n\n$color = 'verde';\n$fruta = 'manzana';\ninclude('fruite.view.php')\n\n?&gt;\n</code></pre> <pre><code>fruites.view.php\n\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Fruites&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h3&gt;\n        &lt;?= \"Una $fruta $color\" ?&gt; \n    &lt;/h3&gt;       \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"2.Caracteristicas_llenguatge_php.html#arrays","title":"Arrays","text":"<p>Video</p> <p>Un array \u00e9s un tipus de dades que ens permet emmagatzemar diversos valors.Per tal d'accedir a un valor utilitzarem una clau. Les claus poden ser nombres o textos (arrays associatius).Si no indiquem cap clau, a cada element se li associar\u00e0 una clau num\u00e8rica correlativa.</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#crear-array","title":"Crear array","text":"<ul> <li>Podem crear un array buit de dues formes:</li> </ul> <pre><code>$noms = array();\n$noms = [];\n</code></pre> <ul> <li>Si volem assignar valors al array en el moment de crear-ho: </li> </ul> <pre><code>$noms = array('Sandra', 'Pedro', 'Andrea'); \n$noms = ['Sandra', 'Pedro', 'Andrea'];\n</code></pre>"},{"location":"2.Caracteristicas_llenguatge_php.html#mostrar-el-contingut-dun-array","title":"Mostrar el contingut d'un array","text":"<p>Si intentem mostrar el contingut d'un array amb echo no obtindrem  les dades que hi ha dins del array. En lloc d'a\u00e7\u00f2 podem utilitzar la funci\u00f3 print_r: </p> <pre><code>print_r($noms);\n</code></pre> <p>Per\u00f2 si necessitem donar-li format als continguts del array, haurem de rec\u00f3rrer-ho amb un bucle i anar mostrant element a element.</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#afegint-elements-al-array","title":"Afegint elements al array","text":"<p>Podem afegir elements al array utilitzant claud\u00e0tors buits. La clau d'aquests elements ser\u00e0 el seg\u00fcent \u00edndex num\u00e8ric disponible.</p> <pre><code>$noms[] = 'Raul'; $noms[] = 'Marta';\n</code></pre>"},{"location":"2.Caracteristicas_llenguatge_php.html#accedir-als-elements-del-array","title":"Accedir als elements del array","text":"<p>Accedirem als elements del array indicant la clau de l'element entre claud\u00e0tors:</p> <pre><code>echo $noms[2];\n</code></pre> <p>Tamb\u00e9 podem modificar el seu valor:</p> <pre><code>$noms[0] = 'Sara';\n</code></pre>"},{"location":"2.Caracteristicas_llenguatge_php.html#recorrer-arrays","title":"Rec\u00f3rrer arrays","text":""},{"location":"2.Caracteristicas_llenguatge_php.html#arrays-associatius","title":"Arrays associatius","text":"<p>Video</p> <p>Si el array cont\u00e9 dades diverses i/o ens interessa accedir a ells amb claus m\u00e9s espec\u00edfiques que un simple \u00edndex num\u00e8ric podem utilitzar arrays associatius: </p> <pre><code>$alumne  = array('nom' =&gt; 'Sara', 'cognom' =&gt; 'Garc\u00eda', 'edat' =&gt; 22 );\n$alumne = ['nom' =&gt; 'Sara', 'cognom' =&gt; 'Garc\u00eda', 'edat' =&gt; 22 ];\n$alumne['nom'] = 'Ver\u00f3nica';\necho $alumne['nom'];\n</code></pre>"},{"location":"2.Caracteristicas_llenguatge_php.html#recorrer-arrays-associatius","title":"Rec\u00f3rrer arrays associatius","text":""},{"location":"2.Caracteristicas_llenguatge_php.html#recorrer-claus-i-valors","title":"Rec\u00f3rrer claus i valors","text":""},{"location":"2.Caracteristicas_llenguatge_php.html#arrays-multidimensionals","title":"Arrays multidimensionals","text":"<p>Imagina que volem tenir un array els elements del qual s\u00f3n noms d'esports. Volem dividir-los en esports d'hivern i esports d'estiu. Podem crear un array esports que continga dos elements que al seu torn tamb\u00e9 seran arrays.</p> <pre><code>$esports = ['hivern' =&gt; ['esqu\u00ed de fons', 'hoquei sobre gel'], 'estiu' =&gt; [ 'nataci\u00f3', 'voley platja'] ];\n</code></pre> <p>Per a accedir al primer esport d'hivern:</p> <pre><code>echo $esports['hivern'][0];\n</code></pre>"},{"location":"2.Caracteristicas_llenguatge_php.html#funcions-darrays","title":"Funcions d'arrays","text":"<ul> <li>Podem consultar-les en http://es.php.net/manual/es/ref.array.php</li> </ul>"},{"location":"2.Caracteristicas_llenguatge_php.html#cadenes-de-text","title":"Cadenes de text","text":"<p>Video</p> <ul> <li>Podem utilitzar tant cometes simples com a cometes dobles.</li> <li>Per a concatenar cadenes utilitzarem l'operador punt (.)</li> </ul> <pre><code> $fullName = $name.' '.$surnames;\n</code></pre>"},{"location":"2.Caracteristicas_llenguatge_php.html#funcions-de-cadenes","title":"Funcions de cadenes","text":"<p>Pots consultar-les en http://es.php.net/manual/es/ref.strings.php (no t\u00e9 sentit enumerar-les una a una)</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#operadors","title":"Operadors","text":""},{"location":"2.Caracteristicas_llenguatge_php.html#operadors-aritmetics","title":"Operadors Aritm\u00e8tics","text":""},{"location":"2.Caracteristicas_llenguatge_php.html#operadors-de-cadena","title":"Operadors de Cadena","text":"<p>El . concatena dos cadenes</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#operadors-dasignacio","title":"Operadors d'asignaci\u00f3","text":"<p>El = s'utilitza per asignar un valor a una variable. Tamb\u00e9 es poden combinar amb els operadors aritm\u00e8tics com l'exemple</p> <p>$a += $b equival a $a = $a + $b</p> <p>$a -= $b equival a $a = $a - $b</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#operadors-de-comparacio","title":"Operadors de comparaci\u00f3","text":""},{"location":"2.Caracteristicas_llenguatge_php.html#operadors-logics","title":"Operadors l\u00f2gics","text":""},{"location":"2.Caracteristicas_llenguatge_php.html#operador-ternari","title":"Operador ternari","text":"<p>Funciona com un condicional condici\u00f3 ? valor si true : valor si false i que es pot simplificar ** condici\u00f3  </p> <p>https://www.php.net/manual/es/language.operators.php</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#estructures-de-control-de-flux","title":"Estructures de control de flux","text":"<ul> <li>Les instruccions de control de flux en PHP funcionen exactament igual que en altres llenguatges de programaci\u00f3. Video</li> <li> <p>Les m\u00e9s habituals s\u00f3n:</p> </li> <li> <p>Condicionals: if, if else, switch </p> </li> <li>Bucles: while, do while, for</li> </ul> <p>seguint les estructures:</p> <p><pre><code>if (condici\u00f3) {\n    // instruccions\n}\nelse {\n    // instruccions\n}\n</code></pre> <pre><code>switch ($variable) {\n    case valor:\n        //instruccio1\n        break;\n    case valor:\n        //instruccio1\n        break;\n    default:\n        //instruccio1\n}           \n</code></pre> <pre><code>while (condici\u00f3) {\n    //instruccions\n}\n</code></pre> <pre><code>do {\n    //instruccions\n} while (condici\u00f3);\n</code></pre> <pre><code>for ($i=1;$i&lt;10;$i++){\n    //instruccions\n}\n</code></pre></p> <p>http://php.net/manual/es/language.control-structures.php</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#funcions-i-llibreries","title":"Funcions i llibreries","text":""},{"location":"2.Caracteristicas_llenguatge_php.html#funcions-predefinides","title":"Funcions predefinides","text":"<ul> <li>is_null($var) determina si una variable \u00e9s nula o no.</li> <li>isset($var) determina si una variable estan definida i no \u00e9s NULL.</li> <li>unset($var) destrueix les variables especificades.</li> <li>empty($var) torna true si no existeix o \u00e9s FALSE</li> <li>is_int($var), is_float(), is_bool(), is_array()</li> <li>var_dump($var) mostra informaci\u00f3 de la variable.</li> </ul>"},{"location":"2.Caracteristicas_llenguatge_php.html#funcions-definides-per-lusuari","title":"Funcions definides per l'usuari","text":"<p>Video</p> <p>Per a crear les teues pr\u00f2pies funcions, haur\u00e0s d'usar la paraula function:</p> <pre><code>function suma($a, $b){ return $a + $b; }\n</code></pre> <p>Per tal d'invocar la funci\u00f3:</p> <pre><code>$resultat = suma(5, 7);\n</code></pre> <p>Si una funci\u00f3 no t\u00e9 una sent\u00e8ncia return, retorna null en finalitzar.</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#valors-per-defecte-en-els-parametres","title":"Valors per defecte en els par\u00e0metres","text":"<ul> <li>Podem indicar valors per defecte per als par\u00e0metres. Si quan cridem a la funci\u00f3 no indiquem el valor d'un par\u00e0metre es prendr\u00e0 el valor per defecte indicat.</li> </ul> <pre><code>function preuAmbIva($preu, $iva=0.21){\n    return $preu * (1 + $iva);\n}\n$preu = 10;\n$pIva = preuAmbIva($preu);\n</code></pre> <ul> <li>Pot haver-hi m\u00e9s d'un par\u00e0metre amb valor per defecte, per\u00f2 sempre han d'estar al final.</li> </ul>"},{"location":"2.Caracteristicas_llenguatge_php.html#pas-de-parametres-per-referencia","title":"Pas de par\u00e0metres per refer\u00e8ncia","text":"<p>Per defecte els par\u00e0metres es passen per valor. Per a passar un par\u00e0metre per refer\u00e8ncia afegirem el s\u00edmbol &amp; davant del seu nom.</p> <pre><code>function preuAmbIva(&amp;$preu, $iva=0.18){\n    $preu *= (1 + $iva);\n}\n</code></pre>"},{"location":"2.Caracteristicas_llenguatge_php.html#declaracions-de-tipus-type-hinting","title":"Declaracions de tipus (Type Hinting)","text":"<p>Les funcions obliguen al fet que els par\u00e0metres siguen de cert tipus. Si el valor donat \u00e9s d'un tipus incorrecte, es generar\u00e0 un error. Per aix\u00f2 s'ha d'anteposar-se el nom del tipus al nom del par\u00e0metre. Es pot fer que una declaraci\u00f3 accepte valors NULL si el valor predeterminat del par\u00e0metre s'estableix a NULL.</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#tipus-valids","title":"Tipus v\u00e0lids","text":""},{"location":"2.Caracteristicas_llenguatge_php.html#exemple","title":"Exemple","text":"<pre><code>function suma(int a, int b):int\n{\n    return $a + $b;\n}\n$resultado = suma(3,5);\n</code></pre>"},{"location":"2.Caracteristicas_llenguatge_php.html#funcions-com-a-parametres","title":"Funcions com a par\u00e0metres","text":"<p>En PHP \u00e9s possible passar funcions com a par\u00e0metres a altres funcions. Nom\u00e9s cal passar el nom de la funci\u00f3 entre cometes.  Exemple:</p> <pre><code> function calculator($operation,$numA,$numB){\n    return $operation($numA,$numB); }\nfunction sumar($a,$b) { return $a+$b; }\nfunction restar($a,$b) {return $a-$b; }\n\n$a=4;$b=6;\necho calculator('sumar',$a,$b);\necho calculator('restar',$a,$b);\n</code></pre>"},{"location":"2.Caracteristicas_llenguatge_php.html#funcions-anonimes-closures","title":"Funcions an\u00f2nimes (closures)","text":"<ul> <li>Estan implementades usant la classe Closure</li> <li>Permeten la creaci\u00f3 de funcions que no tenen un nom espec\u00edfic</li> <li>Podem assignar la funci\u00f3 a una variable o passar-la com a par\u00e0metre a una altra funci\u00f3. \f* Exemple</li> </ul> <p>Sense par\u00e0metres:</p> <pre><code>$anonima = function () {\necho \"Hola\"; \n}; \n$anonima();\n</code></pre> <p>Amb par\u00e0metres:</p> <pre><code>$anonima = function ($nom) {\necho \"Hola {$nom}\"; \n}; \n$anonima('\u00c1lex');\n</code></pre>"},{"location":"2.Caracteristicas_llenguatge_php.html#llibreries","title":"Llibreries","text":"<p>Podem fer llibreries de funcions guardant-les en un fitxer que despr\u00e8s importem des d'on les utilitzem. Ho podem fer amb include, o utilitzant composer per a fer-ho.</p>"},{"location":"2.Caracteristicas_llenguatge_php.html#formularis","title":"Formularis","text":""},{"location":"3.Formularis.html","title":"Formularis i fitxers","text":""},{"location":"3.Formularis.html#formularis","title":"Formularis","text":"<p>Video</p>"},{"location":"3.Formularis.html#pas-de-parametres","title":"Pas de par\u00e0metres","text":"<p>Una petici\u00f3 http \u00e9s la sol\u00b7licitud d'un recurs al servidor:   * Es realitzen a trav\u00e9s d'una url   * Es poden passar par\u00e0metres amb la petici\u00f3 * Hi ha diferents m\u00e8todes (METHOD) de realitzar una petici\u00f3 (GET, POST, PUT, DELETE, PATCH, etc.), encara que els m\u00e9s habituals s\u00f3n GET i POST</p>"},{"location":"3.Formularis.html#peticio-get","title":"Petici\u00f3 GET","text":"<ul> <li>S'utilitza per a sol\u00b7licitar dades d'un recurs</li> <li>Es Mostren els par\u00e0metres que s'envien en la url</li> <li>Es poden utilitzar directament en enlla\u00e7os</li> <li>Romanen en l'historial del navegador</li> <li>La grand\u00e0ria dels par\u00e0metres est\u00e0 limitat a 255 car\u00e0cters</li> </ul>"},{"location":"3.Formularis.html#accedir-a-les-dades-de-la-peticio-get","title":"Accedir a les dades de la petici\u00f3 GET","text":"<ul> <li>Usem la variable superglobal $_GET</li> <li>\u00c9s un array associatiu</li> <li>Les claus del array coincidiran amb els noms que li hem donat als par\u00e0metres.</li> <li>Per a accedir als par\u00e0metres de la petici\u00f3 anterior:</li> </ul> <pre><code>echo $_GET['nom'] . ' ' . $_GET['cognom'];\n</code></pre>"},{"location":"3.Formularis.html#evitar-el-csrf","title":"Evitar el CSRF","text":"<p>Video](https://youtu.be/qywV3Im17kk)</p> <p>En tota p\u00e0gina que reba par\u00e0metres GET has de comprovar el HTTP referer del navegador, i que aquest siga de dins de la teua web. En php el referer que envia el navegador s'emmagatzema en $_*SERVER['HTTP_REFERER']</p> <p>Seria tal com:</p> <pre><code>if( parse_url($_SERVER['HTTP_REFERER'], PHP_URL_HOST) != $_SERVER['HTTP_HOST']) die('Anti-CSRF'); \n</code></pre> <p>NOTA IMPORTANT Amb aquest codi estem obligant al fet que el navegador envie un referer si o s\u00ed. Per tant nom\u00e9s ha d'utilitzar-se en p\u00e0gines a les quals el navegador accedisca des d'una altra p\u00e0gina de la nostra web. \u00d2bviament no podem col\u00b7locar-ho en la primera p\u00e0gina a la qual s'accedeix a la nostra web (index.php o similar), ja que si l'usuari a escrit l'adre\u00e7a a m\u00e0 en la barra del navegador no s'enviar\u00e0 referer cap i saltar\u00e0 el sistema.</p>"},{"location":"3.Formularis.html#peticio-post","title":"Petici\u00f3 POST","text":"<ul> <li>S'utilitza per a enviar dades a un recurs</li> <li>Els par\u00e0metres van en el cos de la petici\u00f3, no s\u00f3n visibles per a l'usuari</li> <li>No es pot utilitzar en un enlla\u00e7</li> <li>No roman en l'historial</li> <li>Se solen utilitzar en els formularis</li> <li>No tenim la limitaci\u00f3 de grand\u00e0ria dels par\u00e0metres</li> </ul>"},{"location":"3.Formularis.html#accedir-a-les-dades-de-la-peticio-post","title":"Accedir a les dades de la petici\u00f3 POST","text":"<ul> <li>Usem la variable superglobal $_POST</li> <li>Funciona igual que $_GET.</li> <li>Mostrar totes les dades rebudes:</li> </ul> <pre><code>var_dump($_POST);\n</code></pre> <ul> <li>Mostrar les dades individualment:</li> </ul> <p><pre><code>echo $_POST['nom']; echo $_POST['cognom'];\n</code></pre> Al crear un formulari li assignem un metode (habitualment POST) i una destinaci\u00f3 (p\u00e0gina que tractar\u00e0 el formulari)</p> <pre><code>&lt;form method='POST' action='pagina.php'&gt;\n</code></pre>"},{"location":"3.Formularis.html#enviar-les-dades-al-mateix-script-que-mostra-el-formulari","title":"Enviar les dades al mateix script que mostra el formulari","text":"<p>\u00c9s habitual que la p\u00e0gina que tracta el formulari siga la mateixa que la que el cont\u00e9. Per poder fer-ho: </p> <ul> <li>La variable $_SERVER cont\u00e9 dades relacionades amb l'entorn del servidor de la petici\u00f3 HTTP</li> <li> <p>Una de les dades que cont\u00e9 \u00e9s el script php que s'est\u00e0 executant ($_SERVER['PHP_SELF']). Si indiquem el action del formulari aix\u00ed: action=\"\\&lt;?= $_SERVER['PHP_SELF']; ?&gt;\", ser\u00e0 la pr\u00f2pia p\u00e0gina del formulari la que processe les dades.</p> </li> <li> <p>Si \u00e9s aix\u00ed haurem de programar dos blocs:</p> <ul> <li>Un inicial de comprovaci\u00f3 que s'executa quan s'accedix pel m\u00e8tode POST,es a dir, a l'enviar el formulari. Si les dades s\u00f3n correctes es processar\u00e0 el formulari. En cas contrari es crea la variable $err i continua l'script.</li> <li>L'HTML, que s'executa quan s'accedix mitjan\u00e7ant GET (no ve del formulari) o despr\u00e9s d'executar el primer bloc, si aix\u00ed ho volem.</li> </ul> </li> </ul>"},{"location":"3.Formularis.html#verificar-que-el-formulari-sha-enviat","title":"Verificar que el formulari s'ha enviat","text":"<ul> <li>Abans de mostrar les dades verificarem que s'haja enviat el formulari:</li> </ul> <pre><code>&lt;?php\n/* si va bien redirige a principal.php si va mal, mensaje de error */\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {  \n        if($_POST['usuario'] === \"usuario\" and $_POST[\"clave\"] === \"1234\"){     header(\"Location: principal.php\");\n        }else{\n            $err = true;\n        }   \n    }\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Formulario de login&lt;/title&gt;      \n        &lt;meta charset = \"UTF-8\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;          \n        &lt;?php if(isset($err)){\n            echo \"&lt;p&gt; Revise usuario y contrase\u00f1a&lt;/p&gt;\";\n        }?&gt;\n        &lt;form action = \"&lt;?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]);?&gt;\" method = \"POST\"&gt;\n            &lt;label for = \"usuario\"&gt;Usuario&lt;/label&gt; \n            &lt;input value = \"&lt;?php if(isset($usuario))echo $usuario;?&gt;\"\n            id = \"usuario\" name = \"usuario\" type = \"text\"&gt;              \n\n            &lt;label for = \"clave\"&gt;Clave&lt;/label&gt; \n            &lt;input id = \"clave\" name = \"clave\" type = \"password\"&gt;           \n\n            &lt;input type = \"submit\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"3.Formularis.html#accedir-a-parametres-no-existents","title":"Accedir a par\u00e0metres no existents","text":""},{"location":"3.Formularis.html#validacio-del-formulari","title":"Validaci\u00f3 del formulari","text":"<p>Video</p> <ul> <li>Hem de comprovar que les dades del formulari s\u00f3n correctes</li> <li>Validacions a realitzar:</li> <li>Els camps requerits no han de quedar buits </li> <li>Els camps email i data han de tenir el format esperat </li> <li>Tots els camps s'han de filtrar.</li> </ul>"},{"location":"3.Formularis.html#valors-buits","title":"Valors buits","text":"<ul> <li>Els camps requerits no haurien de quedar-se buits.</li> <li>Per a verificar que un valor no queda buit podem utilitzar la funci\u00f3 empty() de PHP. http://php.net/manual/es/function.empty.php .</li> </ul>"},{"location":"3.Formularis.html#espais-en-blanc","title":"Espais en blanc","text":"<ul> <li>Hem d'eliminar els espais en blanc del principi i final dels camps</li> <li>S'utilitza la funci\u00f3 trim()</li> </ul>"},{"location":"3.Formularis.html#filtrar-lentrada","title":"Filtrar l'entrada","text":"<ul> <li>Sempre hem de filtrar l'entrada amb htmlspecialchars() abans de mostrar el camp amb echo o similar. Si mostrem l'entrada tal cual podem patir atacs XSS o d'injecci\u00f3.</li> </ul> <p>Video</p>"},{"location":"3.Formularis.html#comprovar-lemail","title":"Comprovar l'email","text":"<ul> <li>Per a verificar si un email \u00e9s correcte podem utilitzar la funci\u00f3 filter_var($email, FILTER_VALIDATE_EMAIL)) http://php.net/manual/es/function.filter-var.php</li> </ul>"},{"location":"3.Formularis.html#dates","title":"Dates","text":"<ul> <li>En PHP les dates s'emmagatzemen com a n\u00fameros.</li> <li>S'utilitza la classe DateTime per a representar-les</li> <li>Igual que ocorre amb les cadenes no t\u00e9 sentit estudiar les funcions relacionades una a una. Les pots consultar en: http://php.net/manual/es/ref.datetime.php</li> <li>Per a comprovar la data devem crear una funci\u00f3 a aquest efecte</li> <li>Podemos utilitzar el m\u00e8tode createFromFormat() de la classe DateTime http://php.net/manual/es/datetime.createfromformat.php</li> </ul>"},{"location":"3.Formularis.html#mostrar-els-errors-en-el-formulari","title":"Mostrar els errors en el formulari","text":"<p>Video</p> <p>El errors de validaci\u00f3 s'han de guardar en una variable per a mostrar-los a l'usuari junt al formulari per tal que torne a picar-los b\u00e9. Tamb\u00e9 he de guardar els valors anteriors per mostrar-los tamb\u00e9.</p> <p><pre><code>function isRequired($nomCamp,&amp;$errors){\n        if (!empty($_POST[$nomCamp])) {\n            return trim(htmlspecialchars($_POST[$nomCamp]));\n        }\n        else {\n            $errors[$nomCamp] = \"El $nomCamp \u00e9s requerit\";\n            return null;\n        }\n    }\n</code></pre> guarde en l'array errors el possible error.</p> <p><pre><code> function isValidClass($nomCamp,$errors){\n         if (!isset($errors)) {\n             return '';\n         }\n         if (isset($errors[$nomCamp])) {\n             return 'is-invalid';\n         }\n         return 'is-valid';\n     }\n\n     function showError($nomCamp,$errors){\n         if (!isset($errors)) {\n             return '';\n         }\n         if (isset($errors[$nomCamp])) {\n             return \"&lt;div class='invalid-feedback'&gt;$errors[$nomCamp]&lt;/div&gt;\";\n         }\n         return \"&lt;div class='valid-feedback'&gt;All correct&lt;/div&gt;\";\n     }\n</code></pre> funcions per a retornar el html necesari per a pintar els errors en bootsrap</p> <p><pre><code>    extract($_POST,EXTR_PREFIX_SAME,'old');\n</code></pre> genere variables old_nomdeCamp per als valors anterior</p> <p><pre><code>&lt;div class=\"form-group\"&gt;\n    &lt;label for=\"assigned_to\"&gt;Assignada a:&lt;/label&gt;\n    &lt;input name=\"assigned_to\" type=\"text\" class=\"form-control &lt;?= isValidClass('assigned_to',$errors) ?&gt;\" id=\"assigned-to\" aria-describedby=\"assignedHelp\" placeholder=\"Enter person assigned to\" value=\"&lt;?= $old_assigned_to??'' ?&gt;\"&gt;\n    &lt;small id=\"assignedHelp\" class=\"form-text text-muted\"&gt;Task's assigned to.&lt;/small&gt;\n    &lt;?= showError('assigned_to',$errors) ?&gt;\n&lt;/div&gt;\n</code></pre> mostre els errors utilitzant les funcions anterior i el camp old_title</p>"},{"location":"3.Formularis.html#pujada-de-fitxers","title":"Pujada de fitxers","text":"<p>Video</p> <p>Es un cas especial. En primer lloc en el formulari cal utilitzar l'atribut enctype=\"multipart/form-data\" i el metode POST. Per al fitxer s'utilitza una etiqueta \\.</p> <p>```php</p>                  Escoja un fichero              <p>```</p> <p>En l'script que reb el fitxer la variable global $_FILES cont\u00e9 la informaci\u00f3 sobre el fitxer en un array bidimensional.</p>"},{"location":"3.Formularis.html#elements-del-array-del-fitxer-pujat","title":"Elements del array del fitxer pujat","text":"<ul> <li>$_FILES['imatge']['tmp_name']: lloc i nom de l'arxiu temporal en el servidor.</li> <li>$_FILES['imatge']['name']: Nom original del fitxer en la m\u00e0quina client.</li> <li>$_FILES['imatge'][size']: Grand\u00e0ria en bytes del fitxer pujat.</li> <li>$_FILES['imatge'][type']: Tipus MIME associat al fitxer. Per exemple, \"image/gif\" o \"text/plain\".</li> <li>$_FILES['imatge'][error']: Codi d'error associat al fitxer pujat.  </li> </ul> <pre><code>&lt;?php\n    $tam = $_FILES[\"fichero\"][\"size\"];\n    if($tam &gt; 256 *1024){\n        echo \"&lt;br&gt;Demasiado grande\";\n        return;\n    }\n    echo \"Nombre del fichero: \" . $_FILES[\"fichero\"][\"name\"];\n    echo \"&lt;br&gt;Nombre temporal del fichero en sel servidor: \" . $_FILES[\"fichero\"][\"tmp_name\"];  \n    $res = move_uploaded_file($_FILES[\"fichero\"][\"tmp_name\"],\"subidos/\" . $_FILES[\"fichero\"][\"name\"]);\n    if($res){\n        echo \"&lt;br&gt;Fichero guardado\";\n    } else {\n        echo \"&lt;br&gt;Error\";\n    }\n ```\n[![](../img/ull.png)Video](https://youtu.be/vlYrDiFV0Jg) \n\n#### Grand\u00e0ria del fitxer a pujar\n* Podemos fixar el l\u00edmit de grand\u00e0ria en el fitxer php.ini\n    * http://php.net/manual/es/ini.core.php#ini.upload-max-filesize\n* Tamb\u00e9 podem fixar el l\u00edmit en el propi formulari\n* A trav\u00e9s d'un camp ocult (type=\"hidden\") denominat **MAX_FILE_SIZE**.\n\n ```php\n&lt;input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"1000000\"&gt;\n ```\n\n#### Ruta temporal del fitxer pujat\n* En carregar un arxiu, es guardar\u00e0 en una ubicaci\u00f3 temporal indicada per l'opci\u00f3 upload_tmp_dir en el php.ini.\n    * http://php.net/manual/es/ini.core.php#ini.upload-tmp-dir\n* Si no movem l'arxiu o ho canviem de nom, quan acabe l'execuci\u00f3 del script, este ser\u00e0 eliminat.\n\n\n#### Problemes m\u00e9s habituals\n* Especificar en upload\\_tmp\\_dir un directori al com no es t\u00e9 acc\u00e9s\n* La directiva memory\\_limit t\u00e9 un valor molt baix o inferior a upload_max_filesize\n* La directiva max\\_execution\\_time t\u00e9 un valor baix i el script ho excedeix durant la pujada del fitxer\n* La directiva post\\_max\\_size t\u00e9 un valor baix i el teu fitxer ho excedeix. El seu valor ha de ser major a upload\\_max\\_filesize\n\n##### Codis d'error\n* El primer que caldr\u00e0 fer \u00e9s comprovar el codi d'error del fitxer pujat **($_FILES['imatge'][error'])**\n* Si \u00e9s diferent de **UPLOAD_ERR_OK** hi ha hagut algun problema\n* Veure els codis d'error:\n    * http://php.net/manual/es/features.file-upload.errors.php\n\n##### Comprovaci\u00f3 del tipus de fitxer\n* A continuaci\u00f3 comprovarem que el tipus myme est\u00e0 dins dels esperats:\n\n```php\nif ($_FILES['imatge']['type'] !== 'image/gif') {\n    echo 'Error: No es tracta d'un fitxer .GIF.'; \n    exit; \n }\n</code></pre>"},{"location":"3.Formularis.html#evitar-atacs","title":"Evitar atacs","text":"<ul> <li>Ataque com\u00fa:<ul> <li>http://seclists.org/bugtraq/2000/sep/55</li> </ul> </li> <li>Per a evitar aquest tipus d'atacs es va incloure la funci\u00f3:<ul> <li>bool is_uploaded_file ( string nom_arxiu )</li> </ul> </li> <li>Retorna true si l'arxiu donat va ser carregat a trav\u00e9s d'HTTP POST</li> <li>Li passarem el par\u00e0metre $_FILES['imatge']['tmp_name']</li> </ul>"},{"location":"3.Formularis.html#moure-larxiu-pujat","title":"Moure l'arxiu pujat","text":"<ul> <li>Per a moure l'arxiu temporal a la seua ubicaci\u00f3 correcta usem la funci\u00f3<ul> <li>bool move_uploaded_file(string nom_arxiu, string destinaci\u00f3)</li> </ul> </li> <li>Aquesta funci\u00f3 s'assegura que l'arxiu siga un arxiu carregat v\u00e0lid.</li> <li>Si existeix un arxiu destine amb el mateix nom, est ser\u00e0 sobreescrit.</li> </ul>"},{"location":"3.Formularis.html#evitar-sobrescritures","title":"Evitar sobrescritures","text":"<ul> <li>Abans de moure l'arxiu pujat \u00e9s convenient comprovar que no existeix un arxiu amb el mateix nom<ul> <li>bool is_file(string nom_arxiu) </li> <li>Li passarem $_FILES['imatge']['name']</li> </ul> </li> <li>En cas que existisca caldr\u00e0 canviar el nom, per exemple afegint una marca de temps com a prefix</li> </ul>"},{"location":"3.Formularis.html#fitxers","title":"Fitxers","text":""},{"location":"3.Formularis.html#obrir-un-arxiu","title":"Obrir un arxiu","text":"<p>Els arxius en PHP s'obrin amb la funci\u00f3 fopen(), que requereix dos par\u00e0metres: l'arxiu que es vol obrir i la manera en qu\u00e8 obrir l'arxiu. La funci\u00f3 retorna un punter en l'arxiu si \u00e9s satisfact\u00f2ria o zero si no ho \u00e9s. Els arxius s'obrin per a realitzar operacions de lectura o escriptura.</p> <pre><code>$fp = fopen(\"miarchivo.txt\", \"r\");\n</code></pre> <p>Si no \u00e9s possible obrir l'arxiu, retorna zero, per aix\u00f2 \u00e9s freq\u00fcent utilitzar aquesta funci\u00f3 en una condici\u00f3:</p> <p><pre><code>if (!$fp = fopen(\"miarchivo.txt\", \"r\")){\n    echo \"No se ha podido abrir el archivo\";\n}\n</code></pre> Es pot obrir un arxiu per\u00f2 tamb\u00e9 una URL externa, ja que fopen() realment el que fa \u00e9s crear una connexi\u00f3, per aix\u00f2 cal tancar-la posteriorment.</p> <p><pre><code>$fp = fopen(\"http://localhost:8000\", \"r\");\n</code></pre> Les maneres d'acc\u00e9s existents per a fopen \u00e9s poden trobrar a la documentaci\u00f3 oficial.</p>"},{"location":"3.Formularis.html#llegir-un-arxiu","title":"Llegir un arxiu","text":"<p>Una vegada obert l'arxiu, el llegirem i guardar els seus continguts en una variable amb fread():</p> <p><pre><code>$file = \"miarchivo.txt\";\n$fp = fopen($file, \"r\");\n$contents = fread($fp, filesize($file));\n</code></pre> La variable contents guardar\u00e0 el contingut que obtinguem amb la funci\u00f3 fread(). Aquesta funci\u00f3 requereix dos par\u00e0metres, l'arxiu obert i la longitud que volem llegir d'aquest arxiu (en bytes). En aquest cas hem emprat la funci\u00f3 filesize() per a obtindre la grand\u00e0ria de l'arxiu i aix\u00ed retornar tot el seu contingut.</p>"},{"location":"3.Formularis.html#tancar-un-arxiu","title":"Tancar un arxiu","text":"<p>Finalment, tancarem l'arxiu (no \u00e9s obligatori per\u00f2 es recomana):</p> <pre><code>fclose($fp);\n</code></pre>"},{"location":"3.Formularis.html#escriure-en-un-arxiu","title":"Escriure en un arxiu","text":"<p>Igual que per a llegir un arxiu, hi ha m\u00e9s d'una manera d'escriure en un. La forma m\u00e9s b\u00e0sica \u00e9s utilitzar la funci\u00f3 fwrite() (o fputs(), que \u00e9s el seu \u00e0lies):</p> <p><pre><code>$file = \"miarchivo.txt\";\n$texto = \"Hola que tal\";\n$fp = fopen($file, \"w\");\nfwrite($fp, $texto);\nfclose($fp);\n</code></pre> Aquesta vegada hem emprat la manera w, que permet escriure sobreescrivint l'arxiu.</p> <p>Podem limitar la longitud de dades que volem escriure (totes les dades que hi havia en l'arxiu s'esborraran per complet igualment):</p> <pre><code>$file = \"miarchivo.txt\";\n$texto = \"Hola que tal\";\n$fp = fopen($file, \"w\");\nfwrite($fp, $texto, 4); // Escribir\u00e1 s\u00f3lo: Hola\n</code></pre> <p>Si l'arxiu ^miarchivo.txt^^ no existeix, es crear\u00e0 autom\u00e0ticament amb la manera w de la funci\u00f3 fopen*.</p>"},{"location":"3.Formularis.html#punter-darxiu","title":"Punter d'arxiu","text":"<p>Un punter d'arxiu (file pointer o handle) \u00e9s una variable que fa refer\u00e8ncia a un arxiu. \u00c9s una variable que apunta a un arxiu en concret, i normalment s'obt\u00e9 quan s'obri amb fopen().</p> <p>PHP i la seua recol\u00b7lecci\u00f3 de fems tanca tots els punters d'arxius al final de l'execuci\u00f3 del script, encara que es considera una bona pr\u00e0ctica tancar els arxius manualment amb fclose().</p> <p>A m\u00e9s d'apuntar a un arxiu, apunta a una posici\u00f3 concreta en aqueix arxiu. En la majoria dels casos quan s'obri un arxiu el punter apunta al principi (posici\u00f3 0) o al final de l'arxiu.</p> <p>La funci\u00f3 feof() \u00e9s utilitzada amb freq\u00fc\u00e8ncia en el maneig d'arxius en PHP. Aquesta funci\u00f3 comprova si el punter es troba al final de l'arxiu. S'utilitza quan es recorre un arxiu l\u00ednia per l\u00ednia o per a la lectura de grans arxius, mitjan\u00e7ant un condicional:</p> <p><pre><code>$archivo = \"miarchivo.txt\";\n// Abrimos el archivo\n$fp = fopen($archivo, \"r\");\n// Loop que parar\u00e1 al final del archivo, cuando feof sea true:\nwhile(!feof($fp)){\n    echo fread($fp, 4092);\n}\n</code></pre> El codi anterior nom\u00e9s carregar\u00e0 4kb de dades de vegada, la qual cosa redueix l'\u00fas de mem\u00f2ria per a grans arxius.</p>"},{"location":"3.Formularis.html#obtindre-informacio-dun-arxiu","title":"Obtindre informaci\u00f3 d'un arxiu","text":"<p>Es pot obtindre informaci\u00f3 d'un arxiu a m\u00e9s del seu contingut: grand\u00e0ria, \u00faltima vegada que s'ha accedit o modificat, nombre de links, etc. La funci\u00f3 principal per a obtindre aquesta informaci\u00f3 \u00e9s amb la funci\u00f3 stat(), en aquesta taula es poden veure els 12 elements que retorna el array.</p> <pre><code>$file = \"miarchivo.txt\";\n$texto = \"Todos somos muy ignorantes, lo que ocurre es que no todos ignoramos las mismas cosas.\";\n\n$fp = fopen($file, \"w\");\nfwrite($fp, $texto);\n\n$datos = stat($file);\n\necho $datos[3] . \"&lt;br&gt;\"; // N\u00famero de enlaces, 1\necho $datos[7] . \"&lt;br&gt;\"; // Tama\u00f1o en bytes, 85\necho $datos[8] . \"&lt;br&gt;\"; // Momento de \u00faltimo acceso, 1444138104\necho $datos[9] . \"&lt;br&gt;\"; // Momento de \u00faltima modificaci\u00f3n, 1444138251\n</code></pre>"},{"location":"3.Formularis.html#funcions-de-directoris","title":"Funcions de directoris","text":"<p>Les funcions de directoris v\u00e9nen de l'extensi\u00f3 directories de PHP. Hi ha un total de 9 funcions disponibles que podeu consultar en la documentaci\u00f3</p>"},{"location":"4.Classes_i_objectes_amb_PHP.html","title":"Classes i objectes en PHP","text":""},{"location":"4.Classes_i_objectes_amb_PHP.html#introduccio","title":"Introducci\u00f3","text":"<ul> <li>Amb PHP podem utilitzar dos estils de programaci\u00f3: estructurada i orientada a objectes.</li> </ul> <p>Exemple connexi\u00f3 BBDD amb mysqli: </p> <p>// utilitzant programaci\u00f3 estructurada</p> <pre><code>    $dwes = mysqli_connect(...);\n</code></pre> <p>// utilitzant POO</p> <pre><code>    $dwes = new mysqli();\n    $dwes-&gt;connect(...)\n</code></pre>"},{"location":"4.Classes_i_objectes_amb_PHP.html#classes-en-php","title":"Classes en PHP","text":"<ul> <li>Similar a altres llenguatges com Java o C#</li> <li>Representen quelcom real.</li> <li>Es declaren amb la paraula reservada class</li> <li>Entre claus es declaren els atributs i m\u00e8todes, que poden ser privats, p\u00fablics o protegits</li> <li>Per defecte s\u00f3n p\u00fablics</li> </ul> <pre><code>class cotxe {\n    protected $matricula;\n    protected $marca;\n\n    public function ultimo_viaje(){\n    }\n}\n</code></pre>"},{"location":"4.Classes_i_objectes_amb_PHP.html#bones-practiques-encara-que-no-obligatories","title":"Bones pr\u00e0ctiques (encara que no obligat\u00f2ries)","text":"<ul> <li>El nom de la classe sempre comen\u00e7ar\u00e0 per maj\u00fascules</li> <li>Sempre definirem cada classe en un fitxer que cridarem NombreClase.php</li> <li>Els atributs sempre seran privats o protegits (crearem getters i setters per a accedir a ells)</li> </ul>"},{"location":"4.Classes_i_objectes_amb_PHP.html#objectes","title":"Objectes","text":""},{"location":"4.Classes_i_objectes_amb_PHP.html#accedir-als-seus-atributs-i-metodes","title":"Accedir als seus atributs i m\u00e8todes","text":"<ul> <li>Igual que en altres llenguatges usem new per a instanciar objectes:</li> <li>Per a accedir des d'un objecte als seus atributs o m\u00e8todes, utilitzem l'operador fletxa (-&gt;):</li> <li>Haurem d'importar el fitxer que compte la classe.</li> </ul> <pre><code>$p = new Producte;\n$p-&gt;nom = 'Samsung Galaxy S';\n$p-&gt;mostra();\n</code></pre>"},{"location":"4.Classes_i_objectes_amb_PHP.html#lobjecte-this","title":"L'objecte $this","text":"<ul> <li>Quan des d'un objecte s'invoca un m\u00e8tode de la classe, a aquest se li passa sempre una refer\u00e8ncia a l'objecte que l'ha cridat.</li> <li>Aquesta refer\u00e8ncia s'emmagatzema en la variable $this</li> </ul> <pre><code>print \"\\&lt;p&gt;\" . $this-&gt;codigo . \"\\&lt;/p&gt;\";\n</code></pre>"},{"location":"4.Classes_i_objectes_amb_PHP.html#constructor","title":"Constructor","text":"<ul> <li>void __construct ([ mixed $args = \"\" [, $... ]] )</li> <li>Nom\u00e9s pot haver-hi un i es dir\u00e0 __construct</li> <li>Ser\u00e0 invocada autom\u00e0ticament en fer new</li> <li>\u00c9s ideal per a inicialitzar les dades de l'objecte abans d'usar-ho</li> </ul>"},{"location":"4.Classes_i_objectes_amb_PHP.html#metodes-magics","title":"M\u00e8todes m\u00e0gics","text":"<p>Video</p> <ul> <li>M\u00e8todes predefinits que s\u00f3n cridats autom\u00e0ticament en determinades circumst\u00e0ncies.</li> <li>Els noms dels m\u00e8todes __construct(),__destruct(), __call(), __callStatic(), __get(), __set(),__isset(), __unset(), __sleep(), __wakeup(),__toString(), __invoke(), __set_state(), __clone() i __debugInfo() s\u00f3n m\u00e0gics en les classes PHP</li> </ul> <p>M\u00e8todes m\u00e0gics</p>"},{"location":"4.Classes_i_objectes_amb_PHP.html#public-string-__tostring-void-string__invoke","title":"public string __toString( void ):string,__invoke()","text":"<ul> <li>Permet a una classe decidir com comportar-se quan se li tracta com un string o com a una funci\u00f3.</li> <li>Per exemple, <ul> <li>Quan faig echo $obj; s'executaria el m\u00e8tode __toString() que hauria de retornar un string.</li> <li>Quan faig **echo $obj() s'executaria el m\u00e8tode __invoke().</li> </ul> </li> </ul>"},{"location":"4.Classes_i_objectes_amb_PHP.html#__get__set__unset__isset","title":"__get(),__set(),__unset(),__isset()","text":"<ul> <li>S'invoquen quan s'intenta accedir a una propietat no definida. S\u00f3n mult \u00fatils quan tractem amb bases de dades. </li> </ul>"},{"location":"4.Classes_i_objectes_amb_PHP.html#herencia","title":"Her\u00e8ncia","text":"<ul> <li>S'utilitza la paraula reservada extends</li> </ul> <p>Video</p>"},{"location":"4.Classes_i_objectes_amb_PHP.html#classes-i-metodes-abstractes","title":"Classes i m\u00e8todes abstractes","text":"<ul> <li>Per a definir una classe o m\u00e8tode abstracte utilitzem la paraula reservada  abstract.</li> <li>No es podran instanciar objectes de la classe, nom\u00e9s podrem heretar d'ella.</li> <li>Un metode abstracte obliga a les classes hereves a instanciar-lo.</li> </ul> <p>Video</p>"},{"location":"4.Classes_i_objectes_amb_PHP.html#atributs-i-funcions-statiques","title":"Atributs i funcions statiques","text":"<ul> <li>Es una variable de la classe i no de l'objecte.</li> <li>Es declaren amb la paraula static.</li> <li>S'accedix amb l'operador ::</li> </ul> <pre><code>class Coche{\n    private static numRodes = 4;\n\n    public static function getNumRodes()\n    {\n        return self::numRodes;\n    }\n}\n\necho Coche::getNumRodes();\n</code></pre>"},{"location":"4.Classes_i_objectes_amb_PHP.html#cridar-a-metodes-de-la-classe-base","title":"Cridar a m\u00e8todes de la classe base","text":"<ul> <li>En PHP, si una classe heretada no t\u00e9 constructor propi, es cridar\u00e0 autom\u00e0ticament al constructor de la classe base.</li> <li>Si la classe heretada defineix el seu propi constructor, caldr\u00e0 realitzar la trucada expl\u00edcitament.</li> <li>Utilitzarem la paraula reservada  parent:: que fa refer\u00e8ncia a la classe base de la classe actual (parent::__construct())</li> <li>La paraula reservada self:: fa refer\u00e8ncia a la classe actual.</li> </ul>"},{"location":"4.Classes_i_objectes_amb_PHP.html#interficies","title":"Interf\u00edcies","text":"<ul> <li>\u00c9s com una classe buida que solament cont\u00e9 declaracions de m\u00e8todes.</li> <li>Es defineixen utilitzant la paraula interface</li> <li>Si volem que una classe implemente una interf\u00edcie, utilitzarem la paraula reservada implements</li> <li>A\u00e7\u00f2 obligar\u00e0 al fet que existisquen en la classe tots els m\u00e8todes de l'interface</li> <li>Una classe pot implementar m\u00e9s d'una interf\u00edcie.</li> <li>Tots els m\u00e8todes d'una interf\u00edcie han de ser p\u00fablics</li> <li>Una interf\u00edcie pot incloure constants, per\u00f2 no atributs</li> <li>Un interf\u00edcie pot heretar d'una altra utilitzant extends.</li> <li>PHP t\u00e9 una s\u00e8rie d'interf\u00edcies ja definides, per exemple, l\u00b4interf\u00edcie Countable</li> </ul>"},{"location":"4.Classes_i_objectes_amb_PHP.html#exemple","title":"Exemple","text":"<ul> <li>Teniu un exemple de tot lo vist en Exemple Objectes</li> </ul>"},{"location":"4.Classes_i_objectes_amb_PHP.html#exempcions","title":"Exempcions","text":"<p>Video</p> <ul> <li>PHP t\u00e9 un model d'excepcions similar a l'existent en altres llenguatges de programaci\u00f3 try, catch, finally.</li> </ul>"},{"location":"4.Classes_i_objectes_amb_PHP.html#la-classes-exception","title":"La classes Exception","text":"<ul> <li>Exception \u00e9s la classe base para totes les excepcions d'usuari en PHP.</li> <li>Proporcionen m\u00e8todes per a obtenir informaci\u00f3 de l'excepci\u00f3 i de tra\u00e7a</li> <li>getMessage. Retorna el missatge, en cas que s'haja posat algun </li> <li>getCode. Retorna el codi d'error si existeix</li> <li>Hi ha diverses exempcions ja definides, l'estructura jer\u00e0rquica i l seua sinopsi es pot vore en el seg\u00fcent enlla\u00e7: Documentaci\u00f3</li> </ul>"},{"location":"4.Classes_i_objectes_amb_PHP.html#exempcions-definides-per-lusuari","title":"Exempcions definides per l'usuari","text":"<p>Altra opci\u00f3 per a indicar un error \u00e9s llan\u00e7ar una exempci\u00f3.</p> <ul> <li>El codi susceptible de produir algun error s'introdueix en un bloc try </li> <li>Quan es produeix algun error, es llan\u00e7a una excepci\u00f3 utilitzant la instrucci\u00f3 throw </li> <li>Despr\u00e9s del bloc try ha d'haver-hi com a m\u00ednim un bloc catch encarregat de processar l'error </li> <li>Si una vegada acabat el bloc try no s'ha llan\u00e7at cap excepci\u00f3, es continua amb l'execuci\u00f3 en la l\u00ednia seg\u00fcent al bloc o blocs catch </li> <li>Si hi ha alguna cosa que s'haja d'executar tant si es produeix una excepci\u00f3 com si no es produeix, ho posarem dins d'un bloc finally, despr\u00e9s de l'\u00faltim bloc catch.</li> <li>Per a llan\u00e7ar una excepci\u00f3 no \u00e9s necessari indicar cap par\u00e0metre, encara que de forma opcional es pot passar un missatge d'error i tamb\u00e9 un codi d'error</li> </ul>"},{"location":"4.Classes_i_objectes_amb_PHP.html#exemple_1","title":"Exemple","text":"<p><pre><code>&lt;?php\n\n    class DivisionByZero extends exception{\n            protected $message = \"El segundo argumento es 0\";\n    }\n\n    function dividir($a, $b){\n        if ($b==0){\n            throw new DivisionByZero;\n        }\n        return $a/$b;\n    }\n    try{\n        $resul1 = dividir(5, 0);\n        echo \"Resul 1 $resul1\". \"&lt;br&gt;\";\n    }catch(DivisionByZero $e){\n        echo \"Excepci\u00f3n: \". $e-&gt;getMessage(). \"&lt;br&gt;\";\n    }finally{\n        echo \"Primer finally&lt;br&gt;\";      \n    }\n\n    try{\n        $resul2 = dividir(5, 2);\n        echo \"Resul 2 $resul2\". \"&lt;br&gt;\";\n    }catch(DivisionByZero $e){\n        echo \"Excepci\u00f3n: \". $e-&gt;getMessage(). \"&lt;br&gt;\";\n    }finally{\n        echo \"Segundo finally\";     \n    }\n</code></pre> En la primera crida a dividir es produeix una exempci\u00f3 i s'executen el bloc catch i finally. En el segon s'executa el try i el finally.</p>"},{"location":"5.Acces_bases_de_dades.html","title":"Acces a Bases de dades","text":""},{"location":"5.Acces_bases_de_dades.html#acces-a-bbdd-des-de-php","title":"Acc\u00e9s a BBDD des de  PHP","text":"<ul> <li>Per a accedir a BBDD  mysql o mariabd tenim dues opcions:<ul> <li>El  driver natiu  mysqli o El  driver gen\u00e8ric  PDO</li> </ul> </li> <li>En aquest curs utilitzarem PDO, encara que l'\u00fas de  mysqli \u00e9s molt similar al de PDO</li> <li>Accions a realitzar:<ul> <li>Establir connexions </li> <li>Executar sent\u00e8ncies  SQL</li> <li>Obtenir els registres afectats o retornats per una sent\u00e8ncia SQL.</li> <li>Emprar transaccions</li> <li>Gestionar els errors que es produ\u00efsquen durant la connexi\u00f3 o en l'establiment de la mateixa</li> </ul> </li> </ul>"},{"location":"5.Acces_bases_de_dades.html#establiment-de-la-connexio","title":"Establiment de la connexi\u00f3","text":"<p>Video</p> <ul> <li>Haurem de  instanciar un objecte de la classe  PDO passant-li els seg\u00fcents par\u00e0metres (nom\u00e9s el primer \u00e9s obligatori):<ul> <li>Origen de dades (DSN). Cadena de text que indica qu\u00e8 controlador es va a utilitzar i, a continuaci\u00f3, separades pel car\u00e0cter dos punts, els par\u00e0metres espec\u00edfics necessaris pel controlador, com per exemple, el nom o adre\u00e7a IP del servidor i el nom de la base de dades</li> <li>Nom d'usuari amb permisos per a establir la connexi\u00f3</li> <li>Contrasenya de l'usuari</li> <li>Opcions de connexi\u00f3, emmagatzemades en forma de  array</li> </ul> </li> </ul> <p>Per exemple, si utilitzem el controlador per a  Mysql, la cadena  DSN rebr\u00e0 els par\u00e0metres seg\u00fcents (a continuaci\u00f3 del prefix  mysql:</p> <ul> <li>host. Nom o adre\u00e7a IP del servidor </li> <li>port. Nombre de port  TCP en el qual escolta el servidor </li> <li>dbname. Nom de la base de dades</li> </ul> <pre><code>$conn = new PDO ('mysql:host=mysql;port=3306;dbname=juegoRol', 'root', '1234');\n</code></pre>"},{"location":"5.Acces_bases_de_dades.html#class-pdoexception","title":"Class PDOException","text":"<p>Totes les excepcions que genera  PDO s\u00f3n del tipus  PDOException que hereta de la classe  Exception. Si hagueren errors de connexi\u00f3, es llan\u00e7ar\u00e0 una excepci\u00f3  PDOException. Si no capturem l'excepci\u00f3, es finalitzar\u00e0 el  script i mostrar\u00e0 informaci\u00f3 de seguiment, que podria revelar detalls de la connexi\u00f3 a la base de dades, incloent el nom d'usuari i la contrasenya</p>"},{"location":"5.Acces_bases_de_dades.html#presentacio-i-recuperacio-de-dades","title":"Presentaci\u00f3 i recuperaci\u00f3 de dades","text":"<p>Video</p> <ul> <li>Si la consulta genera un conjunt de dades (SELECT), s'utilitza el m\u00e8tode query per executa una sent\u00e8ncia SQL. La sentencia retorna false si hi ha errors o un conjunt de resultats com un objecte  PDOStatement</li> </ul> <p><pre><code>&lt;?php\n$parametres_connexio = 'mysql:host=localhost;port=3306;dbname=test';\n$usuari = 'root';\n$passwd = '...';\ntry {\n        $bd = new PDO($parametres_connexio,$usuari,$passwd);\n        echo \"Connexio realitzada correctament!!&lt;br/&gt;\";\n        $sql = \"SELECT producte, unitats  FROM stock\";\n        $productes =  $bd-&gt;query($sql);\n        echo $productes-&gt;rowCount().\" elements&lt;br/&gt;\";\n        echo '&lt;ul&gt;';\n        //dues maneres\n\n        foreach ($productes-&gt;fetchAll as $producte){\n            echo '&lt;li&gt;'.$producte['producte'].' '.$producte['unitats'].'&lt;/li&gt;';\n        }\n\n        foreach ($productes-&gt;fetchAll(PDO::FETCH_OBJ) as $producte){\n            echo '&lt;li&gt;'.$producte-&gt;producte.' '.$producte-&gt;unitats.'&lt;/li&gt;';\n        }\n        echo '&lt;/ul&gt;';\n    } catch (PDOException $e) {\n    echo 'Error con la base de datos: ' . $e-&gt;getMessage();\n    } \n</code></pre> * Podem recuperar les dades utilitzan la instrucci\u00f3 fetchAll() utilitzant l'estil que vulgam</p> <ul> <li>Treballar amb consultes d'esta manera \u00e9s vulnerable a injeccions  SQL. En el seu lloc es recomana utilitzar consultes preparades.</li> </ul>"},{"location":"5.Acces_bases_de_dades.html#insercio-esborrat-i-modificat","title":"Inserci\u00f3, esborrat i modificat","text":"<p>S'utilitza el m\u00e8tode  PDO::exec, que executa una sent\u00e8ncia  SQL i retorna el nombre de registres afectats</p> <pre><code>    $registres = $pdo-&gt;exec('DELETE FROM stock WHERE unitats=0');  \n    echo \"\\&lt;p&gt;S'han esborrat $registres registres.\\&lt;/p&gt;\";\n</code></pre> <p>Aquesta sent\u00e8ncia \u00e9s vulnerable a injeccions SQL. En el seu lloc es recomana utilitzar consultes preparades</p> <pre><code>&lt;?php\n// datos conexi\u00f3n\n$cadena_conexion = 'mysql:host=localhost;port=3306;dbname=test';\n$usuario = 'root';\n$clave = '';\ntry {\n    // conectar\n    $bd = new PDO($cadena_conexion, $usuario, $clave);  \n    echo \"Conexi\u00f3n realizada con \u00e9xito&lt;br&gt;\";    \n    // insertar nuevo usario\n    $ins = \"insert into usuarios(nombre, clave, rol) values('Alberto', '33333', '1');\";\n    $resul = $bd-&gt;exec($ins);   \n    //comprobar errores\n    if($resul) {\n        echo \"insert correcto &lt;br&gt;\";\n        echo \"Filas insertadas: \" . $resul . \"&lt;br&gt;\";\n    }else print_r( $bd-&gt;errorinfo());   \n    // para los autoincrementos\n    echo \"C\u00f3digo de la fila insertada\" . $bd-&gt;lastInsertId() . \"&lt;br&gt;\"; \n\n    // actualizar\n    $upd = \"update usuarios set rol =  0 where rol = 1\";\n    $resul = $bd-&gt;exec($upd);   \n    //comprobar errores\n    if($resul){\n        echo \"update correcto &lt;br&gt;\";\n        echo \"Filas actualizadas: \" . $resul-&gt;rowCount() . \"&lt;br&gt;\";\n    }else print_r( $bd-&gt;errorinfo());   \n\n    // borrar\n    $del = \"delete from usuarios where nombre = 'Luisa'\";\n    $resul = $bd-&gt;exec($del);   \n    //comprobar errores\n    if($resul){\n        echo \"delete correcto &lt;br&gt;\";\n        echo \"Filas borradas: \" . $resul-&gt;rowCount() . \"&lt;br&gt;\";\n    }else print_r( $bd-&gt;errorinfo());\n\n} catch (PDOException $e) {\n    echo 'Error con la base de datos: ' . $e-&gt;getMessage();\n} \n</code></pre>"},{"location":"5.Acces_bases_de_dades.html#consultes-preparades","title":"Consultes preparades","text":"<p>Ens aporten dos avantatges importants:</p> <ul> <li>Per a sent\u00e8ncies que seran executades en m\u00faltiples ocasions amb diferents par\u00e0metres optimitza el rendiment de l'aplicaci\u00f3. </li> <li>Ajuda a prevenir injeccions  SQL eliminant la necessitat de entrecomillar manualment els par\u00e0metres.</li> </ul> <p>Utilitzem el m\u00e8tode prepare de la classe PDO que retorna un objecte de la classe PDOStatement. A m\u00e9s, els par\u00e0metres es poden marcar utilitzant signes d'interrogaci\u00f3 o amb nom, utilitzant :.</p> <pre><code> $pdoSt = $pdo-&gt;prepare('INSERT INTO fam\u00edlia (cod,nom)  VALUES (?, ?)');\n $pdoSt = $pdo-&gt;prepare('INSERT INTO fam\u00edlia (cod,nom)  VALUES (:cod,:nom)');\n</code></pre> <p>Abans d'executar la consulta, cal assignar un valor als par\u00e0metres.Utilitzem el m\u00e8tode bindParam de la classe PDOStatement. Si hem utilitzat signe d'interrogaci\u00f3 posarem l'\u00edndex del par\u00e0metre comen\u00e7ant per 1. Si usem par\u00e0metres amb nom, indiquem el nom en la cridada a bindParam.</p> <pre><code>$cod_producte = \" TABLET\";  \n$nom_producte = \" Tablet PC\"; \n$pdoSt-&gt;bindParam(1,$cod_producte); \n$pdoSt-&gt;bindParam(2,$nom_producte);\n</code></pre> <pre><code>$pdoSt-&gt;bindParam(\":cod\",$cod_producte); \n$pdoSt-&gt;bindParam(\":nom\",$nom_producte);\n</code></pre> <p>Una vegada preparada la consulta i enlla\u00e7ats els par\u00e0metres amb els seus valors, s'executa la consulta utilitzant el m\u00e8tode  execute de la classe  PDOStatement. Tamb\u00e9, \u00e9s possible assignar els valors dels par\u00e0metres en el moment d'executar la consulta, utilitzant un  array (associatiu o amb claus num\u00e8riques depenent de la forma en qu\u00e8 hages indicat els par\u00e0metres) en la cridada a  execute</p> <pre><code>&lt;?php\n$cadena_conexion = 'mysql:host=localhost;port=3306;dbname=test';\n$usuario = 'root';\n$clave = '';\ntry {\n       $bd = new PDO($cadena_conexion, $usuario, $clave);\n        echo \"Conexi\u00f3n realizada con \u00e9xito&lt;br&gt;\";        \n        $sql = 'SELECT nombre, clave, rol FROM usuarios';\n        $usuarios = $bd-&gt;query($sql);\n        echo \"N\u00famero de usuarios: \" . $usuarios-&gt;rowCount() . \"&lt;br&gt;\";\n        foreach ($usuarios-&gt;fetchAll(PDO::FETCH_OBJ) as $usu) {\n            print \"Nombre : \" . $usu-&gt;nombre;\n            print \"Clave : \" . $usu-&gt;clave . \"&lt;br&gt;\";\n        }\n\n        /* consulta preparada, parametros por orden */  \n        $preparada = $bd-&gt;prepare(\"select nombre from usuarios where rol = ?\"); \n        $preparada-&gt;execute( array(0));\n        echo \"Usuarios con rol 0: \" .  $preparada-&gt;rowCount() . \"&lt;br&gt;\";\n        foreach ($preparada-&gt;fetchAll(PDO::FETCH_OBJ) as $usu) {\n            print \"Nombre : \" . $usu-&gt;nombre . \"&lt;br&gt;\";\n        }\n\n        /* consulta preparada, parametros por nombre */ \n        $preparada_nombre = $bd-&gt;prepare(\"select nombre from usuarios where rol = :rol\");\n        $preparada_nombre-&gt;execute( array(':rol' =&gt; 0));\n        echo \"Usuarios con rol 0: \" .  $preparada-&gt;rowCount() . \"&lt;br&gt;\";\n        foreach ($preparada_nombre-&gt;fetchAll(PDO::FETCH_OBJ)  as $usu) {\n            print \"Nombre : \" . $usu-&gt;nombre . \"&lt;br&gt;\";\n        }   \n    } catch (PDOException $e) {\n        echo 'Error con la base de datos: ' . $e-&gt;getMessage();\n    }\n</code></pre>"},{"location":"5.Acces_bases_de_dades.html#querybuilder","title":"QueryBuilder","text":"<p>Un Query Builder cont\u00e9 una s\u00e8rie de funcions llestes per a realitzar les operacions m\u00e9s comunes amb una base de dades,  per\u00f2 sense usar el llenguatge SQL directament. Podem instal\u00b7lar alguno com Eloquent o el de Doctrine. En esta s\u00e8rie de videos es mostra com anar implementant un:</p> <p>M\u00e8tode find : Video </p> <p>Utilitzant el m\u00e8tode find dins d'una classe per a implementar un modelo de dades: Video </p> <p>M\u00e8tode insert: Video </p>"},{"location":"5.Acces_bases_de_dades.html#transaccions","title":"Transaccions","text":"<p>Video</p> <p>Una transacci\u00f3 consistix en un conjunt d'operacions que han de realitzar-se de forma at\u00f2mica. Es a dir, o es realitzen totes o cap.</p> <p>Per defecte PDO treballa en manera  autocommit, aix\u00ed esconfirma de forma autom\u00e0tica cada sent\u00e8ncia que executa el servidor.</p> <p>Per a treballar amb transaccions,  PDO incorpora tres m\u00e8todes:</p> <ul> <li>beginTransaction. Deshabilita la manera  autocommit i comen\u00e7a una nova transacci\u00f3, que finalitzar\u00e0 quan executes un dels dos m\u00e8todes seg\u00fcents.</li> <li>commit. Confirma la transacci\u00f3 actual </li> <li>rollback. Reverteix els canvis duts a terme en la transacci\u00f3 actual</li> </ul> <p>Una vegada executat un  commit o un  rollback, es tornar\u00e0 a la manera de confirmaci\u00f3 autom\u00e0tica</p> <pre><code>    &lt;?php\n    $cadena_conexion = 'mysql:host=localhost;port=3306;dbname=test';\n    $usuario = 'homestead';\n    $clave = 'secret';\n    try {\n        $bd = new PDO($cadena_conexion, $usuario, $clave);\n        echo \"Conexi\u00f3n realizada con \u00e9xito&lt;br&gt;\";\n        // comenzar la transacci\u00f3n\n        $bd-&gt;beginTransaction();    \n        $ins = \"insert into usuarios(nombre, clave, rol) values('Fernando', '33333', '1')\";\n        $resul = $bd-&gt;exec($ins);   \n        // se repite la consulta\n        // falla porque el nombre es unique\n        $resul = $bd-&gt;exec($ins);   \n        if(!$resul){\n            echo \"Error: \" . print_r($bd-&gt;errorinfo());\n            // deshace el primer cambio\n            $bd-&gt;rollback();\n            echo \"&lt;br&gt;Transacci\u00f3n anulada&lt;br&gt;\";\n        }else{\n            // si hubiera ido bien...\n            $bd-&gt;commit();\n        }   \n    } catch (PDOException $e) {\n        echo 'Error al conectar: ' . $e-&gt;getMessage();\n    } \n</code></pre>"},{"location":"6.Seguretat_en_PHP.html","title":"Seguretat en PHP (i altres coses)","text":"<p>Taula de continguts</p> <ul> <li>Ocultant dades d'entorn</li> <li>Sessions i seguretat</li> <li>Correu electr\u00f2nic</li> <li>Composer</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#ocultant-dades-dentorn","title":"Ocultant dades d'entorn","text":"<p>Video</p> <p>Una de les pr\u00e0ctiques habituals i necess\u00e0ries en les aplicacions PHP  \u00e9s l'emmagatzematge de les variables d'entorn i la seua posterior recuperaci\u00f3 en el codi font de les p\u00e0gines.</p> <p>Per a poder incorporar d'una manera \u00e0gil les variables d'entorn en aplicacions PHP usarem una llibreria que ja ve preparada amb les funcionalitats b\u00e0siques que podrem arribar a necessitar en el dia a dia. La llibreria es diu \"PHP dotenv\" i b\u00e0sicament permet la lectura senzilla de les variables d'entorn en arxius d'extensi\u00f3 \".*env\".</p> <p>L'\u00fas de variables d'entorn en les aplicacions web \u00e9s important per a la separaci\u00f3 del codi per responsabilitats: no hem de mesclar el codi de l'aplicaci\u00f3 amb els valors de configuraci\u00f3.</p> <p>Les variables de configuraci\u00f3 canviaran generalment segons l'entorn d'execuci\u00f3, \u00e9s a dir, quan una aplicaci\u00f3 est\u00e0 sent executada en diferents servidors. Per exemple, el servidor local per a desenvolupament i el servidor remot on es col\u00b7locar\u00e0 el lloc web accessible als usuaris d'Internet. Per tant, separar-les en arxius independents permetr\u00e0 que el mateix codi funcione en qualsevol lloc, sense necessitat de modificacions, independentment dels valors de configuraci\u00f3 que es tinguen en cada entorn.</p> <p>Pensem en els valors de connexi\u00f3 amb la base de dades (host, user, password\u2026). Aqueixos valors segurament seran diferents en el servidor de desenvolupament i en el servidor de producci\u00f3. Altres elements que seria important tindre separats en variables d'entorn s\u00f3n les credencials d'acc\u00e9s a diversos serveis, claus APIs (API Keys), el nom del host on s'est\u00e0 executant l'aplicaci\u00f3, etc.</p>"},{"location":"6.Seguretat_en_PHP.html#artxius-env","title":"Artxius .env","text":"<p>Els arxius .env es poden considerar un est\u00e0ndard per a l'emmagatzematge de variables d'entorn. Aquests arxius tenen un format molt senzill i f\u00e0cil d'escriure i de llegir.</p> <p>La sintaxi dels .*env cont\u00e9 parells clau (nom de variable) i valor, separats per un car\u00e0cter \"=\". Cada variable en una l\u00ednia.</p> <p>``` MODE=\"development\" HOST=\"projecte.my\"</p> <p>DB_USER=\"batoi\" DB_PASSWORD=\"1234\" DB_HOST=\"localhost\"  ``` L'arxiu .env generalment ho col\u00b7locar\u00e0s en l'arrel del teu projecte, en un arxiu sense nom. La ruta del .env no ha d'estar accessible pel Servidor Web, sin\u00f3 que ha de ser un directori per damunt, perqu\u00e8 els usuaris no puguen accedir a la configuraci\u00f3 de les nostres variables d'entorn. Fixa't tamb\u00e9 que el nom de l'arxiu comen\u00e7ar\u00e0 amb un punt i despr\u00e9s les tres lletres \"env\". En sistemes com Linux o Mac, l'arxiu que comen\u00e7a per \".\" es considera ocult.</p> <p>El que \u00e9s important \u00e9s que aquests arxius no es troben a l'abast dels usuaris, per la qual cosa mai haurien d'estar dins de la carpeta de publicaci\u00f3, sin\u00f3 algun directori per damunt en el servidor. \u00c9s a dir, es col\u00b7locar\u00e0 en l'arrel del projecte, per\u00f2 mai dins de la carpeta arrel de publicaci\u00f3, perqu\u00e8 si foren all\u00ed els usuaris podrien accedir a aqueixos valors component la ruta com \"example.com/.env\". \u00d2bviament, els valors de configuraci\u00f3 desitgem que estiguen segurs, per la qual cosa no han de ser accessibles pel p\u00fablic en general.</p>"},{"location":"6.Seguretat_en_PHP.html#llibreria-php-dotenv","title":"Llibreria PHP DOTENV","text":"<p>PHP dotenv https://github.com/vlucas/phpdotenv fa la tasca d'obrir l'arxiu on les variables d'entorn s'emmagatzemen i processar el seu contingut, per a produir les variables d'entorn i consumir-les c\u00f2modament dins de les aplicacions.</p> <p>Pots instal\u00b7lar f\u00e0cilment mitjan\u00e7ant</p> <p><code>composer require vlucas/phpdotenv</code></p>"},{"location":"6.Seguretat_en_PHP.html#carrega-darxius-amb-variables-dentorn","title":"C\u00e0rrega d'arxius amb variables d'entorn","text":"<p>PHP dotenv ens permet tindre diversos arxius de configuraci\u00f3. Per a accedir al contingut dels arxius .env utilitzem el seg\u00fcent codi:</p> <p><code>php $dotenv = Dotenv\\Dotenv::createImmutable(__DIR__); $dotenv-&gt;load();</code></p>"},{"location":"6.Seguretat_en_PHP.html#acces-a-les-variables-dentorn","title":"Acc\u00e9s a les variables d'entorn","text":"<p>Una vegada que hem carregat els arxius de variables d'entorn, estaran disponibles les seues variables i valors en el codi de les aplicacions per mitj\u00e0 de diversos m\u00e8todes diferents.</p> <p>La funci\u00f3 getenv(), en la qual passem la cadena de la variable d'entorn que volem accedir.</p> <p>A trav\u00e9s del array superglobal $_ENV A trav\u00e9s del array superglobal $_SERVER</p> <p><code>php $s3_bucket = getenv('S3_BUCKET'); $s3_bucket = $_ENV['S3_BUCKET']; $s3_bucket = $_SERVER['S3_BUCKET'];</code></p>"},{"location":"6.Seguretat_en_PHP.html#sessions-i-seguretat","title":"Sessions i seguretat","text":"<p>Video</p> <p>Com Http \u00e9s un protocol sense estat, les diferents peticions d'un client a un servidor s\u00f3n independents, no estan relacionades entre si. Per associar-les s'utilitzen les sessions. </p> <p>El terme sessi\u00f3 fa refer\u00e8ncia al conjunt d'informaci\u00f3 relativa a un usuari concret. Aquesta informaci\u00f3 pot ser tan simple com el nom del propi usuari, o m\u00e9s complexa, com els articles que ha dipositat en la cistella de compra d'una tenda online.</p> <p>Cada usuari diferent d'un lloc web t\u00e9 la seua pr\u00f2pia informaci\u00f3 de sessi\u00f3.Per a distingir una sessi\u00f3 d'una altra s'usen els identificadors de sessi\u00f3 (SID). Un SID \u00e9s un atribut que s'assigna a cadascun dels visitants d'un lloc web i ho identifica. Si el servidor web utilitza el SID d'un usuari, per a relacionar-ho amb la informaci\u00f3 que posseeix sobre ell, que es mant\u00e9 en la sessi\u00f3 de l'usuari.</p> <p>El proc\u00e9s de maneig de sessions en PHP est\u00e0 automatitzat. </p>"},{"location":"6.Seguretat_en_PHP.html#accedir-a-les-dades-de-la-sessio","title":"Accedir a les dades de la sessi\u00f3","text":"<ul> <li>Una vegada oberta la sessi\u00f3, usem la variable superglobal  $_SESSION per a afegir informaci\u00f3 a la sessi\u00f3 de l'usuari, o per a accedir a la informaci\u00f3 emmagatzemada en la sessi\u00f3</li> <li>Per exemple, per a explicar el nombre de vegades que l'usuari visita la p\u00e0gina, podem fer: </li> </ul> <p><code>php // Iniciem la sessi\u00f3 o recuperem l'anterior sessi\u00f3 existent  session_start();  // Comprovem si la variable ja existeix  if (isset($_SESSION['visites']))     $_SESSION['visites']++;  else     $_SESSION['visites'] = 0;</code></p>"},{"location":"6.Seguretat_en_PHP.html#eliminar-una-variable-de-la-sessio","title":"Eliminar una variable de la sessi\u00f3","text":"<ul> <li>Per a eliminar una variable de la sessi\u00f3 usarem la funci\u00f3 unset()</li> </ul> <pre><code>   unset($_SESSION['visites']);\n</code></pre> <ul> <li>Per a tancar la sessi\u00f3 de forma manual utilitzarem la funci\u00f3 session_destroy()</li> <li>Abans hem d'eliminar les variables de la sessi\u00f3 de la seg\u00fcent forma:<ul> <li>$_SESSION = [];</li> </ul> </li> </ul>"},{"location":"6.Seguretat_en_PHP.html#objectes-i-arrays","title":"Objectes i arrays","text":"<p>Si volem guardar un objecte o un array en una variable de sessi\u00f3 primer l'hem de transformar amb serialize() i despres, quan el recuperem, haurem d'utilitzar unserialize()</p>"},{"location":"6.Seguretat_en_PHP.html#autenticacio-amb-sessions","title":"Autenticaci\u00f3 amb sessions","text":"<p>Video</p> <ul> <li>Probablement, l'\u00fas m\u00e9s est\u00e8s del control de sessions siga el seguiment d'usuaris autenticats a trav\u00e9s d'un mecanisme d'inici de sessi\u00f3. Per a a\u00e7\u00f2 necessitarem un formulari de login.</li> </ul> <p>register.php</p> <pre><code>&lt;?php\nif (isPost() &amp;&amp; cfsr()){\n        try {\n            // Comprovaci\u00f3 d'errors\n        } catch ( CheckFieldException $e) {\n            $errors[$e-&gt;getField()] = $e-&gt;getMessage();\n        }\n\n       if (!count($errors)){\n           $password = password_hash($password,PASSWORD_DEFAULT );\n           $query-&gt;insert('users',compact('name','email','password'));\n           header('Location: /');\n       }\n    }\n    require_once('register.view.php');\n?&gt;\n</code></pre> <p>login.php</p> <pre><code> &lt;?php \n    session_start()\n    if (isPost() &amp;&amp; cfsr()){\n       //comprovaci\u00f3 d'errors\n       if (!count($errors)){\n           $user = $query-&gt;login('users',$email,$password);\n           $_SESSION['user'] = serialize($user);\n           header('Location: /');\n       }\n    }\n\n    require_once('login.view.php'); ```\n\nlogout.php\n\n```php\n&lt;?php\n    session_start();\n    unset($_SESSION['user']);\n    session_destroy();\n    header('Location: /');\n ```\nindex.php\n\n```php\n&lt;?php\n    session_start();\n   $user = unserialize($_SESSION['user']);\n   if (!$user) {\n        header('Location: /login.php');\n   }\n   ...  \n</code></pre> <p>queryBuilder.php</p> <pre><code>&lt;?php\n    public function login($table,$email,$password){\n        $stpdo = $this-&gt;conn-&gt;prepare(\"SELECT * FROM $table WHERE email = :email\");\n        $stpdo-&gt;bindValue(\":email\",$email);\n        $stpdo-&gt;execute();\n        $user = $stpdo-&gt;fetch(\\PDO::FETCH_OBJ);\n        if (password_verify($password, $user-&gt;password)) return $user;\n        return null;\n    }    \n</code></pre> <p>La informaci\u00f3 d'autenticaci\u00f3 s'ha d'utlitzar en un protocol com a HTTPS que permeta xifrar les comunicacions amb el servidor web i amb contrasenya protegida amb hash.</p>"},{"location":"6.Seguretat_en_PHP.html#enviament-de-correu-electronic","title":"Enviament de correu electronic","text":"<p>Video</p> <p>Encara que la funci\u00f3 mail() permet l'enviament de correus electr\u00f2nics, \u00e9s habitual utilitzar alguna llibreria que s'ocupe dels detalls del format.</p> <p><pre><code> composer require phpmailer/phpmailer\n</code></pre> o modificant el composer.json per afegir la linea \"phpmailer/phpmailer\": \"~6.1\" dins del require</p> <p><pre><code> \"require\": {\n        \"filp/whoops\": \"^2.4\",\n        \"phpmailer/phpmailer\": \"~6.1\"\n    },\n</code></pre> i executant els composer update</p> <p>En principi es possible enviar un correu utilitzant la configuraci\u00f3 de sendmail (en Linux) o un servidor SMTP local, en la pr\u00e0ctica els filtres antispam fan que no arriben els correus enviats des de servidors no registrats correctament. A m\u00e9s des de les aules tampoc es pot fer.</p> <p>Si no es disposa d'un servidor de correu en Internet, l'opci\u00f3 m\u00e9s comoda per tal d'enviar un correu \u00e9s utilitzar un compte de Gmail. En Gmail cal activar l'opci\u00f3 \"Permetre aplicacions meyns segures\" en la secci\u00f3 d'ajustos de compte. A\u00e7\u00f2 va a canviar en breu i no es podr\u00e0 utilitzar sin\u00f3 que haurem d'identificar-nos amb Oauth. Teniu informaci\u00f3 disponible en el github de php mailer.</p> <p>El seg\u00fcent programa permet enviar un correu mitjan\u00e7ant Google:</p> <p><pre><code>&lt;?php   \n    use PHPMailer\\PHPMailer\\PHPMailer;\n    use PHPMailer\\PHPMailer\\SMTP;\n    use PHPMailer\\PHPMailer\\Exception;\n    require \"vendor/autoload.php\";\n\n    try {\n        //Server settings\n        $mail-&gt;SMTPDebug = SMTP::DEBUG_SERVER;                      // Enable verbose debug output\n        $mail-&gt;isSMTP();                                            // Send using SMTP\n        $mail-&gt;Host       = 'smtp.gmail.com';                    // Set the SMTP server to send through\n        $mail-&gt;SMTPAuth   = true;                                   // Enable SMTP authentication\n        $mail-&gt;Username   = '2daw2021batoi@gmail.com';                     // SMTP username\n        $mail-&gt;Password   = 'batoi_1234';                               // SMTP password\n        $mail-&gt;SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged\n        $mail-&gt;Port       = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above\n\n        //Recipients\n        $mail-&gt;setFrom('from@example.com', 'Mailer');\n        $mail-&gt;addAddress('joe@example.net', 'Joe User');     // Add a recipient\n        $mail-&gt;addAddress('ellen@example.com');               // Name is optional\n        $mail-&gt;addReplyTo('info@example.com', 'Information');\n        $mail-&gt;addCC('cc@example.com');\n        $mail-&gt;addBCC('bcc@example.com');\n\n        // Attachments\n        $mail-&gt;addAttachment('/var/tmp/file.tar.gz');         // Add attachments\n        $mail-&gt;addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name\n\n        // Content\n        $mail-&gt;isHTML(true);                                  // Set email format to HTML\n        $mail-&gt;Subject = 'Here is the subject';\n        $mail-&gt;Body    = 'This is the HTML message body &lt;b&gt;in bold!&lt;/b&gt;';\n        $mail-&gt;AltBody = 'This is the body in plain text for non-HTML mail clients';\n\n        $mail-&gt;send();\n        echo 'Message has been sent';\n    } catch (Exception $e) {\n        echo \"Message could not be sent. Mailer Error: {$mail-&gt;ErrorInfo}\";\n    }\n</code></pre> On us he possat unes credencials que podeu gastar per al curs i no tenir que obrir un compte cadasc\u00fa.</p>"},{"location":"6.Seguretat_en_PHP.html#composer","title":"Composer","text":"<p>Composer ens resol dos problemes:</p> <ul> <li>Gestionar les depend\u00e8ncies amb llibreries de tercers (N'hi ha prou que declarem les depend\u00e8ncies i Composer s'encarregar\u00e0 de descarregar i instal\u00b7lar tot el que siga necessari)</li> <li>Autoloading del nostre codi (Ja no haurem de fer m\u00e9s requires, Composer ho far\u00e0 per nosaltres)</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#gestio-de-les-dependencies","title":"Gesti\u00f3 de les depend\u00e8ncies","text":"<ul> <li>La instal\u00b7laci\u00f3 de les llibreries sempre \u00e9s local per a cada projecte</li> <li>S'instal\u00b7len en un directori del projecte</li> <li>Per defecte aqueix directori \u00e9s vendor/</li> <li>Passos:<ul> <li>Declarar les llibreries de les quals dep\u00e8n el projecte</li> <li>Composer desc\u00e0rrega i instal\u00b7la autom\u00e0ticament les versions correctes de cadascuna d'aqueixes llibreries i les seues depend\u00e8ncies</li> </ul> </li> </ul>"},{"location":"6.Seguretat_en_PHP.html#installacio","title":"Instal\u00b7laci\u00f3","text":"<ul> <li>Es pot instal\u00b7lar localment per a cada projecte o globalment</li> <li>Anem a instal\u00b7lar-ho globalment:</li> </ul> <pre><code>$curl -sS https://getcomposer.org/installer | php  \nsudo mv composer.phar /usr/local/bin/composer\n</code></pre> <ul> <li>Hem descarregat composer i ho hem mogut a un directori que est\u00e0 dins del PATH. A partir d'ara, podem executar Composer simplement escrivint composer</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#preparar-larxiu-composerjson","title":"Preparar l'arxiu composer.json","text":"<ul> <li>Necessari per a usar composer en un projecte</li> <li>Consisteix en una s\u00e8rie d'estructures d'informaci\u00f3 niades</li> <li>Exemple:</li> </ul> <pre><code> {\"require\": { \"monolog/monolog\": \"1.2.\" } }\n</code></pre> <ul> <li>require mapea noms de paquets (en l'exemple, monolog/monolog) amb versions de paquets (en aquest cas, 1.2.)</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#exemple-dus","title":"Exemple d'\u00fas","text":"<ul> <li>Estem desenvolupant un projecte i necessitem una llibreria per a guardar missatges de log</li> <li>Decidim utilitzar la llibreria monolog</li> <li>Per a incloure aquesta llibreria:<ul> <li>Anem a crear un arxiu composer.json</li> </ul> </li> </ul> <pre><code>{ \"require\": {\"monolog/monolog\": \"1.0.\" } } \n</code></pre> <p>Estem indicant que el projecte dep\u00e8n d'un paquet anomenat monolog/monolog i que li serveix qualsevol versi\u00f3 la numeraci\u00f3 de la qual comence per 1.0</p>"},{"location":"6.Seguretat_en_PHP.html#noms-de-paquets","title":"Noms de paquets","text":"<ul> <li>Est\u00e0 format per dues parts:<ul> <li>La primera indica qui \u00e9s la seua \"vendor\" o creador </li> <li>La segona indica el nom del projecte</li> </ul> </li> <li>Sovint les dues parts s\u00f3n id\u00e8ntiques</li> <li>El nom del creador \u00e9s important per a evitar col\u00b7lisions entre projectes amb el mateix nom</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#versions-de-paquets","title":"Versions de paquets","text":"<ul> <li>En l'exemple anterior, la versi\u00f3 requerida de la llibreria \u00e9s 1.0.</li> <li>Es pot utilitzar qualsevol versi\u00f3 de la branca 1.0 (com per exemple 1.0.0, 1.0.2 o 1.0.20)</li> <li>Aquesta versi\u00f3 \u00e9s equivalent a =1.0 &gt; &lt;1.1</li> <li>Les versions requerides es poden especificar de moltes maneres:<ul> <li>Versi\u00f3 exacta: com per exemple 1.0.2 </li> <li>Rang de versions: S'usen operadors de comparaci\u00f3: &gt;, &gt;=, &lt;, &lt;=, !=. ( Exemples: &gt;=1.0 o &gt;=1.0,&lt;2.0)</li> <li>Comodins: La versi\u00f3 1.0. per exemple \u00e9s equivalent a =1.0, &gt;&lt;1.1 </li> <li>La seg\u00fcent versi\u00f3 significativa: que s'indica mitjan\u00e7ant l'operador ~ i s'interpreta de la seg\u00fcent manera: ~1.2 \u00e9s equivalent a =1.2, &gt;&lt;2.0, mentre que ~1.2.3 \u00e9s equivalent a =1.2.3, &gt;&lt;1.3 (\u00fatil per a aquells projectes que segueixen el versionat sem\u00e0ntic)</li> </ul> </li> </ul>"},{"location":"6.Seguretat_en_PHP.html#versionat-semantic-semver","title":"Versionat sem\u00e0ntic (Semver)","text":"<ul> <li>Els nombres de versi\u00f3 i la forma en qu\u00e8 canvien informen sobre el que va ser modificat d'una versi\u00f3 a una altra</li> <li>Veure l'especificaci\u00f3 en el seg\u00fcent document:<ul> <li>http://semver.org/lang/es/</li> </ul> </li> </ul>"},{"location":"6.Seguretat_en_PHP.html#installant-les-dependencies","title":"Instal\u00b7lant les depend\u00e8ncies","text":"<ul> <li>Executem el seg\u00fcent comando:</li> </ul> <pre><code> composer install\n</code></pre> <ul> <li>Es generar\u00e0 el directori vendor/ amb les llibreries de les quals dep\u00e8n el projecte</li> <li>MOLT IMPORTANT: Hem d'afegir el directori vendor/ a l'arxiu .gitignore</li> <li>El comando tamb\u00e9 crea un arxiu composer.lock</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#larxiu-composerlock","title":"L'arxiu composer.lock","text":"<ul> <li>Guarda la versi\u00f3 exacta que s'ha instal\u00b7lat de cada llibreria</li> <li>El projecte es fixa a unes determinades versions</li> <li>Tant el composer.lock com el composer.json han d'estar en el repositori</li> <li>El comando install comprova primer si existeix l'arxiu composer.lock, i si existeix, desc\u00e0rrega exactament les versions que s'indiquen en aqueix arxiu</li> <li>Si treballem en equip, tot l'equip tindr\u00e0 les mateixes versions</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#actualitzar-versions","title":"Actualitzar versions","text":"<ul> <li>Si tenim l'arxiu composer.lock sempre s'instal\u00b7laran les mateixes versions de les llibreries</li> <li>Per a actualitzar a noves versions, usem el comando update</li> <li>Fa que composer cerque les versions m\u00e9s recents de les llibreries</li> <li>Sempre que seguisquen complint les restriccions de les versions indicades en l'arxiu composer.json</li> <li>Tamb\u00e9 actualitza l'arxiu composer.lock</li> <li>Si solament volem instal\u00b7lar o actualitzar una depend\u00e8ncia, podem indicar el seu nom despr\u00e9s del comando:</li> </ul> <pre><code> composer update monolog/monolog\n</code></pre>"},{"location":"6.Seguretat_en_PHP.html#afegint-dependencies","title":"Afegint depend\u00e8ncies","text":"<ul> <li>El comando require afig noves depend\u00e8ncies en l'arxiu composer.json<ul> <li>composer require</li> </ul> </li> <li>Ens preguntar\u00e0 qu\u00e8 llibreries volem afegir</li> <li>Despr\u00e9s d'afegir aquestes noves depend\u00e8ncies, s'instal\u00b7len o actualitzen les depend\u00e8ncies que siguen necess\u00e0ries</li> <li>Podem passar les noves depend\u00e8ncies com a argument del comando</li> </ul> <pre><code> composer require monolog/monolog:1.\n</code></pre>"},{"location":"6.Seguretat_en_PHP.html#packagist","title":"Packagist","text":"<ul> <li>Repositori central de Composer (lloc del que s'obtenen els paquets)</li> <li>Lloc web: http://packagist.org</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#carrega-automatica-de-classes","title":"C\u00e0rrega autom\u00e0tica de classes","text":"<ul> <li>Normalment les llibreries proporcionen informaci\u00f3 sobre la c\u00e0rrega autom\u00e0tica de les seues classes</li> <li>Composer genera un arxiu vendor/autoload.php</li> <li>Incloent aquest arxiu en el projecte, podem utilitzar qualsevol classe instal\u00b7lada a trav\u00e9s de Composer sense haver d'incloure-la expl\u00edcitament:</li> </ul> <pre><code> require 'vendor/autoload.php';\n</code></pre>"},{"location":"6.Seguretat_en_PHP.html#us-de-la-llibreria","title":"\u00das de la llibreria","text":"<ul> <li>Per a usar la llibreria Monolog podem usar les seues classes i Composer s'encarregar\u00e0 de carregar-les:</li> </ul> <pre><code>$log = new Monolog\\Logger('name'); \n\n$log-&gt;pushHandler(\nnew Monolog\\Handler\\StreamHandler('app.log', Monolog\\Logger::WARNING) );\n\n$log-&gt;addWarning('Foo');\n</code></pre>"},{"location":"6.Seguretat_en_PHP.html#espais-de-noms","title":"Espais de noms","text":"<ul> <li>S\u00f3n una manera d'encapsular elements</li> <li>Podemos fer un simil entre els namespaces i els directoris:<ul> <li>Els directoris serveixen per a agrupar fitxers relacionats </li> <li>El fitxer foo.txt pot existir en els directoris /home/greg i /home/un altre, per\u00f2 no poden coexistir dues c\u00f2pies de foo.txt en el mateix directori</li> <li>Per a accedir al fitxer foo.txt f\u00f3ra del directori /home/greg, s'ha d'anteposar el nom del directori al nom del fitxer, emprant el separador de directoris per a aix\u00ed obtenir /home/greg/foo.txt</li> </ul> </li> <li>Aquest mateix principi s'est\u00e9n als espais de noms en el m\u00f3n de la programaci\u00f3</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#introduccio-als-namespaces","title":"Introducci\u00f3 als namespaces","text":"<ul> <li>Els namespaces s\u00f3n una caracter\u00edstica de PHP que s'introdueix en la versi\u00f3 5.3</li> <li>L'\u00fas de namespaces \u00e9s molt convenient per dos motius:<ul> <li>El conflicte de noms entre el codi que es crea i les classes/funciones/constants internes de PHP o les classes/funciones/constants de tercers </li> <li>La capacitat de sobrenomenar (o abreujar) Noms_Extra_Llargs millorant la llegibilitat del codi font</li> </ul> </li> <li>Nom\u00e9s usarem namespaces per a noms de classes</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#definir-espais-de-noms","title":"Definir espais de noms","text":"<ul> <li>Nom\u00e9s les classes (incloent abstractes i traits), interf\u00edcies, funcions i constants es veuen afectats per espais de noms</li> <li>Es declaren utilitzant la paraula reservada namespace</li> <li>S'ha de declarar a l'inici del fitxer, abans que qualsevol altre codi</li> <li>Nom\u00e9s hi ha una excepci\u00f3: la paraula reservada declare</li> </ul> <pre><code>namespace MiProyecto;\n\nconst CONNECTAR_OK = 1; \n\nclass Connexi\u00f3 { / ... / } \n\nfunction connectar() { / ... / }\n</code></pre>"},{"location":"6.Seguretat_en_PHP.html#ubicacio-de-la-declaracio","title":"Ubicaci\u00f3 de la declaraci\u00f3","text":"<ul> <li>Tot el que no siga codi PHP no pot precedir a la declaraci\u00f3 de l'espai de noms</li> </ul> <pre><code> &lt;html&gt; &lt;?php namespace MiProyecto;\n\n  // error fatal - el espacio de nombres debe ser la primera sentencia del script ?&gt;\n</code></pre>"},{"location":"6.Seguretat_en_PHP.html#declarar-subespacios-de-noms","title":"Declarar subespacios de noms","text":"<ul> <li>Un nom d'un espai de noms es pot definir amb subnivells</li> </ul> <pre><code>namespace MiProyecto\\Sub\\Nivell;\n\nconst CONNECTAR_OK = 1; \n\nclass Connexi\u00f3 { / ... / } \n\nfunction connectar() { / ... / }\n</code></pre>"},{"location":"6.Seguretat_en_PHP.html#us-de-namespaces-en-els-nostres-projectes","title":"\u00das de namespaces en els nostres projectes","text":"<ul> <li>Cada aplicaci\u00f3 que creiem tindr\u00e0 un espai de noms diferent</li> <li>Podrem separar els subnoms del namespace amb el car\u00e0cter \\</li> <li>Per exemple:</li> </ul> <pre><code>namespace CursoPhp7\\Core; Class Request { ... }\n</code></pre> <ul> <li>La classe Request estar\u00e0 dins de l'espai de noms CursoPhp7\\Core</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#usar-elements-que-estan-dins-de-namespaces","title":"Usar elements que estan dins de namespaces","text":"<ul> <li>Per a poder usar la classe Request de l'exemple anterior haurem d'indicar el </li> </ul> <pre><code>nom complet CursoPhp7\\Core\\Request\n</code></pre> <ul> <li>Per a abreujar els usos podem utilitzar la instrucci\u00f3 use que permet indicar els espais de noms que anem a utilitzar:</li> </ul> <pre><code>use CursoPhp7\\Core\\Request;\n</code></pre> <ul> <li>Ara ja podrem usar la classe Request sense indicar la ruta completa</li> <li>Tamb\u00e9 podem definir un \u00e0lies per a una classe de la seg\u00fcent forma:</li> </ul> <pre><code>use CursoPhp7\\Core\\Request as Req;\n</code></pre> <ul> <li>Ara podrem usar la classe Request com Req</li> <li>\u00c9s una molt bona pr\u00e0ctica fer coincidir els namespaces amb els directoris on es troben els arxius</li> <li>A\u00e7\u00f2 ens permetr\u00e0 utilitzar el autoloader de Composer que veurem m\u00e9s endavant</li> <li>En el nostre projecte tots els arxius pengen del directori \\</li> <li>M\u00e9s endavant, veurem que podem associar el nom del directori de nostre projecte amb un espai de noms, per exemple, CursoPhp7.</li> <li>Per tant, els namespaces comen\u00e7aran per CursoPhp7\\</li> <li>Per exemple:<ul> <li>CursoPhp7\\App\\Controllers o CursoPhp7\\Core o CursoPhp7\\Database o ...</li> </ul> </li> </ul>"},{"location":"6.Seguretat_en_PHP.html#afegir-els-uses","title":"Afegir els uses","text":"<ul> <li>En tots els llocs on utilitzem un namespace, haurem d'afegir l'use de l'espai de noms corresponent</li> <li>A m\u00e9s, quan utilitzem una classe d'alguna llibreria o del propi PHP, com per exemple PDO, haurem d'afegir-li una  davant per a indicar que la classe est\u00e0 en l'espai de noms arrel</li> </ul> <pre><code>return $statement-&gt;fetchAll(\n\\PDO::FETCH_CLASS, 'Agenda\\\\Entities\\\\'.$classEntity);\n</code></pre>"},{"location":"6.Seguretat_en_PHP.html#autoloading-amb-composer","title":"Autoloading amb Composer","text":"<ul> <li>Cada vegada que afegim una nova classe a la nostra aplicaci\u00f3 hem d'inserir el require corresponent en el nostre bootstrap.php</li> <li>Per a evitar a\u00e7\u00f2 podem utilitzar l'eina composer amb la seua funcionalitat de autoloading</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#carrega-automatica-de-les-nostres-classes","title":"C\u00e0rrega autom\u00e0tica de les nostres classes","text":"<ul> <li>La c\u00e0rrega autom\u00e0tica de classes en composer es controla mitjan\u00e7ant la propietat autoload de l'arxiu composer.json</li> <li>Es permeten quatre valors:<ul> <li>El carregador de classes que segueix l'est\u00e0ndard PSR-0 </li> <li>El carregador de classes que segueix l'est\u00e0ndard PSR-4 (substitueix a l'anterior)</li> <li>El mapa de classes (classmap) </li> <li>Els arxius individuals (files)</li> </ul> </li> <li>El m\u00e8tode recomanat \u00e9s el carregador PSR-4 perqu\u00e8 \u00e9s el m\u00e9s flexible (no fa falta per exemple regenerar el carregador de classes quan s'afig una nova classe al projecte)</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#us-de-psr-4","title":"\u00das de PSR-4","text":"<ul> <li>Podemos consultar l'especificaci\u00f3 en la seg\u00fcent url:<ul> <li>http://www.php-fig.org/psr/psr-4/</li> </ul> </li> <li>Es basa que els noms dels namespaces han de coincidir amb els directoris on se situen els arxius</li> <li>Per a activar-ho afegirem la clau autoload indicant l'opci\u00f3 psr-4 i amb quin directori es mapea el namespace principal</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#exemple","title":"Exemple","text":"<pre><code>{\n\"autoload\": {\"psr-4\": {\"Acme\\\\\": \"src/\"} } }\n</code></pre> <ul> <li>Composer crear\u00e0 un carregador autom\u00e0tic de classes per al namespace Acme que seguir\u00e0 les normes de l'est\u00e0ndard PSR-4 de PHP</li> <li>El directori src/ estar\u00e0 en l'arrel del projecte, al mateix nivell que el directori vendor/</li> <li>Contindr\u00e0 el codi del projecte</li> <li>Aix\u00ed, l'arxiu src/Acme/Foo.php hauria de contenir la classe Acme\\Foo</li> <li>Despr\u00e9s d'afegir l'opci\u00f3 autoload, cal executar el comando composer dump-autoload perqu\u00e8 es regenere l'arxiu vendor/autoload.php</li> </ul>"},{"location":"6.Seguretat_en_PHP.html#incloure-el-autoloader","title":"Incloure el autoloader","text":"<ul> <li>Perqu\u00e8 tot funcione correctament caldr\u00e0 incloure el fitxer autoload.php en el controlador frontal (index.php) abans d'incloure el bootstrap.php</li> <li>Ara podrem eliminar tots els requires de classes que tinguem en el bootstrap.php</li> <li>El autoload s'encarregar\u00e0 cercar els fitxers i utilitzar-los</li> </ul>"},{"location":"7.2.Laravel_introduccio.html","title":"INTRODUCCI\u00d3 ALS FRAMEWORKS PHP I LARAVEL","text":""},{"location":"7.2.Laravel_introduccio.html#frameworks","title":"Frameworks","text":"<p>Un framework \u00e9s una eina que proporciona una s\u00e8rie de m\u00f2duls que ajuden a organitzar i desenvolupar un producte programari. En el cas concret dels frameworks PHP, la majoria d'ells proporcionen una s\u00e8rie de comandos o eines per a crear projectes amb una estructura determinada (normalment, seguint el patr\u00f3 MVC que veurem despr\u00e9s), de manera que ja donen una base de treball feta, i facilitats per a poder crear el model de dades, la connexi\u00f3 a la base de dades, les rutes de les diferents seccions de l'aplicaci\u00f3, etc.</p>"},{"location":"7.2.Laravel_introduccio.html#exemples-de-frameworks-php","title":"Exemples de frameworks PHP","text":"<p>Actualment existeix una gran varietat de frameworks PHP que triar per a desenvolupar les nostres aplicacions. Alguns dels m\u00e9s populars s\u00f3n:</p> <ul> <li> <p>Laravel, un framework relativament recent (va ser creat en 2011), i que ha guanyat bastant popularitat en els \u00faltims anys. La seua \ufb01losofia \u00e9s el poder desenvolupar projectes de manera elegant i simple. Compta amb una \u00e0mplia comunitat de suport darrere, i se li augura un futur bastant consolidat.</p> </li> <li> <p>Symfony, creat en 2005, compta amb m\u00e9s cam\u00ed fet que Laravel, i una estructura m\u00e9s consolidada. En les seues primeres versions es presentava com un framework m\u00e9s monol\u00edtic (s'instal\u00b7laven massa m\u00f2duls que despr\u00e9s no necessit\u00e0vem), per\u00f2 recentment ha adaptat la seua estructura per a fer-la m\u00e9s modular.</p> </li> <li> <p>CodeIgniter, un framework m\u00e9s lleuger que els anteriors, per\u00f2 tamb\u00e9 amb un ampli grup de seguidors i desenvolupadors. Va ser creat en 2006 i, encara que ha patit una etapa d'aband\u00f3, ha tornat a agafar for\u00e7a en els \u00faltims anys, potser a causa de la seua simplicitat d'\u00fas.</p> </li> <li> <p>CakePHP, creat en 2005, \u00e9s un altre framework similar a CodeIgniter quant a simplicitat i facilitat d'\u00fas. T\u00e9 una \u00e0mplia comunitat tamb\u00e9 darrere que li d\u00f3na suport.</p> </li> <li> <p>Zend, creat en 2006, \u00e9s un altre framework bastant popular, encara que potser amb menor visibilitat que els anteriors hui dia, a l'altura de CakePHP.</p> </li> <li> <p>Phalcon, un altre framework de recent creaci\u00f3 (2012), amb una potent capacitat de processament de p\u00e0gines PHP, i la possibilitat de treballar com microframework (m\u00e9s lleuger, per a oferir funcionalitats molt espec\u00ed\ufb01cas) o com framework complet. </p> </li> </ul> <p>De fet, molts frameworks m\u00e9s antics tamb\u00e9 han incorporat recentment la possibilitat d'executar-los com microframeworks. Quasi tots els frameworks PHP tenen una s\u00e8rie de caracter\u00edstiques comunes, com s\u00f3n l'\u00fas del patr\u00f3 MVC per a desenvolupar els seus projectes, la injecci\u00f3 de depend\u00e8ncies per a gestionar recursos com ara connexions a bases de dades, o elements compartits per tota l'aplicaci\u00f3, la possibilitat de desenvolupar tant webs completes com serveis REST accessibles des de diversos clients, etc.</p>"},{"location":"7.2.Laravel_introduccio.html#quin-triar","title":"Quin triar","text":"<p>A l'hora de decantar-nos per l'un o l'altre framework, no ens haur\u00edem de deixar enganyar per la popularitat d'aquest, en termes de quota de mercat. En aqueix terreny, Symfony i Laravel probablement s\u00f3n els m\u00e9s demandats, per\u00f2 la corba d'aprenentatge en ells pot ser que siga m\u00e9s pronunciada que en uns altres a priori m\u00e9s senzills, com CodeIgniter o CakePHP.</p> <p>Cada framework pot estar millor orientat que un altre per a determinats tipus de projectes o necessitats. Si volem aprendre una cosa r\u00e0pida per a llan\u00e7ar l'aplicaci\u00f3 com m\u00e9s prompte millor, potser Symfony no \u00e9s la millor opci\u00f3. Si, per contra, preferim xopar-nos d'un framework amb una comunitat important darrere que ens puga donar suport i ens garantisca un temps de vida llarg, llavors Symfony o Laravel poden ser millors candidats.</p>"},{"location":"7.2.Laravel_introduccio.html#per-que-laravel","title":"Per qu\u00e8 Laravel?","text":"<p>Arribats a aquest punt... quines caracter\u00edstiques t\u00e9 Laravel que ens hagen fet triar-ho per a aquest curs enfront d'altres frameworks? \u00c9s un framework que ofereix bastants avantatges.</p> <p>\u00c9s bastant popular hui dia, potser el que m\u00e9s, si atenem diferents webs estad\u00edstiques. Per exemple, si comparem les cerques en Google Trends dels principals frameworks PHP, observem que Laravel \u00e9s el m\u00e9s destacat:</p> <p></p> <p>Tamb\u00e9 \u00e9s un dels frameworks PHP que m\u00e9s demanda laboral a nivell nacional segons  InfoJobs.</p> <p>T\u00e9 una gran comunitat darrere, la qual cosa permet trobar f\u00e0cilment ajuda per a problemes que tinguem T\u00e9 una bona documentaci\u00f3, tant per terceres parts com a trav\u00e9s de la seua pr\u00f2pia p\u00e0gina o\ufb01cial. Disposa d'algunes llibreries addicionals que permeten afegir funcionalitat molt interessant, com el motor de plantilles Blade, o el ORM Eloquent, que veurem m\u00e9s endavant, aix\u00ed com llibreries de terceres parts que podem incorporar als nostres projectes.</p> <p>En realitat, una vegada es coneix un d'aquests frameworks, \u00e9s m\u00e9s senzill assimilar la resta, arribat el moment. Aix\u00ed que Laravel pot ser un bon punt de partida. En concret, durant el curs utilitzarem la versi\u00f3 8 del framework, que es recolza en PHP 7 per a funcionar.</p>"},{"location":"7.2.Laravel_introduccio.html#caracteristiques","title":"Caracter\u00edstiques","text":"<p>Laravel \u00e9s un framework de codi obert per al desenvolupament d'aplicacions web en PHP que posseeix una sintaxi simple, expressiva i elegant. Va ser creat en 2011 per Taylor Otwell, inspirant-se en Ruby on Rails i Symfony, dels quals ha adoptat els seus principals avantatges.</p> <p>Laravel facilita el desenvolupament simplificant el treball amb tasques comunes com l'autenticaci\u00f3, el enrutamiendo, gesti\u00f3 sessions, l'emmagatzematge en cach\u00e9, etc. Algunes de les principals caracter\u00edstiques i avantatges de Laravel s\u00f3n:</p> <ul> <li>Esta dissenyat per a desenvolupar sota el patr\u00f3 MVC (model - vista - controlador), centrant-se en la correcta separaci\u00f3 i modularitzaci\u00f3 del codi. El que facilita el treball en equip, aix\u00ed com la claredat, el manteniment i la reutilitzaci\u00f3 del codi.</li> <li>Integra un sistema ORM de mapeado de dades relacional anomenat Eloquent encara que tamb\u00e9 permet la construcci\u00f3 de consultes directes a for\u00e7a de dades mitjan\u00e7ant la seua Query Builder.</li> <li>Permet la gesti\u00f3 de bases de dades i la manipulaci\u00f3 de taules des de codi, mantenint un control de versions de les mateixes mitjan\u00e7ant el seu sistema de Migracions.</li> <li>Utilitza un sistema de plantilles per a les vistes anomenat Blade, el qual fa \u00fas de la cache per a donar-li major velocitat. Blade facilita la creaci\u00f3 de vistes mitjan\u00e7ant l'\u00fas de layouts, her\u00e8ncia i seccions.</li> <li>Facilita l'extensi\u00f3 de funcionalitat mitjan\u00e7ant paquets o llibreries externes. D'aquesta forma \u00e9s molt senzill afegir paquets que ens faciliten el desenvolupament d'una aplicaci\u00f3 i ens estalvien molt temps de programaci\u00f3.</li> <li>Incorpora un int\u00e8rpret de l\u00ednia de comandos anomenat Artisan que ens ajudar\u00e0 amb un munt de tasques rutin\u00e0ries com la creaci\u00f3 de diferents components de codi, treball amb la base de dades i migracions, gesti\u00f3 de rutes, cach\u00e9s, cues, tasques programades, etc.</li> </ul>"},{"location":"7.2.Laravel_introduccio.html#primers-passos-amb-laravel","title":"Primers passos amb Laravel","text":"<p>Ara que ja tenim tot el sistema preparat per a desenvolupar projectes Laravel, vegem els primers passos que hem de donar per a crear aquests projectes.</p> <p>Per a tindre    localitzats tots    els  projectes, comen\u00e7arem per crear    una carpeta en la carpeta  code (si utilitzem homestead). Els projectes que fem a partir d'ara els situarem dins d'aquesta carpeta, cadascun en la seua pr\u00f2pia subcarpeta.</p>"},{"location":"7.2.Laravel_introduccio.html#crear-projectes-laravel","title":"Crear projectes Laravel","text":"<p>Per a crear projectes Laravel, emprarem el comando que ja haur\u00edem de tindre disponible, si hem seguit els passos donats en el document d'Instal\u00b7laci\u00f3 del programari necessari, o si estem utilitzant la m\u00e0quina virtual proporcionada, on ja ve el comando instal\u00b7lat. Ens haurem de situar en la carpeta on vulguem crear el projecte (la carpeta code que hem comentat anteriorment), i escriure aquest comando:</p> <p><pre><code>laravel new Biblioteca\n</code></pre> Aix\u00f2 crear\u00e0 una carpeta \"Biblioteca\" amb el contingut inicial del projecte dins, emprant l'\u00faltima versi\u00f3 de Laravel que tinguem instal\u00b7lada.</p>"},{"location":"7.2.Laravel_introduccio.html#el-comanament-artisan","title":"El comanament Artisan","text":"<p>Laravel inclou un interf\u00edcie de l\u00ednia de comandos (CLI, Command line interface) anomenat Artisan. Aquesta utilitat ens va a permetre realitzar m\u00faltiples tasques necess\u00e0ries durant el proc\u00e9s de desenvolupament o desplegament a producci\u00f3 d'una aplicaci\u00f3, per la qual cosa ens facilitar\u00e0 i accelerar\u00e0 el treball. Per a veure una llista de totes les opcions que inclou Artisan podem executar el seg\u00fcent comando en un consola o terminal del sistema en la carpeta arrel del nostre projecte:</p> <pre><code>php artisan list\n</code></pre> <p>Si volem obtenir una ajuda m\u00e9s detallada sobre alguna de les opcions de Artisan simplement hem d'escriure la paraula help davant del comando en q\u00fcesti\u00f3, per exemple:</p> <pre><code>php artisan help migrate\n</code></pre> <p>A poc a poc anirem veient m\u00e9s opcions de Artisan, de moment anem a comentar solament dues opcions importants: el llistat de rutes i la generaci\u00f3 de codi.</p> <p>Per a veure un llistat amb totes les rutes que hem definit en el fitxer routes.php podem executar el comando: </p> <pre><code>php artisan route:list\n</code></pre> <p>A\u00e7\u00f2 ens mostrar\u00e0 una taula amb el m\u00e8tode, l'adre\u00e7a, l'acci\u00f3 i els filtres definits per a totes les rutes. D'aquesta forma podem comprovar totes les rutes de la nostra aplicaci\u00f3 i assegurar-nos que estiga tot correcte.</p>"},{"location":"7.2.Laravel_introduccio.html#estructura-dun-projecte-laravel","title":"Estructura d'un projecte Laravel","text":"<p>En crear un nou projecte de Laravel se'ns generar\u00e0 una estructura de carpetes i fitxers per a organitzar el nostre codi. \u00c9s important que coneguem perqu\u00e8 val cada element i on hem de col\u00b7locar el nostre codi. Les carpetes que m\u00e9s utilitzarem i les que millor haurem de con\u00e8ixer s\u00f3n:</p> <ul> <li>app \u2013 Cont\u00e9 el codi principal de l'aplicaci\u00f3. Aquesta carpeta al seu torn est\u00e0 dividida en moltes subcarpetas que analitzarem en la seg\u00fcent secci\u00f3.</li> <li>config \u2013 Ac\u00ed es troben tots els arxius de configuraci\u00f3 de l'aplicaci\u00f3: base dades, cache, correus, sessions o qualsevol altra configuraci\u00f3 general de l'aplicaci\u00f3.</li> <li>database \u2013 En aquesta carpeta s'inclou tot el relacionat amb la definici\u00f3 de la base de dades del nostre projecte. Dins d'ella podem trobar al seu torn tres carpetes: factors, migrations i seeds. En el cap\u00edtol sobre base de dades analitzarem millor el seu contingut.</li> <li>public \u2013 \u00c9s l'\u00fanica carpeta p\u00fablica, l'\u00fanica que hauria de ser visibleen el nostre servidor web. Tot les peticions i sol\u00b7licituds a l'aplicaci\u00f3 passen per aquesta carpeta, ja que en ella es troba el index.php, aquest arxiu \u00e9s el que inicia tot el proc\u00e9s d'execuci\u00f3 del framework. En aquest directori tamb\u00e9 s'allotgen els arxius CSS, Javascript, imatges i altres arxius que es vulguen fer p\u00fablics.</li> <li>resources \u2013 Aquesta carpeta cont\u00e9 al seu torn tres carpetes: assets, views i lang:</li> <li>resources/views\u2013Este directori cont\u00e9 les vistes de la nostra aplicaci\u00f3. En general seran plantilles de HTML que usen els controladors per a mostrar la informaci\u00f3. Cal tenir en compte que en aquesta carpeta NO s'emmagatzemen els Javascript, CSS o imatges, aqueix tipus d'arxius s'han de guardar en la carpeta public.</li> <li>resources/lang \u2013 En aquesta carpeta es guarden arxius PHP que contenen arrays amb els textos del nostre lloc web en diferents llenguatges, solament ser\u00e0 necessari utilitzar-la en cas que es desitge que l'aplicaci\u00f3 es puga traduir.</li> <li>resources/assets \u2013 S'utilitza per a emmagatzemar els fonts dels assets tipus less o sass que s'haurien de compilar per a generar les fulles d'estil p\u00fabliques. No \u00e9s necessari usar aquesta carpeta ja que podem escriure directament les les fulles d'estil dins de la carpeta public.</li> <li>bootstrap \u2013 En aquesta carpeta s'inclou el codi que es carrega per a processar cadascuna de les cridades al nostre projecte. Normalment no haurem de modificar gens d'aquesta carpeta. Cont\u00e9 l'arxiu app.php, que \u00e9s el que posa en marxa l'aplicaci\u00f3 i la cach\u00e9.</li> <li>storage \u2013 En aquesta carpeta Laravel emmagatzema tota la informaci\u00f3 interna necessaris per a l'execuci\u00f3 de la web, com s\u00f3n els arxius de sessi\u00f3, la cach\u00e9, la compilaci\u00f3 de les vistes, fique informaci\u00f3 i els logs del sistema. Normalment tampoc haurem de tocar gens dins d'aquesta carpeta, unicamente se sol accedir a ella per a consultar els logs.</li> <li>routes \u2013 En aquesta carpeta es defineixen totes les rutes del nostre lloc web, enlla\u00e7ant una URL del navegador amb un m\u00e8tode d'un controlador. A m\u00e9s ens permet realitzar validacions (mitjan\u00e7ant Middleware) i altres operacions sobre les rutes del nostre lloc. Hi han per a accedir a contingut web normal ( web.php ), com per a serveis web ( api.php ), com per a comandos i altres opcions.</li> <li>tests\u2013Esta carpeta se utilitza per als fixers amb les proves automatitzades. Laravel inclou un sistema que facilita tot el proc\u00e9s de proves amb PHPUnit.</li> <li>vendor \u2013 En aquesta carpeta s'allotgen totes les llibreries i depend\u00e8ncies que conformen el framework de Laravel. Aquesta carpeta tampoc l'haurem de modificar, ja que tot el codi que cont\u00e9 s\u00f3n llibreries que s'instal\u00b7len i actualitzen mitjan\u00e7ant l'eina Composer. A m\u00e9s en la carpeta arrel tamb\u00e9 podem trobar dos fitxers molt importants i que tamb\u00e9 utilitzarem:</li> <li>.env \u2013 Aquest fitxer s'utilitza per a emmagatzemar els valors de configuraci\u00f3 que s\u00f3n propis de la m\u00e0quina o instal\u00b7laci\u00f3 actual. El que ens permet canviar f\u00e0cilment la configuraci\u00f3 segons la m\u00e0quina en la qual s'instal\u00b7le i tenir opcions diferents per a producci\u00f3, per a diferents desenvolupadors, etc. Important, aquest fitxer hauria d'estar en el .gitignore.</li> <li>composer.json \u2013 Aquest fitxer \u00e9s l'utilitzat per Composer per a realitzar la instal\u00b7laci\u00f3 de Laravel. En una instal\u00b7laci\u00f3 inicial \u00fanicament s'especificar\u00e0 la instal\u00b7laci\u00f3 d'un paquet, el propi framework de Laravel, per\u00f2 podem especificar la instal\u00b7laci\u00f3 d'altres llibreries o paquets externs que afigen funcionalitat a Laravel.</li> </ul>"},{"location":"7.2.Laravel_introduccio.html#carpeta-app","title":"Carpeta App","text":"<p>La carpeta app \u00e9s la que cont\u00e9 el codi principal del projecte, com s\u00f3n les rutes, controladors, filtres i models de dades. Si accedim a aquesta carpeta veurem que cont\u00e9 al seu torn moltes sub-carpetes, per\u00f2 la principal que anem a utilitzar \u00e9s la carpeta Http:</p> <ul> <li>app/Console - Per definir els nostres comanaments</li> <li>app/Exceptions - Per definir les nostres exempcions</li> <li>app/Http/Controllers \u2013 Cont\u00e9 tots els arxius amb les classes dels controladors que serveixen per a interactuar amb els models, les vistes i manejar la l\u00f2gica de l'aplicaci\u00f3.</li> <li>app/Http/Middleware \u2013 S\u00f3n els filtres o classes interm\u00e8dies que podem utilitzar per a realitzar determinades accions, com la validaci\u00f3 de permisos, abans o despr\u00e9s de l'execuci\u00f3 d'una petici\u00f3 a una ruta del nostre projecte web.</li> <li>Providers - Cont\u00e9 els prove\u00efdors de serveis de l'aplicaci\u00f3, m\u00e9s els que puguem definir nosaltres.</li> <li>A m\u00e9s, ac\u00ed s'inclouen, o es poden incloure, carpetes addicionals per a la nostra aplicaci\u00f3, com la carpeta Events per a definir els esdeveniments que oc\u00f3rreguen, o diferents carpetes per a emmagatzemar el model de dades o classes de la nostra aplicaci\u00f3.</li> </ul> <p>En l'arrel de app tamb\u00e9 podem trobar el fitxer User.php. Aquest fitxer \u00e9s un model de dades que ve predefinit per Laravel per a treballar amb els usuaris de la web, que inclou m\u00e8todes per a fer login, registre, etc. </p>"},{"location":"7.2.Laravel_introduccio.html#arquitectura-dun-projecte-laravel","title":"Arquitectura d'un projecte Laravel","text":"<p>Una vegada vista l'estructura de carpetes i arxius que es genera quan creguem un projecte Laravel, \u00e9s important tamb\u00e9 tindre unes nocions b\u00e0siques de com s'interconnecten els elements internament, i qu\u00e8 fa que un projecte Laravel es puga posar en marxa.</p>"},{"location":"7.2.Laravel_introduccio.html#els-proveidors-de-serveis-service-providers","title":"Els prove\u00efdors de serveis (service providers)","text":"<p>Els prove\u00efdors de serveis s\u00f3n els principals responsables de l'arrancada o posada en marxa de tot projecte Laravel, la qual cosa es coneix com bootstrapping. S'encarreguen de registrar els components del projecte, depend\u00e8ncies externes, classes i m\u00e8todes de\ufb01nidos per nosaltres, per a fer-los accessibles a la resta de l'aplicaci\u00f3.</p> <p>Si obrim l'arxiu config/app.php del nostre projecte Laravel, veurem entre altres coses una secci\u00f3 denominada providers, on es de\ufb01nix un array amb tots els prove\u00efdors de serveis que es posen en marxa en arrancar l'aplicaci\u00f3. Entre altres coses, hi ha prove\u00efdors de serveis per a acc\u00e9s a la base de dades (DatabaseServiceProvider), autenticaci\u00f3 d'usuaris (AuthServiceProvider), etc.</p>"},{"location":"7.2.Laravel_introduccio.html#les-classes-del-nucli-de-laravel","title":"Les classes del nucli de Laravel","text":"<p>Per a poder desenvolupar els components de les aplicacions Laravel, \u00e9s necessari comptar amb una infraestructura pr\u00e8via de classes que ens faciliten aquesta tasca. Aix\u00ed, al llarg de les seg\u00fcents sessions farem \u00fas d'algunes classes proporcionades per Laravel que v\u00e9nen preinstal\u00b7lades amb el framework, com ara Route,Model etc, i que ens permeten o b\u00e9 heretar d'elles per a crear altres subclasses (com \u00e9s el cas dels models de dades) o b\u00e9 utilitzar alguns m\u00e8todes d'utilitat que aquestes classes proporcionen (com el cas del classe Route, per exemple).</p> <p>Conv\u00e9 tindre present que totes aquestes classes pertanyents al nucli de Laravel parteixen d'un espai de noms com\u00fa anomenat Illuminate , per la qual cosa, en els arxius font on les utilitzem, ser\u00e0 freq\u00fcent trobar instruccions use que comencen per aquest espai de noms. Per exemple:</p> <pre><code>use Illuminate\\Database\\Eloquent\\Model;\n</code></pre>"},{"location":"7.2.Laravel_introduccio.html#altres-elements","title":"Altres elements","text":"<p>A m\u00e9s dels dos pilars anteriors sobre els quals se sustenta fonamentalment el desenvolupament de projectes en Laravel, podem parlar d'altres elements que ens poden resultar d'utilitat en el desenvolupament, com s\u00f3n els facades i els contracts.</p> <p>Les facades proporcionen una interf\u00edcie est\u00e0tica als elements de l'aplicaci\u00f3, de manera que faciliten l'acc\u00e9sa uns certs m\u00e8todes o utilitats. Per exemple, la facade    cache permet accedir de manera senzilla amb el seu m\u00e8tode geta unes certes propietats cachejades pr\u00e8viament.</p> <pre><code>return Cache::get('key');\n</code></pre> <p>Els contracts s\u00f3n un conjunt d'interf\u00edcies que proporcionen el nucli de serveis oferits per Laravel. Per exemple, m\u00e8todes per a enviar e-mails, o encolar tasques en una cola de prioritat, etc.</p>"},{"location":"7.2.Laravel_introduccio.html#mvc-model-vista-controlador","title":"MVC: Model - Vista - Controlador","text":"<p>El model\u2013vista\u2013controlador (MVC) \u00e9s un patr\u00f3 d'arquitectura de programari que separa les dades i la l\u00f2gica de negoci d'una aplicaci\u00f3 de la interf\u00edcie d'usuari i el m\u00f2dul encarregat de gestionar els esdeveniments i les comunicacions. Per a a\u00e7\u00f2 MVC proposa la construcci\u00f3 de tres components diferents que s\u00f3n el model, la vista i el controlador, \u00e9s a dir, d'una banda defineix components per a la representaci\u00f3 de la informaci\u00f3, i d'altra banda per a la interacci\u00f3 de l'usuari. Aquest patr\u00f3 d'arquitectura de programari es basa en les idees de reutilitzaci\u00f3 de codi i la separaci\u00f3 de conceptes, caracter\u00edstiques que cerquen facilitar la tasca de desenvolupament d'aplicacions i el seu posterior manteniment. De manera gen\u00e8rica, els components de MVC es podrien definir com segueix:</p> <ul> <li>El Model: \u00c9s la representaci\u00f3 de la informaci\u00f3 amb la qual el sistema opera, per tant gestiona tots els accessos a aquesta informaci\u00f3, tant consultes com a actualitzacions. Les peticions d'acc\u00e9s o manipulaci\u00f3 d'informaci\u00f3 arriben al 'model' a trav\u00e9s del 'controlador'.</li> <li>El Controlador: Respon a esdeveniments (usualment accions de l'usuari) i invoca peticions al 'model' quan es fa alguna sol\u00b7licitud d'informaci\u00f3 (per exemple, editar un document o un registre en una base de dades). Per tant es podria dir que el 'controlador' fa d'intermediari entre la 'vista' i el 'model'.</li> <li>La Vista: Presenta el 'model' i les dades preparades pel controlador a l'usuari de forma visual. L'usuari podr\u00e0 interactuar amb la vista i realitzar altres peticions que s'enviaran al controlador.</li> </ul> <p></p>"},{"location":"7.2.Laravel_introduccio.html#funcionament-basic","title":"Funcionament b\u00e0sic","text":"<p>El funcionament b\u00e0sic que segueix Laravel despr\u00e9s d'una petici\u00f3 web a una URL del nostre lloc \u00e9s el seg\u00fcent:</p> <ul> <li> <p>Totes les peticions entren a trav\u00e9s del fitxer public/index.php, el qual en primer lloc comprovar\u00e0 en el fitxer de rutes (routes/web.php) si la URL \u00e9s v\u00e0lida i en cas de ser-ho al fet que controlador ha de fer la petici\u00f3.</p> </li> <li> <p>A continuaci\u00f3 cridar\u00e0 al m\u00e8tode del controlador assignat per a aquesta ruta. Com hem vist, el controlador \u00e9s el punt d'entrada de les peticions de l'usuari, el qual, depenent de la petici\u00f3:</p> <ul> <li>Accedir\u00e0 a la base de dades (si f\u00f3ra necessari) a trav\u00e9s dels \"models\" per a obtenir dades (o per a afegir, modificar o eliminar).</li> <li>Despr\u00e9s d'obtenir les dades necess\u00e0ries els preparar\u00e0 per a passar-li'ls a la vista.</li> </ul> </li> <li> <p>En el tercer pas el controlador cridar\u00e0 a una vista amb una s\u00e8rie de dades associades, la qual es preparar\u00e0 per a mostrar-se correctament a partir de les dades d'entrada i finalment es mostrar\u00e0 a l'usuari.  A continuaci\u00f3 s'inclou un xicotet esquema d'aquest funcionament:</p> </li> </ul> <p></p>"},{"location":"7.2.Laravel_introduccio.html#prova-de-projectes","title":"Prova de projectes","text":"<p>Video</p> <p>Per a poder provar un projecte de Laravel hem de fer una s\u00e8rie de passos previs. Si tenim instal\u00b7lat el Laravel Homestead, s\u00f3n els seguents:</p> <ul> <li>Crea un nou projecte en laravel</li> </ul> <pre><code>laravel new nom_projecte\n</code></pre> <ul> <li>Configurar el servidor per tal de que responga el domini i el /etc/host de la maquina. En homestead</li> </ul> <pre><code>serve domini.my /home/vagrant/code/nom_domini/public\n</code></pre> <ul> <li>Donar permisos a la carpeta storage i a cache</li> </ul> <pre><code>sudo chmod -R 777 bootstrap/cache\nsudo chmod -R 777 storage\nsudo chmod -R 777 storage/logs\n</code></pre> <p>Despr\u00e9s d'estos pasos ja podem vore el Laravel en nom_domini.my</p>"},{"location":"7.2.Laravel_introduccio.html#una-altra-forma-alternativa-de-provar-els-projectes","title":"Una altra forma alternativa de provar els projectes","text":"<p>A trav\u00e9s de l'eina  artisan, tenim una alternativa una mica m\u00e9s r\u00e0pida per a provar els nostres projectes Laravel de manera local. Si optem per aquesta opci\u00f3, podem ometre la creaci\u00f3 del domini, ja que no utilitzarem nginx com a servidor. Nom\u00e9s necessitem realitzar el pasos de configuraci\u00f3  la primera vegada que posem en marxa l'aplicaci\u00f3.</p> <p>Despr\u00e9s, des de l'arrel del projecte, executem aquest comando:</p> <pre><code>php artisan serve\n</code></pre> <p>Aix\u00f2 posar\u00e0 en marxa un xicotet servidor per a provar el projecte, i podrem accedir a ell des de la URL http://localhost:8000, encara que, de totes maneres, en executar el comando ens informar\u00e0 de la URL amb la qual accedir.</p>"},{"location":"7.2.Laravel_introduccio.html#important-un-projecte-laravel","title":"Important un projecte Laravel","text":"<p>Per a \ufb01nalitzar aquesta primera sessi\u00f3, indicarem unes instruccions necess\u00e0ries en el cas que vulguem importar un projecte Laravel a un nou ordinador, descarregant-lo de, per exemple, un repositori GitHub. At\u00e9s que unes certes carpetes i arxius no es pugen a aquest repositori (o no haurien de pujar-se), \u00e9s convenient saber com regenerar aquests elements en la nova ubicaci\u00f3 del projecte.</p>"},{"location":"7.2.Laravel_introduccio.html#larxiu-de-configuracio-de-variables-dentorn-env","title":"L'arxiu de con\ufb01guraci\u00f3 de variables d'entorn .env","text":"<p>Un d'aquests arxius no inclosos \u00e9s l'arxiu .env, que cont\u00e9 informaci\u00f3 sensible, com la contrasenya d'acc\u00e9s a la base de dades. No obstant aix\u00f2, el que s\u00ed que s'inclou \u00e9s una c\u00f2pia inicial d'aquest, en l'arxiu .env.backup o .env.example, depenent de la versi\u00f3 de Laravel que utilitzem. N'hi ha prou amb fer una c\u00f2pia d'aquest arxiu en la carpeta arrel del projecte...</p> <pre><code>cp .env.example .env\n</code></pre> <p>... i despr\u00e9s editar aquest arxiu per a establir la con\ufb01guraci\u00f3 oportuna en el lloc on h\u00e0gem importat el projecte: par\u00e0metres de connexi\u00f3 a la base de dades, i altres variables d'entorn que anirem veient en aquestes sessions.</p>"},{"location":"7.2.Laravel_introduccio.html#la-clau-del-projecte","title":"La clau del projecte","text":"<p>Laravel necessita d'una clau en la variable d'entorn APP_KEY de l'arxiu .env anterior, que per defecte est\u00e0 buida. Aquesta clau \u00e9s un codi aleatori de 32 car\u00e0cters, que Laravel empra per a encriptar cookies. Podem generar una clau amb el comando php artisan (des de l'arrel del projecte):</p> <pre><code>php artisan key:generate\n</code></pre> <p>i ja la tindrem llista en el nostre arxiu .env </p>"},{"location":"7.2.Laravel_introduccio.html#dependencies-php","title":"Depend\u00e8ncies PHP","text":"<p>Un altre dels elements del projecte que no es comparteix en repositoris \u00e9s la carpeta, on v\u00e9nen descarregades les depend\u00e8ncies PHP del nostre projecte. Per defecte, en generar un nou projecte Laravel, es pressuposen algunes d'elles, incloses en l'arxiu    de l'arrel del projecte. Per a tornar-les a instal\u00b7lar on h\u00e0gem clonat el projecte, executem aquest comando des de l'arrel del projecte (suposant que ja tinguem instal\u00b7lat el comando de passos anteriors):</p> <pre><code>composer install\n</code></pre>"},{"location":"7.2.Laravel_introduccio.html#dependencies-javascript","title":"Depend\u00e8ncies Javascript","text":"<p>De la mateixa manera, existeixen algunes depend\u00e8ncies per a la part de client (com per exemple Bootstrap, o jQuery), de\ufb01nidas en l'arxiu package.json en la carpeta  de l'arrel del projecte, i que es troben preinstal\u00b7lades node_modules. Aquesta carpeta, no obstant aix\u00f2, tampoc es comparteix en el repositori, aix\u00ed que per a tornar-la a generar en el projecte clonat, i suposant que tamb\u00e9 tindrem instal\u00b7lada l'eina nmp de passos anteriors, executem el comando seg\u00fcent des de l'arrel del projecte:</p> <pre><code>npm install\n</code></pre>"},{"location":"7.3.Laravel_rutes_vistes.html","title":"FRAMEWORK LARAVEL","text":""},{"location":"7.3.Laravel_rutes_vistes.html#rutes","title":"Rutes","text":"<p>Video</p> <p>Podr\u00edem dir que existeixen dos tipus principals de rutes:</p> <ul> <li> <p>Les rutes web (emmagatzemades a l'arxiu web.php de l'aplicaci\u00f3), que ens permetran carregar diferents vistes en funci\u00f3 de la URL que indique el client.</p> </li> <li> <p>Les rutes API (emmagatzemades en l'arxiu api.php), a trav\u00e9s de les quals de\ufb01nirem diferents serveis REST, com veurem tamb\u00e9 m\u00e9s endavant.</p> </li> </ul> <p>Ens centrarem durant aquesta tema en el primer grup, per la qual cosa editarem el contingut de l'arxiu routes/web.php. Vegem quins tipus de rutes podem *de\ufb01nir, i quines caracter\u00edstiques tenen.</p> <p>Este \u00e9s el punt centralitzat per a la definici\u00f3 de rutes i qualsevol ruta no definida en aquest fitxer no ser\u00e0 v\u00e0lida, generat una excepci\u00f3 (el que retornar\u00e0 un error 404). Les rutes, en la seua forma m\u00e9s senzilla, poden retornar directament un valor des del propi fitxer de rutes, per\u00f2 tamb\u00e9 podran generar la trucada a una vista o a un controlador.</p>"},{"location":"7.3.Laravel_rutes_vistes.html#rutes-simples","title":"Rutes simples","text":"<p>Les rutes simples tenen un nom de ruta fix, i una funci\u00f3 que respon a aquest nom emetent una resposta. Les rutes, a m\u00e9s de definir la URL de la petici\u00f3, tamb\u00e9 indiquen el m\u00e8tode amb el qual s'ha de fer aquesta petici\u00f3. Els dos m\u00e8todes m\u00e9s utilitzats i que comen\u00e7arem veient s\u00f3n les peticions tipus GET i tipus POST. Per exemple, per a definir una petici\u00f3 tipus GET haur\u00edem d'afegir el seg\u00fcent codi al nostre fitxer routes.php:</p> <pre><code>    Route::get('salut', function()\n    { \n        return 'Hola m\u00f3n!'; \n    });\n</code></pre> <p>Aquest codi es llan\u00e7aria quan es realitze una petici\u00f3 tipus GET a la ruta arrel de la nostra aplicaci\u00f3. Si estem treballant en local aquesta ruta seria http://localhost (en el notre cas intranet.my) per\u00f2 quan la web estiga en producci\u00f3 es referiria al domini principal, per exemple: http://www.direcci\u00f3n-de-tu-web.com. </p>"},{"location":"7.3.Laravel_rutes_vistes.html#afegir-parametres-a-les-rutes","title":"Afegir par\u00e0metres a les rutes","text":"<p>Si volem afegir par\u00e0metres a una ruta simplement els hem d'indicar entre claus {} a continuaci\u00f3 de la ruta, de la forma:</p> <pre><code>    Route::get('salut/{nom}', function($nom)\n    {\n    return 'Bon dia, '.$nom; });\n</code></pre> <p>En aquest cas estem definint la ruta /salut/{nom}, on nom \u00e9s requerit i pot ser qualsevol valor. En cas de no especificar cap nom ens redigirir\u00e0 a una p\u00e0gina d'error 404. El par\u00e0metre se li passar\u00e0 a la funci\u00f3, el qual es podr\u00e0 utilitzar (com veurem m\u00e9s endavant) para per exemple obtenir dades de la base de dades, emmagatzemar valors, etc.</p> <p>Tamb\u00e9 podem indicar que un par\u00e0metre \u00e9s opcional simplement afegint el s\u00edmbol ? al final (i en aquest cas no donaria error si no es realitza la petici\u00f3 amb aquest par\u00e0metre):</p> <pre><code>    Route::get('salut/{nom?}', function($nom = 'convidat')\n    {\n        return 'Bon dia, '.$nom; \n    });\n</code></pre>"},{"location":"7.3.Laravel_rutes_vistes.html#validacio-de-parametres","title":"Validaci\u00f3 de par\u00e0metres","text":"<p>Alguns par\u00e0metres caldr\u00e0 que seguisquen un determinat patr\u00f3. Per exemple, un identificador num\u00e8ric nom\u00e9s contindr\u00e0 d\u00edgits. Per a assegurar-nos d'aix\u00f2, podem emprar el m\u00e8tode *where en definir la ruta. A aquest m\u00e8tode li passem dos par\u00e0metres: el nom del par\u00e0metre a validar, i l'expressi\u00f3 regular que ha de complir. En el cas del nom anterior, si volem que nom\u00e9s continga lletres (maj\u00fascules o min\u00fascules), podem fer una cosa aix\u00ed:    </p> <p><pre><code>Route::get('salut/{nom?}', function($nom = \"Convidat\") {\nreturn \"Hola, \" . $nom;\n})-&gt;where('nom', \"[A-Za-z]+\");\n</code></pre> En cas que la ruta no complisca el patr\u00f3, s'obtindr\u00e0 una p\u00e0gina d'error. M\u00e9s endavant s'explicar\u00e0 com podem personalitzar aquestes p\u00e0gines d'error.</p>"},{"location":"7.3.Laravel_rutes_vistes.html#named-routes","title":"Named routes","text":"<p>A vegades pot ser convenient associar un nom a una ruta. Especialment, quan aqueixa ruta formar\u00e0 part d'un enlla\u00e7 en alguna p\u00e0gina del nostre lloc, ja que en un futur la ruta podria canviar, i d'aquesta manera evitem haver d'actualitzar els enlla\u00e7os al nou nom. Per a aix\u00f2, en definir la ruta, li associem amb la funci\u00f3 name el nom que vulguem. Per exemple: </p> <p><pre><code>Route::get('contacte', function() {\nreturn \"P\u00e0gina de contacte\";\n})-&gt;name('ruta_contacte');\n</code></pre> Ara, si volem definir un enlla\u00e7 a aquesta ruta en qualsevol part, n'hi ha prou amb emprar la funci\u00f3 route de Laravel, indicant el nom que li hem assignat a aquesta ruta. Per tant, en lloc de posar aix\u00f2:</p> <p><pre><code>echo '&lt;a href=\"/contacte\"&gt;Contacte&lt;/a&gt;';\n</code></pre> Podem fer alguna cosa com aix\u00f2 un altre, tal com veurem a continuaci\u00f3 quan usem el motor de plantilles Blade:</p> <p><pre><code>&lt;a href=\"{{ \"{{ route('ruta_contacte') \" }}}}\"&gt;Contacte&lt;/a&gt;\n</code></pre> D'aquesta manera, davant futurs canvis en les rutes, nom\u00e9s haurem de canviar la URL en Route::get</p>"},{"location":"7.3.Laravel_rutes_vistes.html#combinacio-delements-en-rutes","title":"Combinaci\u00f3 d'elements en rutes","text":"<p>Podem combinar diverses cl\u00e0usules where en una ruta per a validar diferents par\u00e0metres que puga tindre, i tamb\u00e9 enlla\u00e7ar aquestes crides amb una a la funci\u00f3 name per a nomenar la ruta. Per exemple, la seg\u00fcent ruta espera rebre un nom amb car\u00e0cters, i un id num\u00e8ric, tots dos amb valors per defecte:</p> <pre><code>Route::get('salut/{nom?}/{id?}',\nfunction($nom=\"Convidat\", $id=0)\n{\nreturn \"Hola $nom, el teu codi \u00e9s el $id\";\n})-&gt;where('nom', \"[A-Za-z]+\")\n-&gt;where('id', \"[0-9]+\")\n-&gt;name('salut');\n</code></pre> <p>Si accedim a cadascuna de les seg\u00fcents URLs, obtindrem cadascuna de les respostes indicades:</p> URL Respuesta /salut Hola Convidat, el teu codi \u00e9s el 0 /salut/Ignasi Hola Ignasi, el teu codi \u00e9s el 0 /salut/Ignasi/3 Hola Ignasi, el teu codi \u00e9s el 3 /salut/3 Error 404 (URL incorrecta) <p>Notar que l'\u00faltim cas \u00e9s incorrecte. No podem especificar un id sense haver especificat un nom davant, perqu\u00e8 incompleix el patr\u00f3 de la URL. Es pot deixar un par\u00e0metre om\u00e9s, sempre que els posteriors tamb\u00e9 ho estiguen.</p>"},{"location":"7.3.Laravel_rutes_vistes.html#vistes","title":"Vistes","text":"<p>Video</p> <p>Les vistes s\u00f3n la forma de presentar el resultat (una pantalla del nostre lloc web) de forma visual a l'usuari, el qual podr\u00e0 interactuar amb ell i tornar a realitzar una petici\u00f3. Les vistes a m\u00e9s ens permeten separar tota la part de presentaci\u00f3 de resultats de la l\u00f2gica (controladors) i de la base de dades (models).</p> <p>Per tant no hauran de realitzar cap tipus de consulta ni processament de dades, simplement rebran dades i els prepararan per a mostrar-los com HTML.</p> <p>Fins ara les rutes que hem definit retornen un text simple, excepte la qual ja estava creada per defecte en el projecte, que apuntava a la p\u00e0gina d'inici. Si volgu\u00e9rem retornar contingut HTML, una opci\u00f3 (costosa) seria retornar aquest contingut generat des del propi m\u00e8tode de la ruta, a trav\u00e9s de la instrucci\u00f3 return , per\u00f2 en lloc de fer aix\u00f2 des de dins de la pr\u00f2pia funci\u00f3 de resposta, el m\u00e9s habitual (i recomanable) \u00e9s generar una vista amb el contingut HTML que es vol enviar al client.</p> <p>La forma general de mostrar vistes en Laravel \u00e9s fer que les rutes retornen (return) una determinada vista. Per a aix\u00f2, es pot emprar la funci\u00f3 view de Laravel, indicant el nom de la vista a generar o mostrar. Per defecte, en la carpeta resources/views tenim disponible una vista d'exemple anomenada welcome.blade.php . \u00c9s la que s'utilitza com a p\u00e0gina d'inici en la ruta arrel en routes/web.php :</p> <p><pre><code>Route::get('/', function() {\nreturn view('welcome');\n});\n</code></pre> Notar que no \u00e9s necessari indicar el path o ruta cap a l'arxiu de la vista, ni tampoc l'extensi\u00f3, ja que  Laravel assumeix que per defecte les vistes es troben en la carpeta resources/views , amb l'extensi\u00f3 .blade.php (que fa refer\u00e8ncia al motor de plantilles Blade que veurem a continuaci\u00f3), o simplement amb extensi\u00f3 .php (en el cas de vistes simples que no utilitzen Blade). Podem, per exemple, crear una vista senzilla dins d'aquesta carpeta de vistes (anomenem-la inici.blade.php ), amb un contingut HTML b\u00e0sic:</p> <p><pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Inici&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;P\u00e0gina d'inici&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> I podem utilitzar esta vista com a p\u00e0gina d'inici:</p> <pre><code>Route::get('/', function() {\nreturn view('inicio');\n});\n</code></pre> <p>Les vistes contenen el codi HTML del nostre lloc web, barrejat amb els assets (CSS, imatges, Javascripts, etc. que estaran emmagatzemats en la carpeta public) i una mica de codi PHP (o codi Blade de plantilles, com veurem m\u00e9s endavant) per a presentar les dades d'entrada com un resultat HTML.</p>"},{"location":"7.3.Laravel_rutes_vistes.html#pasar-valor-a-les-vistes","title":"Pasar valor a les vistes","text":"<p>\u00c9s molt habitual passar una certa informaci\u00f3 a unes certes vistes, com per exemple, llistats de dades a mostrar, o dades d'un element en concret. Per exemple, si volem donar un missatge de benvinguda a un nom (suposadament variable), hem d'emmagatzemar el nom en una variable en la ruta, i passar-s'ho a la vista en carregar-la. Aix\u00f2 pot fer-se, per exemple, amb el m\u00e8tode with despr\u00e9s de generar la vista, indicant el nomamb qu\u00e8 l'associarem a la vista, i el valor (variable) associat a aquest nom. En el nostre cas quedaria aix\u00ed:</p> <pre><code>Route::get('/', function() {\n$nombre = \"Nacho\";\nreturn view('inicio')-&gt;with('nombre', $nombre);\n});\n</code></pre> <p>Posteriorment, en la vista, haurem de mostrar el valor d'aquesta variable en algun lloc del codi HTML. Podem emprar PHP tradicional per a recollir aquesta variable:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Inicio&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;P\u00e1gina de inicio&lt;/h1&gt;\n        &lt;p&gt;Bienvenido/a &lt;?php echo $nombre; ?&gt;&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Per\u00f2 \u00e9s m\u00e9s habitual i net emprar una sintaxi espec\u00edfica de Blade, com veurem a continuaci\u00f3. Com a alternatives a l'\u00fas de with comentat abans, tamb\u00e9 podem utilitzar un array associatiu (assignant aix\u00ed diversos noms a diversos valors):</p> <pre><code>return view('inicio')-&gt;with(['nombre' =&gt; $nombre, ...]);\n</code></pre> <p>Aix\u00ed mateix, podem utilitzar aquest mateix array com segon par\u00e0metre de la funci\u00f3 view , i prescindir aix\u00ed de with :</p> <pre><code>return view('inicio', ['nombre' =&gt; $nombre, ...]);\n</code></pre> <p>I tamb\u00e9 podem utilitzar una funci\u00f3 anomenada compact com segon par\u00e0metre de view . A aquesta funci\u00f3 li passem \u00fanicament el nom de la variable i, sempre que la variable associada es cride igual, estableix l'associaci\u00f3 per nosaltres:</p> <pre><code>return view('inicio', compact('nombre'));\n</code></pre> <p>La funci\u00f3 compact admet tants par\u00e0metres com dades vulguem enviar a la vista per separat, cadascun amb el seu nom associat. Si simplement retornarem una vista amb poca informaci\u00f3 associada, o poca l\u00f2gica interna, tamb\u00e9 podem abreujar el codi anterior cridant directament a view , en lloc de route primer, en l'arxiu routes/web.php , i li passem aix\u00ed la informaci\u00f3 associada a la vista:</p> <pre><code>Route::view('/', 'inicio', ['nombre' =&gt; 'Nacho']);\n</code></pre>"},{"location":"7.3.Laravel_rutes_vistes.html#plantilles-mitjancant-blade","title":"Plantilles mitjan\u00e7ant Blade","text":"<p>Laravel utilitza Blade per a la definici\u00f3 de plantilles en les vistes. Aquesta llibreria permet realitzar tot tipus d'operacions amb les dades, a m\u00e9s de la substituci\u00f3 de seccions de les plantilles per un altre contingut, her\u00e8ncia entre plantilles, definici\u00f3 de layouts o plantilles base, etc.</p> <p>Els fitxers de vistes que utilitzen el sistema de plantilles Blade han de tenir l'extensi\u00f3 .blade.php. Aquesta extensi\u00f3 tampoc s'haur\u00e0 d'incloure a l'hora de referenciar una vista des del fitxer de rutes o des d'un controlador. \u00c9s a dir, utilitzarem view('home') tant si el fitxer es diu home.php com home.blade.php.</p> <p>En general el codi que inclou Blade en una vista comen\u00e7ar\u00e0 pels s\u00edmbols @ o {{ \"{{, el qual posteriorment ser\u00e0 processat i preparat per a mostrar-se per pantalla. Blade no afig sobrec\u00e0rrega de processament, ja que totes les vistes s\u00f3n preprocesadas i cachejades, per contra ens brinda utilitats que ens ajudaran en el disseny i modularitzaci\u00f3 de les vistes.</p>"},{"location":"7.3.Laravel_rutes_vistes.html#mostrar-dades","title":"Mostrar dades","text":"<p>El m\u00e8tode m\u00e9s b\u00e0sic que tenim en Blade \u00e9s el de mostrar dades, per a a\u00e7\u00f2 utilitzarem les claus dobles ({{ \"{{ \" }}}}) i dins d'elles escriurem la variable o funci\u00f3 amb el contingut a mostrar:</p> <pre><code>    Hola {{ \"{{ $name \" }}}}.\n</code></pre> <p>Cada vegada que es renderitza una vista en Laravel, s'emmagatzema el contingut PHP generat en storage/framework/views , i nom\u00e9s es torna a re-generar davant un canvi en la vista, amb el que tornar a cridar a una vista ja renderitzada no afecta al rendiment de l'aplicaci\u00f3. Si donem una ullada  a la vista generada amb PHP pla i amb Blade, veurem que hi ha una subtil difer\u00e8ncia entre ambdues, i \u00e9s que amb Blade, en lloc de fer un simple echo per a mostrar el valor de la variable, s'utilitza una funci\u00f3 interm\u00e8dia anomenada e , que evita atacs XSS (Cross Site Scripting), \u00e9s a dir, que s'injecten scripts de Javascript amb la variable a mostrar. En altres paraules, el codi no s'interpreta, i es mostra tal qual. En alguns casos (especialment quan generem contingut HTML des de dins de l'expressi\u00f3 Blade) ens pot interessar que no protegisca contra aquestes injeccions de codi. En aqueix cas, se substitueix la segona clau per una doble exclamaci\u00f3:</p> <pre><code>    Hola {!! $name !!}.\n</code></pre> <p>En general sempre haurem d'usar les claus dobles, especialment si anem a mostrar dades que s\u00f3n proporcionats pels usuaris de l'aplicaci\u00f3. Per tant, aquest \u00faltim m\u00e8tode solament hem d'utilitzar-ho si estem segurs que no volem que s'escape el contingut.</p>"},{"location":"7.3.Laravel_rutes_vistes.html#mostrar-una-dada-sola-si-existeix","title":"Mostrar una dada sola si existeix","text":"<p>Per a comprovar que una variable existeix o t\u00e9 un determinat valor podem utilitzar l'operador ternari de la forma:</p> <pre><code>    {{ \"{{ isset($name) ? $name : 'Valor per defecte' \" }}}}\n</code></pre> <p>O simplement usar la notaci\u00f3 que inclou Blade per a aquesta fi: </p> <pre><code>    {{ \"{{ $name or 'Valor per defecte' \" }}}}\n</code></pre>"},{"location":"7.3.Laravel_rutes_vistes.html#comentaris","title":"Comentaris","text":"<p>Per a escriure comentaris en Blade s'utilitzen els s\u00edmbols {{ \"{{-- i --\" }}}}</p>"},{"location":"7.3.Laravel_rutes_vistes.html#estructures-de-control","title":"Estructures de control","text":"<p>Per a iterar sobre un conjunt de dades (array), podem emprar la directiva @foreach , amb una sintaxi similar al foreach de PHP, per\u00f2 sense necessitat de claus. N'hi ha prou amb finalitzar el bucle amb la directiva @endforeach , d'aquesta manera:</p> <pre><code>&lt;ul&gt;\n    @foreach($elementos as $elemento)\n        &lt;li&gt;{{ \"{{ $elemento \" }}}}&lt;/li&gt;\n    @endforeach\n&lt;/ul&gt;\n</code></pre> <p>En el cas de voler realitzar alguna comprovaci\u00f3 (per exemple, si el array anterior est\u00e0 buit, per a mostrar un missatge pertinent), usem la directiva @if , tancada pel seu corresponent parella @endif . Opcionalment, es pot intercalar una directiva @else per al cam\u00ed alternatiu, o tamb\u00e9 @elseif per a indicar una altra condici\u00f3. L'exemple anterior podria quedar aix\u00ed:</p> <pre><code>&lt;ul&gt;\n    @if($elementos)\n        @foreach($elementos as $elemento)\n            &lt;li&gt;{{ \"{{ $elemento \" }}}}&lt;/li&gt;\n        @endforeach\n    @else\n            &lt;li&gt;No hay elementos que mostrar&lt;/li&gt;\n    @endif\n&lt;/ul&gt;\n</code></pre> <p>Tamb\u00e9 podem comprovar si una variable est\u00e0 definida. En aquest cas, reemplacem la directiva @if per @isset, amb el seu corresponent tancament @endisset.</p> <pre><code>&lt;ul&gt;\n    @isset($elementos)\n        @foreach($elementos as $elemento)\n            &lt;li&gt;{{ \"{{ $elemento \" }}}}&lt;/li&gt;\n        @endforeach\n    @else\n        &lt;li&gt;No hay elementos que mostrar&lt;/li&gt;\n    @endisset\n&lt;/ul&gt;\n</code></pre> <p>No obstant aix\u00f2, amb qualsevol d'aquestes opcions tenim un problema: en el primer cas, si la variable \\$elements no est\u00e0 definida, mostrar\u00e0 un error de PHP. En el segon cas, si la variable s\u00ed que est\u00e0 definida per\u00f2 no cont\u00e9 elements, no es mostrar\u00e0 res per pantalla. Una tercera estructura alternativa que agrupa aquests dos casos (controlar alhora que la variable estiga definida i tinga elements) \u00e9s emprar la directiva @forelse en lloc de @foreach . Aquesta directiva permet una cl\u00e0usula addicional @empty per a indicar qu\u00e8 fer si la col\u00b7lecci\u00f3 no t\u00e9 elements o est\u00e0 sense definir. L'exemple anterior quedaria ara aix\u00ed d'abreujat:</p> <pre><code>&lt;ul&gt;\n    @forelse($elementos as $elemento)\n        &lt;li&gt;{{ \"{{ $elemento \" }}}}&lt;/li&gt;\n    @empty\n        &lt;li&gt;No hay elementos que mostrar&lt;/li&gt;\n    @endforelse\n&lt;/ul&gt;\n</code></pre> <p>En aquesta mena de iteradors ( @foreach o @forelse ), tenim disponible un objecte anomenat \\$loop , amb una s\u00e8rie de propietats sobre el bucle que estem iterant, com per exemple index (posici\u00f3 dins del array per la qual anem), o count (total d'elements), o first i last (booleans que determinen si \u00e9s el primer o \u00faltim element, respectivament), entre altres. Podem veure totes les propietats disponibles en aquest objecte cridant a var_dump :</p> <pre><code>&lt;ul&gt;\n    @forelse($elementos as $elemento)\n        &lt;li&gt;{{ \"{{ $elemento \" }}}} {{ \"{{ var_dump($loop) \" }}}} &lt;/li&gt;\n    @empty\n        &lt;li&gt;No hay elementos que mostrar&lt;/li&gt;\n    @endforelse\n&lt;/ul&gt;\n</code></pre> <p>Si, per exemple, volem determinar si \u00e9s l'\u00faltim element de la llista, i mostrar un missatge o estil especial, podem fer alguna cosa com aix\u00f2:</p> <pre><code>&lt;ul&gt;\n    @forelse($elementos as $elemento)\n        &lt;li&gt;{{ \"{{ $elemento \" }}}}\n            {{ \"{{ $loop-&gt;last ? \"Ultimo elemento\" : \"\" \" }}}}\n        &lt;/li&gt;\n    @empty\n        &lt;li&gt;No hay elementos que mostrar&lt;/li&gt;\n    @endforelse\n&lt;/ul&gt; \n</code></pre> <p>Aquesta s\u00f3n les estructures de control m\u00e9s utilitzades. Ademas d'aquestes Blade defineix algunes m\u00e9s que podem veure directament en la seua documentaci\u00f3</p>"},{"location":"7.3.Laravel_rutes_vistes.html#sobre-els-enllacos-a-altres-rutes","title":"Sobre els enlla\u00e7os a altres rutes","text":"<p>Hem comentat breument en punts anteriors que, gr\u00e0cies a Blade i als noms en les rutes,podem enlla\u00e7ar una vista amb una altra de dues formes: de manera tradicional...</p> <p><pre><code>echo '&lt;a href=\"/contacto\"&gt;Contacte&lt;/a&gt;';\n</code></pre> ... o b\u00e9 emprant la funci\u00f3 route seguida del nom que li hem donat a la ruta:</p> <pre><code>&lt;a href=\"{{ \"{{ route('ruta_contacto') \" }}}}\"&gt;Contacte&lt;/a&gt;\n</code></pre> <p>A m\u00e9s, mitjan\u00e7ant Blade existeix una tercera manera d'enlla\u00e7ar, emprant la funci\u00f3 url , que genera una URL completa fins a la ruta que indiquem:</p> <pre><code>&lt;a href=\"{{ \"{{ url('/contacto') \" }}}}\"&gt;Contacte&lt;/a&gt;\n</code></pre>"},{"location":"7.3.Laravel_rutes_vistes.html#definir-plantilles-comunes","title":"Definir Plantilles comunes","text":"<p>A l'hora de donar homogene\u00eftat a una web, \u00e9s habitual que la cap\u00e7alera, el men\u00fa de navegaci\u00f3 o el peu de p\u00e0gina formen part d'una plantilla que es repeteix en totes les p\u00e0gines del lloc, de manera que evitem haver d'actualitzar totes les p\u00e0gines davant qualsevol possible canvi en aquests elements. Per a crear una plantilla en Blade, creem un arxiu normal i corrent (per exemple, plantilla.blade.php ), en la carpeta de vistes, amb el contingut general de la plantilla. En aquelles zones del document on permetrem contingut variable depenent de la vista en si, afegim una secci\u00f3 anomenada @yield , amb un nom associat. La nostra plantilla podria ser aquesta (notar que es permeten varies @yield amb diferents noms):</p> <p><pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;\n            @yield('titulo')\n        &lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;nav&gt;\n            &lt;!-- ... Men\u00fa de navegaci\u00f3n --&gt;\n        &lt;/nav&gt;\n        @yield('contenido')\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Despr\u00e9s, en cada vista en qu\u00e8 vulguem utilitzar aquesta plantilla, afegim la directiva @*extends de Blade, indicant el nom de plantilla que utilitzarem. Amb la directiva @section , seguida del nom de la secci\u00f3, definim el contingut per a cadascun dels @yield que s'hagen indicat en la plantilla. Finalitzarem cada secci\u00f3 amb la directiva @endsection . Aix\u00ed, per a la nostra p\u00e0gina inicial ( inici.blade.php ), el contingut pot ser ara aquest:</p> <p><pre><code>@extends('plantilla')\n@section('titulo', 'Inicio')\n@section('contenido')\n    &lt;h1&gt;P\u00e1gina de inicio&lt;/h1&gt;\n    Bienvenido/a {{ \"{{ $nombre \" }}}}\n@endsection\n</code></pre> Notar, a m\u00e9s, que a la directiva @section se li pot passar un segon par\u00e0metre amb el contingut d'aqueixa secci\u00f3, i en aquest cas no \u00e9s necessari tancar-la amb @endsection . Aquesta opci\u00f3 \u00e9s \u00fatil per a continguts on no interessen car\u00e0cters en blanc o salts de l\u00ednia innecessaris al principi o al final, com ocorre en l'exemple anterior amb el t\u00edtol (title) de la p\u00e0gina. De la mateixa manera, la nostra vista per al llistat de llibres quedaria d'aquesta manera:</p> <pre><code>@extends('plantilla')\n@section('titulo', 'Listado de libros')\n@section('contenido')\n    &lt;h1&gt;Listado de libros&lt;/h1&gt;\n        &lt;ul&gt;\n        @forelse ($libros as $libro)\n            &lt;li&gt;{{ \"{{ $libro[\"titulo\"] \" }}}}({{ \"{{ $libro[\"autor\"] \" }}}})&lt;/li&gt;\n        @empty\n            &lt;li&gt;No se encontraron libros&lt;/li&gt;\n        @endforelse\n        &lt;/ul&gt;\n@endsection\n</code></pre>"},{"location":"7.3.Laravel_rutes_vistes.html#incloure-vistes-dins-daltres","title":"Incloure vistes dins daltres","text":"<p>Tamb\u00e9 sol ser habitual definir continguts parcials (se solen definir en una subcarpeta partials dins de resources/views ), i incloure'ls en les vistes. Per a aix\u00f2, utilitzarem la directiva @include de Blade. Per exemple, definirem un men\u00fa de navegaci\u00f3. Suposem que aquest men\u00fa est\u00e0 en l'arxiu resources/views/partials/nav.blade.php.</p> <pre><code>&lt;nav&gt;\n    &lt;a href=\"{{ \"{{ route('inici') \" }}}}\"&gt;Inici&lt;/a&gt;\n    &lt;a href=\"{{ \"{{ route('libres_llistat') \" }}}}\"&gt;Llistat de llibres&lt;/a&gt;\n&lt;/nav&gt;\n</code></pre> <p>Per a incloure el men\u00fa en la plantilla anterior, podem fer aix\u00f2 (i eliminar\u00edem el men\u00fa  de la plantilla): <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;\n            @yield('titulo')\n        &lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        @include('partials.nav')\n        @yield('contenido')\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"7.3.Laravel_rutes_vistes.html#estructuras-vistes-en-carpetes","title":"Estructuras vistes en carpetes","text":"<p>Quan l'aplicaci\u00f3 \u00e9s una mica complexa, poden ser necess\u00e0ries diverses vistes, i tindre-les totes en una mateixa carpeta pot ser una cosa dif\u00edcil de gestionar. \u00c9s habitual, com anirem veient en sessions posteriors, estructurar les vistes de la carpeta resources/views en subcarpetas, de manera que, per exemple, cada carpeta es referisca a les vistes d'una entitat o model de l'aplicaci\u00f3, o a un controlador espec\u00edfic. Per renderitzar una vista que est\u00e0 dins d'una carpeta,  haurem d'indicar tamb\u00e9 el nom de la subcarpeta:</p> <pre><code>Route::get('llistat', function() {\n    ...\n    return view('llibres.llistat', compact('llibres'));\n});\n</code></pre> <p>Ac\u00ed tindrem una vista llistat dins d'una carpeta llibres.</p>"},{"location":"7.3.Laravel_rutes_vistes.html#vistes-per-a-pagines-derror","title":"Vistes per a p\u00e0gines d'error","text":"<p>Quan programem, algunes accions que fem provocaran p\u00e0gines d'error amb determinats codis, com per exemple 404 per a p\u00e0gines no trobades. Si volem definir l'aspecte i estructura d'aquestes p\u00e0gines, n'hi ha prou amb crear la vista corresponent en la carpeta resources/views/errors , per exemple , resources/views/errors/404.blade.php per a l'error 404 (anteposem el codi d'error al sufix de la vista).</p> <pre><code>@extends('plantilla')\n@section('titulo', 'Error 404')\n@section('contenido')\n    &lt;h1&gt;Error&lt;/h1&gt;\n    Documento no encontrado\n@endsection\n</code></pre>"},{"location":"7.3.Laravel_rutes_vistes.html#enllacant-amb-css-i-javascript-en-el-client","title":"Enlla\u00e7ant amb CSS i Javascript en el client","text":"<p>Ara que ja tenim una visi\u00f3 bastant completa del que el motor de plantilles Blade pot oferir-nos, arriba el moment d'acabar de perfilar les nostres vistes. Fins ara no hem parlat res d'estils CSS, i aix\u00f2 \u00e9s una cosa que tota vista que es pree ha d'incloure. A m\u00e9s, tamb\u00e9 pot ser necessari en alguns casos incloure alguna llibreria Javascript en el costat del client per a uns certs processaments. Veurem com gestiona Laravel aquests recursos.</p>"},{"location":"7.3.Laravel_rutes_vistes.html#infraestructura-per-a-arxius-css-i-javascript","title":"Infraestructura per a arxius CSS i Javascript.","text":"<p>Per a poder afegir estils CSS o arxius Javascript al nostre projecte Laravel, el framework proporciona ja uns arxius on centralitzar aquestes opcions. En primer lloc, hem de tindre en compte que totes les depend\u00e8ncies de llibreries en la part del client se centralitzen en l'arxiu package.json , disponible en l'arrel del projecte. Inicialment compta ja amb una s\u00e8rie de depend\u00e8ncies pre-afegides. Algunes d'elles s\u00f3n importants, com laravel-mix , i altres pot ser que no les necessitem i les puguem esborrar. \u00c9s recomanable instal\u00b7lar les depend\u00e8ncies quan creguem el projecte, per a tindre-les disponibles, amb aquest comando:</p> <pre><code>npm install\n</code></pre> <p>Aquesta carpeta \u00e9s similar a la carpeta vendor , tamb\u00e9 en l'arrel del projecte, per\u00f2 aquesta \u00faltima cont\u00e9 depend\u00e8ncies PHP (no Javascript). Cap d'aquestes carpetes ha de pujar-se a un repositori git, ja que ambdues poden reconstruir-se amb el corresponent comando d'instal\u00b7laci\u00f3 de npm o de composer, segons el cas, i a m\u00e9s, poden ocupar molt d'espai. A m\u00e9s, d'una banda, tenim l'arxiu resources/css/app.css , o b\u00e9 resources/sass/app.scss (depenent de la versi\u00f3 de Laravel que usem), on podem definir estils CSS propis, o incorporar llibreries externes com veurem despr\u00e9s, utilitzant o b\u00e9 CSS pla o b\u00e9 Sass. </p> <p>D'altra banda, tenim l'arxiu resources/js/app.js per a incloure les nostres pr\u00f2pies funcions en Javascript, o fins i tot funcionalitats externes (a trav\u00e9s de jQuery*, per exemple).</p>"},{"location":"7.3.Laravel_rutes_vistes.html#generacio-automatica-de-css-i-javascript","title":"Generaci\u00f3 autom\u00e0tica de css i javascript","text":"<p>Aquests dos arxius necessiten ser processats per a generar el codi resultant (CSS i Javascript) que formar\u00e0 part de l'aplicaci\u00f3, conjuminant totes les llibreries i funcions que h\u00e0gem especificat. Per a aix\u00f2,es t\u00e9 l'arxiu webpack.mix.js en l'arrel del projecte, que empra l'eina WebPack per a compilar, empaquetar i minificar aquests arxius resultat CSS i Javascript.</p> <pre><code>mix.js('resources/js/app.js', 'public/js')\n.css('resources/sass/app.scss', 'public/css');\n</code></pre> <p>Com podem intuir, des d'aquest arxiu webpack.mix.js es prendr\u00e0 tot el que hi ha en l'arxiu resources/js/app.js i es generar\u00e0 un arxiu optimitzat situat en public/js/app.js . De manera similar, es prendran els estils definits en resources/sass/app.scss o en resources/css/app.css (depenent de la versi\u00f3 de Laravel) i es generar\u00e0 un arxiu CSS optimitzat en public/css/app.css . Per a desencadenar aquest proc\u00e9s, Laravel i WebPack es valen de la llibreria laravel-mix , inclosa en l'arxiu package.json . Per aix\u00f2 \u00e9s important aquesta llibreria, i per aix\u00f2 hem de deixar-la instal\u00b7lada pr\u00e8viament amb el comando npm install que hem explicat abans. Una vegada instal\u00b7lada, per a generar els CSS i Javascript hem d'executar aquest comando des de l'arrel del projecte:</p> <pre><code>npm run dev\n</code></pre> <p>Aix\u00f2 generar\u00e0 els arxius public/css/app.css i public/js/app.js , i despr\u00e9s ja podrem afegir aquests arxius en les nostres vistes, amb alguna cosa com aix\u00f2, respectivament:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/css/app.css\"&gt;\n    &lt;script type=\"text/javascript\" src=\"/js/app.js\"&gt;\n    &lt;/script&gt;\n</code></pre>"},{"location":"7.3.Laravel_rutes_vistes.html#incloure-estils-bootstrap","title":"Incloure estils Bootstrap","text":"<p>Un dels frameworks de disseny web m\u00e9s utilitzats a l'hora d'elaborar una web \u00e9s Bootstrap. En aquest curs no donarem massa nocions sobre ell, per\u00f2 s\u00ed que utilitzarem algunes pinzellades perqu\u00e8 les nostres vistes tinguen un aspecte m\u00e9s professional. Per a incloure aquest framework en Laravel, hem d'incloure una llibreria en el servidor anomenada ui, que s'encarrega d'incorporar diferents eines per a disseny d'interf\u00edcies d'usuari (UI, User Interface).</p> <pre><code>composer require laravel/ui\n</code></pre> <p>Una vegada afegida l'eina, la podem emprar a trav\u00e9s del comando artisan per a incorporar Bootstrap al projecte:</p> <pre><code>php artisan ui bootstrap\n</code></pre> <p>Aix\u00f2 incorporar\u00e0 Bootstrap a l'arxiu package.json , en la secci\u00f3 de depend\u00e8ncies...</p> <p><pre><code>\"devDependencies\": {\n...\n\"bootstrap\": \"^4.0.0\",\n...\n}\n</code></pre> ... i tamb\u00e9 afegir\u00e0 un enlla\u00e7 a aquesta llibreria en l'arxiu resources/sass/app.scss , perqu\u00e8 puguem generar un arxiu CSS optimitzat amb Bootstrap incl\u00f2s: </p> <pre><code>...\n@import '~bootstrap/scss/bootstrap';\n</code></pre> <p>Per a poder utilitzar finalment Bootstrap, hem d'executar novament les instruccions:</p> <pre><code>npm install\nnpm run dev\n</code></pre> <p>La primera instrucci\u00f3 descarregar\u00e0 i instal\u00b7lar\u00e0 Bootstrap en el projecte (en la subcarpeta node_modules), ila segona generar\u00e0 els arxius CSS i Javascript incloent en ells la llibreria Bootstrap. Amb aix\u00f2 ja tindrem disponibles les classes i estils de Bootstrap per a les nostres vistes.</p>"},{"location":"7.3.Laravel_rutes_vistes.html#proves-amb-laravel","title":"Proves amb laravel","text":"<p>En les primeres rutes de la nostra aplicaci\u00f3, utilitzem el navegador per a provar aquestes rutes i URLs. El problema d'aquestes proves en el navegador \u00e9s que no perduren en el temps ni poden executar-se de forma r\u00e0pida / autom\u00e0tica. Aix\u00ed que avui veurem com podem provar el codi que desenvolupem de forma m\u00e9s intel\u00b7ligent, utilitzant el component de proves automatitzades que ve incl\u00f2s amb Laravel.</p>"},{"location":"7.3.Laravel_rutes_vistes.html#directori-de-proves","title":"Directori de proves","text":"<p>Laravel inclou en el directori principal del teu projecte un directori anomenat /tests. En aquest directori anem a escriure codi que es va a encarregar de provar el codi de la resta de l'aplicaci\u00f3. Aquest directori est\u00e0 separat en dos subdirectoris:</p> <ul> <li>El directori Feature on escrivim proves que emulen peticions HTTP al servidor.</li> <li>El directori Unit on escrivim proves que s'encarreguen de provar parts individuals de l'aplicaci\u00f3 (com a classes i m\u00e8todes).</li> </ul>"},{"location":"7.3.Laravel_rutes_vistes.html#escrivint-una-prova","title":"Escrivint una prova","text":"<p>El comanament per a generar noves proves \u00e9s php artisan make:test NombreDeLaPruebaTest En la prova simularem una petici\u00f3 HTTP GET a la URL del m\u00f2dul d'usuaris. Amb assertStatus comprovem que la URL carrega de forma correcta verificant que el status HTTP siga 200. Amb el m\u00e8tode assertSee  comprovem que podem veure el text \u201cUsuaris\u201d:</p> <pre><code>    / @test /\n    function it_loads_the_users_lists_page(){\n        $this-&gt;get(\u2018usuaris)-&gt;assertStatus(200)-&gt;assertSee(\u2018Usuaris\u2019);\n        }\n</code></pre> <p>Perqu\u00e8 PHPUnit execute el m\u00e8tode com una prova, has de col\u00b7locar l'anotaci\u00f3 / @test / abans de la declaraci\u00f3 del m\u00e8tode o col\u00b7locar el prefix test_ en el nom del m\u00e8tode com a tal: </p> <pre><code>    function test_it_loads_the_users_lists_page(\n        {   \n        $this-&gt;get(\u2018usuaris)-&gt;assertStatus(200)-&gt;assertSee(\u2018Usuaris\u2019);\n        }\n</code></pre> <p>En cas contrari el m\u00e8tode NO ser\u00e0 executat com una prova, la qual cosa \u00e9s \u00fatil perqu\u00e8 ens permet agregar m\u00e8todes helpers dins de la nostra classe de proves.</p>"},{"location":"7.3.Laravel_rutes_vistes.html#notes","title":"Notes","text":"<ul> <li>Pots executar les proves amb vendor/bin/phpunit o crear un \u00e0lies per a la consola (\u00e0lies t=vendor/bin/phpunit).</li> <li>Pots llegir sobre els m\u00e8todes d'assercions disponibles en la documentaci\u00f3 de Laravel.</li> </ul>"},{"location":"7.4.Laravel_controladors.html","title":"FRAMEWORK LARAVEL","text":"<ul> <li>Controladors</li> <li>Injecci\u00f3 de depend\u00e8ncies</li> </ul>"},{"location":"7.4.Laravel_controladors.html#controladors","title":"Controladors","text":"<p>Fins al moment hem vist solament com retornar una cadena per a una ruta i com associar una vista a una ruta directament en el fitxer de rutes. Per\u00f2 en general la forma recomanable de treballar ser\u00e0 associar aquestes rutes a un m\u00e8tode d'un controlador. Els controladors permeten estructurar millor el codi de la nostra aplicaci\u00f3. La seua principal utilitat radica a alliberar als arxius de rutes d'haver d'ocupar-se tamb\u00e9 de gestionar una certa l\u00f2gica comuna de les peticions, com l'acc\u00e9s a les dades, validaci\u00f3 de formularis, etc. </p> <p>Com ja vam veure en la secci\u00f3 d'introducci\u00f3, els controladors s\u00f3n el punt d'entrada de les peticions dels usuaris i s\u00f3n els que han de contenir tota la l\u00f2gica associada al processament d'una petici\u00f3, encarregant-se de realitzar les consultes necess\u00e0ries a la base de dades, de preparar les dades i de cridar a la vista corresponent amb aquestes dades.</p>"},{"location":"7.4.Laravel_controladors.html#definicio-de-controladors","title":"Definici\u00f3 de controladors","text":"<p>Per a definir un controlador en la nostra aplicaci\u00f3, hem de tirar m\u00e0 de nou del comando php artisan vist pr\u00e8viament. En concret, utilitzarem l'opci\u00f3 make:controller seguida del nom que li vulguem donar al controlador. T\u00edpicament, els noms de controladors acaben amb el sufix Controller, per la qual cosa podem crear un de prova aix\u00ed:</p> <pre><code>php artisan make:controller PruebaController\n</code></pre> <p>Aix\u00f2 generar\u00e0 una classe buida amb el nom del controlador. Per defecte, els controladors es guarden en la subcarpeta app/Http/Controllers del nostre projecte Laravel.</p>"},{"location":"7.4.Laravel_controladors.html#nota","title":"Nota","text":"<p>Per a que tot funcione correctament hem de descomentar la seg\u00fcent l\u00ednea del RouteServiceProvider en providers</p> <pre><code>protected $namespace = 'App\\\\Http\\\\Controllers';\n</code></pre>"},{"location":"7.4.Laravel_controladors.html#controladors-dun-sol-metode-invoke","title":"Controladors d'un sol m\u00e8tode (invoke)","text":"<p>El comando anterior admet alguns par\u00e0metres addicionals m\u00e9s. Un molt \u00fatil \u00e9s el par\u00e0metre -i , que crea el controlador amb un m\u00e8tode anomenat __invoke , que s'acte executa quan \u00e9s anomenat des d'algun proc\u00e9s d'encaminament. Per exemple, si creem el controlador aix\u00ed:</p> <pre><code>php artisan make:controller PruebaController -i\n</code></pre> <p>Es crear\u00e0 la classe PruebaController en la carpeta app/Http/Controllers , amb un contingut com aquest:</p> <pre><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nclass PruebaController extends Controller\n{\n...\npublic function __invoke(Request $request)\n{\n...\n}\n}\n</code></pre> <p>Dins del m\u00e8tode __invoke podem definir la l\u00f2gica de generar o obtindre les dades que necessita una vista, i renderitzar-la. Per exemple:</p> <pre><code>public function __invoke(Request $request)\n{\n    $datos = array(...);\n    return view('miVista', compact('datos'));\n}\n</code></pre> <p>Aix\u00ed, en l'arxiu de rutes, n'hi ha prou amb definir la ruta que vulguem, i com segon par\u00e0metre del m\u00e8tode get , indicar el nom del controlador que es disparar\u00e0 per a processar aqueixa ruta. Addicionalment, tamb\u00e9 li podem assignar un nom a la ruta, com ja hem fet en exemples anteriors.</p> <pre><code>Route::get('prueba', 'PruebaController')-&gt;name('prueba');\n</code></pre>"},{"location":"7.4.Laravel_controladors.html#controladors-de-multiples-metodes","title":"Controladors de multiples m\u00e8todes","text":""},{"location":"7.4.Laravel_controladors.html#controladors-de-recursos","title":"Controladors de recursos","text":"<p>Si creem un controlador amb l'opci\u00f3 -r en lloc de l'opci\u00f3 -i utilitzada en l'exemple anterior, crear\u00e0 un controlador de recursos ( resources ), i predefinir\u00e0 en ell una s\u00e8rie de m\u00e8todes d'utilitat per a les operacions principals que es poden realitzar sobre una entitat de la nostra aplicaci\u00f3:</p> <ul> <li>index : mostra un llistat dels elements d'aqueixa entitat o recurs</li> <li>create : mostra el formulari per a donar d'alta nous elements</li> <li>store : emmagatzema en la base de dades el recurs creat amb el formulari anterior</li> <li>show : mostra les dades d'un recurs espec\u00edfic (a partir de la seua clau o id).</li> <li>edit : mostra el formulari per a editar un recurs existent</li> <li>update : actualitza en la base de dades el recurs editat amb el formulari anterior</li> <li>destroy : elimina un recurs pel seu identificador.</li> </ul> <p>\u00d2bviament, el codi de tots aquests m\u00e8todes apareixer\u00e0 buit al principi, i els haurem d'emplenar amb les operacions corresponents m\u00e9s endavant. Si volem utilitzar un controlador d'aquest tipus, i cridar a algun dels seus m\u00e8todes des d'alguna ruta, ja no n'hi ha prou amb posar el nom del controlador, com f\u00e9iem abans amb els de tipus invoke, ja que ara hi ha m\u00e9s d'un m\u00e8tode que triar. El que farem ser\u00e0 posar el nom del controlador, seguit d'una arrova @ i el nom del m\u00e8tode a invocar. Per exemple:</p> <pre><code>Route::get('prueba', 'PruebaController@index')-&gt;name('listado_prueba');\n</code></pre>"},{"location":"7.4.Laravel_controladors.html#controladors-api","title":"Controladors API","text":"<p>Com a alternativa als controladors de recursos vistos abans, podem crear els controladors amb l'opci\u00f3 --api. Crear\u00e0 un controlador amb els mateixos m\u00e8todes que el de recursos, excepte els m\u00e8todes create i edit , encarregats de mostrar els formularis de creaci\u00f3 i edici\u00f3 de recursos, ja que en les APIs aquests formularis no s\u00f3n necessaris, com veurem en sessions posteriors.</p>"},{"location":"7.4.Laravel_controladors.html#reanomenant-les-vistes","title":"Reanomenant les vistes","text":"<p>A mesura que el projecte creix, generarem un bon nombre de vistes associades a controladors, i \u00e9s necessari estructurar aquestes vistes d'una forma adequada per a poder-les identificar r\u00e0pidament. Una convenci\u00f3 que podem seguir \u00e9s nomenar les vistes a partir del controlador o model al qual fan refer\u00e8ncia, i a l'operaci\u00f3 que realitzen. Per exemple, si tenim un controlador anomenat PruebaController , se suposa que actuar\u00e0 sobre una taula anomenada prueba (ho veurem m\u00e9s endavant, en la sessi\u00f3 d'acc\u00e9s a dades). I, podem emmagatzemar les vistes en la subcarpeta resources/views/pruebas , i definir dins les vistes associades a cada operaci\u00f3 del controlador que tinguem definida. Per exemple: index.blade.php show.blade.php ...</p> <p>Paral\u00b7lelament, cada vegada que anem a carregar una vista des d'algun controlador o ruta, farem refer\u00e8ncia a aquest nom.</p>"},{"location":"7.4.Laravel_controladors.html#unint-totes-les-rutes-dun-controlador","title":"Unint totes les rutes dun controlador","text":"<p>Al final de tot el proc\u00e9s d'implementaci\u00f3 d'un controlador (de recursos o de API) tindrem en l'arxiude rutes una dedicada a cada m\u00e8tode del controlador (una per a index , una altra per a show , etc.). Aquestes rutes poden agrupar-se en una sola usant el m\u00e8tode resource de la classe Route , en lloc de get, indicant-li com a par\u00e0metres el nom base de la ruta, i el controlador que s'encarregar\u00e0 d'ella:</p> <pre><code>Route::resource('catalog', 'CatalogController');\n</code></pre> <p>La ruta anterior definir\u00e0 una ruta GET cap a /catalog , atesa pel m\u00e8tode index del controlador,una altra ruta GET cap a /catalog/{id} atesa pel m\u00e8tode show del controlador... etc. Tamb\u00e9 podem utilitzar el m\u00e8tode only per a indicar per a quins m\u00e8todes volem rutes:</p> <pre><code>Route::resource('catalog', 'CatalogController')-&gt;only(['index', 'show']);\n</code></pre> <p>Des del costat oposat, tenim disponible el m\u00e8tode *except per a indicar que es generen totes les rutes excepte aquelles per als m\u00e8todes indicats:</p> <pre><code>Route::resource('catalog', 'catalogController')-&gt;except(['update', 'edit']);\n</code></pre> <p>Amb els controladors de tipus API tamb\u00e9 podem generar autom\u00e0ticament totes les rutes per als seus m\u00e8todes, utilitzant el m\u00e8tode apiResource de la classe Route , en lloc del m\u00e8tode resource empleat abans:</p> <pre><code>Route::apiResource('prueba', 'PruebaController');\n</code></pre>"},{"location":"7.4.Laravel_controladors.html#controladors-i-espais-de-noms","title":"Controladors i espais de noms","text":"<p>Tamb\u00e9 podem crear sub-carpetes dins de la carpeta Controllers per a organitzar-nos millor. En aquest cas, l'estructura de carpetes que creem no tindr\u00e0 res a veure amb la ruta associada a la petici\u00f3 i, de fet, a l'hora de fer refer\u00e8ncia al controlador \u00fanicament haurem de fer-ho a trav\u00e9s del seu espai de noms.</p> <p>Com hem vist en referenciar el controlador en el fitxer de rutes \u00fanicament hem d'indicar el seu nom i no tota la ruta ni l'espai de noms App\\Http\\Controllers. A\u00e7\u00f2 \u00e9s perqu\u00e8 el servei encarregat de carregar les rutes afig autom\u00e0ticament l'espai de noms arrel per als controladors.  Si fiquem tots els nostres controladors dins del mateix espai de noms no haurem d'afegir res m\u00e9s. Per\u00f2 si decidim crear sub-carpetes i organitzar els nostres controladors en sub-espais de noms, llavors s\u00ed que haurem d'afegir aqueixa part.</p> <p>Per exemple, si vam crear un controlador en App\\Http\\Controllers\\Photos\\AdminController, llavors per a registrar una ruta fins a aquest controlador haur\u00edem de fer:</p> <pre><code>    Route::get('foo', 'Photos\\Admincontroller@method');\n</code></pre>"},{"location":"7.4.Laravel_controladors.html#injeccio-de-dependencies","title":"Injecci\u00f3 de depend\u00e8ncies","text":"<p>El concepte d'injecci\u00f3 de depend\u00e8ncies \u00e9s molt habitual en l'\u00fas de frameworks. Consisteix en un mecanisme que facilita recursos als diferents components de l'aplicaci\u00f3, i \u00e9s una cosa que ja hem utilitzat, sense saber-ho, en els m\u00e8todes que s'han generat per als controladors. Per exemple, quan definim un m\u00e8tode en un controlador que necessita processar una petici\u00f3, se li passa com a par\u00e0metre un objecte de tipus Request. Autom\u00e0ticament, Laravel processa el tipus de dada i obt\u00e9 l'objecte associat (en aquest cas, la petici\u00f3 del client).</p> <pre><code>class PruebaController extends Controller\n{\n    ...\n    public function store(Request $request)\n    {\n        ...\n    }\n}\n</code></pre>"},{"location":"7.4.Laravel_controladors.html#exemple-la-resposta","title":"Exemple: La resposta","text":"<p>Igual que tenim un objecte Request per a obtindre dades de la petici\u00f3, tamb\u00e9 existeix un Response per a gestionar la resposta. Laravel proporciona un m\u00e8tode response al qual li podem passar diversos par\u00e0metres:</p> <ol> <li>El contingut de la resposta</li> <li>El codi d'estat HTTP de resposta (si no s'especifica, per defecte \u00e9s 200)</li> <li>Un array amb les cap\u00e7aleres de resposta (per defecte est\u00e0 buit).</li> </ol> <p>Aix\u00ed, si per exemple volem emetre una resposta determinada amb el seu codi d'estat des d'un controlador, podem fer aix\u00f2 (per exemple, per a un codi 201):</p> <p><pre><code>response(\"Mensaje de respuesta\", 201);\n</code></pre> Les cap\u00e7aleres poden especificar-se com un array, o enlla\u00e7ant anomenades al m\u00e8tode header (una per a cada cap\u00e7alera):</p> <p><pre><code>response(\"Mensaje de respuesta\", 201)\n-&gt;header('Cabecera1', 'Valor1')\n-&gt;header('Cabecera2', 'Valor2');\n</code></pre> En el cas de voler retornar un objecte com a resposta, podem emprar el m\u00e8tode json de la resposta (m\u00e9s endavant veurem que tots els objectes emesos directament al client s'envien en format JSON), i aix\u00ed podrem adjuntar un codi d'estat diferent de 200:</p> <pre><code>return response()-&gt;json(['datos' =&gt; datos], 201)\n-&gt;header('Cabecera1', 'Valor1')\n...;\n</code></pre>"},{"location":"7.4.Laravel_controladors.html#utilitzar-la-resposta-per-fer-redireccions","title":"Utilitzar la resposta per fer redireccions","text":"<p>Existeix tamb\u00e9 un m\u00e8tode redirect que podem emprar per a redirigir a una ruta des d'una altra,b\u00e9 especificant la ruta com a par\u00e0metre... <pre><code>redirect('/');\n</code></pre></p> <p>... o b\u00e9 indicant una ruta amb nom:</p> <pre><code>redirect()-&gt;route('inicio');\n</code></pre> <p>... O si volem tornar a la ruta anterior simplement podem usar el m\u00e8tode back: </p> <pre><code>    return back();\n</code></pre> <p>Podem passar valors a la seg\u00fcent redirecci\u00f3, emmagatzemant-los en sessi\u00f3 amb el m\u00e8tode with , encara que aquests valors es perdran en la seg\u00fcent petici\u00f3 (no es queden emmagatzemats en sessi\u00f3):</p> <pre><code>redirect()-&gt;route('inicio')\n-&gt;with('mensaje', 'Mensaje enviado correctamente');\n</code></pre> <p>Per a accedir a aquest missatge des de la vista afectada, hem d'utilitzar la funci\u00f3 session :</p> <pre><code>@if(session()-&gt;has('mensaje'))\n    {{ \"{{  session('mensaje') \" }}}}\n@endif\n</code></pre> <p>Finalment, notar que si fem la redirecci\u00f3 des de dins d'un m\u00e8tode d'un controlador (per exemple, per a redigir a una ruta des d'una altra), haurem de retornar ( return ) el resultat d'aqueixa redirecci\u00f3 perqu\u00e8 fa\u00e7a efecte:</p> <pre><code>class LibroController extends Controller\n{\n    public function index()\n    {\n        ...\n    }\n    public function store(...)\n    {\n        ...\n        return redirect()-&gt;route('libros.index');\n    }\n}\n</code></pre>"},{"location":"7.4.Laravel_controladors.html#redireccio-amb-els-valors-de-la-peticio","title":"Redirecci\u00f3 amb els valors de la petici\u00f3","text":"<p>Les redireccions se solen utilitzar despr\u00e9s d'obtenir algun error en la validaci\u00f3 d'un formulari o despr\u00e9s de processar alguns par\u00e0metres d'entrada. En aquest cas, perqu\u00e8 en mostrar el formulari amb els errors produ\u00efts puguem afegir les dades que havia escrit l'usuari haurem de tornar a enviar els valors enviats amb la petici\u00f3 usant el m\u00e8tode withInput():</p> <pre><code>    return redirect('form')-&gt;withInput();\n    // O per a reexpedir les dades d'entrada excepte alguns:\n    return redirect('form')-&gt;withInput($request-&gt;except('password'));\n</code></pre>"},{"location":"7.4.Laravel_controladors.html#exemplehelpers","title":"Exemple:Helpers","text":"<p>Per a acabar aquesta introducci\u00f3 al que suposa la injecci\u00f3 de depend\u00e8ncies en frameworks de desenvolupament, farem \u00fas d'una eina que ens pot ser \u00fatil en algunes situacions: els helpers. Un helper \u00e9s b\u00e0sicament una funci\u00f3 d'utilitat que podem voler utilitzar en diversos punts de la nostra web, i que necessitem tindre localitzada i compartida. Per exemple, imaginem que volem ressaltar en el nostre men\u00fa de navegaci\u00f3 l'opci\u00f3 que tenim actualment visible. Per a aix\u00f2, podem definir una classe CSS amb l'estil que vulguem per a ressaltar (aix\u00f2 ho farem a part, en els arxius CSS del projecte), i despr\u00e9s utilitzar aqueixa classe CSS en una condici\u00f3 per a cada men\u00fa de navegaci\u00f3.</p> <p>Per exemple, suposem que la classe CSS per a identificar el men\u00fa actiu es diu actiu . En aquest cas, per a un men\u00fa de diverses opcions com aquest, n'hi ha prou amb utilitzar el m\u00e8tode routeIs de la petici\u00f3 ( request ) per a comprovar si la ruta coincideix amb cada men\u00fa, i mostrar-lo com a actiu o no, usant un operador ternari de comparaci\u00f3:</p> <p><pre><code>&lt;nav&gt;\n    &lt;ul&gt;\n        &lt;li class=\"{{ \"{{  request()-&gt;routeIs('inicio') ? 'activo' : '' \" }}}}\"&gt;\n            &lt;a href=\"/\"&gt;Inicio&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li class=\"{{ \"{{  request()-&gt;routeIs('contacto') ? 'activo' : '' \" }}}}\"&gt;\n            &lt;a href=\"/contacto\"&gt;Contacto&lt;/a&gt;\n        &lt;/li&gt;\n        ...\n    &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre> Aquesta caracter\u00edstica tamb\u00e9 funciona si les rutes tenen par\u00e0metres. Podem, en canvi, traure fora de la vista la l\u00f2gica d'establir un camp com a actiu o no. Per a aix\u00f2, creem un arxiu d'utilitat o helper. Ho podem cridar helpers.php , i situar-ho en la mateixa carpeta app, dins d'una carpeta Helpers. Dins, definim la funci\u00f3 que ens retornar\u00e0 si una ruta est\u00e0 activa o no, a partir del seu nom:</p> <pre><code>function setActivo($nombreRuta)\n{\n    return request()-&gt;routeIs($nombreRuta) ? 'activo' : '';\n}\n</code></pre> <p>I d'aquesta manera, la nostra vista simplement es dedica a cridar a aquesta funci\u00f3 per a cada element del men\u00fa:</p> <pre><code>&lt;nav&gt;\n    &lt;ul&gt;\n        &lt;li class=\"{{ \"{{  setActivo('inicio') \" }}}}\"&gt;\n            &lt;a href=\"/\"&gt;Inicio&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li class=\"{{ \"{{  setActivo('contacto') \" }}}}\"&gt;\n            &lt;a href=\"/contacto\"&gt;Contacto&lt;/a&gt;\n        &lt;/li&gt;\n        ...\n    &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre> <p>En el cas de voler mantindre l'enlla\u00e7 actiu per a qualsevol subruta a partir de l'original (per exemple, quan estem veient la fitxa d'un registre a partir del llistat general, podem utilitzar el wildcard d'asterisc * ):</p> <pre><code>&lt;li class=\"{{ \"{{  setActivo('peliculas.*') \" }}}}\"&gt;\n    &lt;a href=\"{{ \"{{  route('peliculas') \" }}}}\"&gt;Peliculas&lt;/a&gt;\n&lt;/li&gt;\n</code></pre> <p>No obstant aix\u00f2, perqu\u00e8 Laravel carregue l'arxiu helpers.php que acabem de crear, com no \u00e9s una classe, hem d'indicar-ho expl\u00edcitament (Laravel c\u00e0rrega autom\u00e0ticament totes les classes de la carpeta app , per\u00f2 no arxius solts que no siguen classes). Podem fer-ho amb l'autoloader del composer.json de l'arrel del nostre projecte. En la secci\u00f3 autoload cal afegir una secci\u00f3 files amb un array amb els arxius que vulguem que es carreguen tamb\u00e9:</p> <pre><code>    \"autoload\": {\n    \"classmap\": [ ... ],\n    \"psr-4\": { ... },\n    \"files\": [\"app/helpers.php\"]\n    },\n</code></pre> <p>Despr\u00e9s d'efectuar el canvi, hem de dir-li a *composer que torne a compilar l'acte carregador. Des de la carpeta del projecte, executem aquest comando:</p> <pre><code>composer dump-autoload\n</code></pre>"},{"location":"7.4.Laravel_controladors.html#helperserviceprovider","title":"HelperServiceProvider","text":"<p>Per\u00f2 la millor forma de fer-ho per a que les funcions d'aquest fitxer siguen visibles en l'aplicaci\u00f3 \u00e9s a crear un ServiceProvider i a registrar-lo:</p> <pre><code>php artisan make:provider HelperServiceProvider\n</code></pre> <p>Crear\u00e0 un fitxer en la carpeta Providers. L'editem per afegir el nostre Helper.</p> <pre><code>    /**\n         * Register services.\n         *\n         * @return void\n         */\n        public function register()\n        {\n            require_once base_path() . '/app/Helpers/myHelpers.php';\n        }\n</code></pre> <p>I ara registrem el ServiceProvider en el fitxer config/app.php</p> <pre><code>'providers' =&gt; [\n\n        /*\n         * Laravel Framework Service Providers...\n         */\n        Illuminate\\Auth\\AuthServiceProvider::class,\n\n        .....\n\n        /*\n         * Package Service Providers...\n         */\n\n        /*\n         * Application Service Providers...\n         */\n        App\\Providers\\AppServiceProvider::class,\n        App\\Providers\\AuthServiceProvider::class,\n        // App\\Providers\\BroadcastServiceProvider::class,\n        App\\Providers\\EventServiceProvider::class,\n        App\\Providers\\RouteServiceProvider::class,\n        App\\Providers\\HelperServiceProvider::class,\n\n    ],\n</code></pre> <p>I com cada volta que toquen un fitxer de configuraci\u00f3 executem</p> <pre><code>php artisan config:cache\n</code></pre>"},{"location":"7.5.Laravel_models.html","title":"FRAMEWORK LARAVEL","text":""},{"location":"7.5.Laravel_models.html#base-de-dades","title":"Base de dades","text":"<p>Laravel facilita la configuraci\u00f3 i l'\u00fas de diferents tipus de base de dades: MySQL, Postgres, SQLite i SQL Server. En el fitxer de configuraci\u00f3 (config/database.php) hem d'indicar tots els par\u00e0metres d'acc\u00e9s a les nostres bases de dades i a m\u00e9s especificar com \u00e9s la connexi\u00f3 que s'utilitzar\u00e0 per defecte. En Laravel podem fer \u00fas de diverses bases de dades alhora, encara que siguen de diferent tipus. Per defecte s'accedir\u00e0 a la qual especifiquem en la configuraci\u00f3 i si volem accedir a una altra connexi\u00f3 ho haurem d'indicar expressament en realitzar la consulta.</p> <p>En aquest cap\u00edtol veurem com configurar una base de dades, com crear taules i especificar els seus camps des de codi, com inicialitzar la base de dades i com construir consultes tant de forma directa com a trav\u00e9s del ORM anomenat Eloquent.</p>"},{"location":"7.5.Laravel_models.html#configuracio-inicial","title":"Configuraci\u00f3 inicial","text":""},{"location":"7.5.Laravel_models.html#configuracio-de-la-base-de-dades","title":"Configuraci\u00f3 de la Base de dades","text":"<p>El primer que hem de fer per a treballar amb bases de dades \u00e9s completar la configuraci\u00f3. Com a exemple anem a configurar l'acc\u00e9s a una base de dades tipus MySQL. Si editem el fitxer amb la configuraci\u00f3 config/database.php podem veure en primer lloc la seg\u00fcent l\u00ednia:</p> <pre><code>'default' =&gt; env('DB_CONNECTION', 'mysql'),\n</code></pre> <p>Aquest valor indica el tipus de base de dades a utilitzar per defecte. Com vam veure en el primer cap\u00edtol Laravel utilitza el sistema de variables d'entorn per a separar les diferents configuracions d'usuari o de m\u00e0quina.  El m\u00e8tode env('DB_CONNECTION', 'mysql') el que fa \u00e9s obtenir el valor de la variable DB_CONNECTION del fitxer .env. En cas que aquesta variable no estiga definida retornar\u00e0 el valor per defecte mysql.</p> <p>En aquest mateix fitxer de configuraci\u00f3, dins de la secci\u00f3 connections, podem trobar tots els camps utilitzats per a configurar cada tipus de base de dades, en concret la base de dades tipus mysql t\u00e9 els seg\u00fcents valors:</p> <pre><code>    'mysql' =&gt; [\n            'driver' =&gt; 'mysql',\n            'host' =&gt; env('DB_HOST', '127.0.0.1'),\n            'port' =&gt; env('DB_PORT', '3306'),\n            'database' =&gt; env('DB_DATABASE', 'forge'),\n            'username' =&gt; env('DB_USERNAME', 'forge'),\n            'password' =&gt; env('DB_PASSWORD', ''),\n            'unix_socket' =&gt; env('DB_SOCKET', ''),\n            'charset' =&gt; 'utf8mb4',\n            'collation' =&gt; 'utf8mb4_unicode_ci',\n            'prefix' =&gt; '',\n            'prefix_indexes' =&gt; true,\n            'strict' =&gt; true,\n            'engine' =&gt; null,\n        ],\n</code></pre>"},{"location":"7.5.Laravel_models.html#contrasenya-dacces","title":"Contrasenya d'acc\u00e9s","text":"<p>Com es pot veure, b\u00e0sicament els camps que hem de configurar per a usar la nostra base de dades s\u00f3n: host, database, username i password. El host ho podem deixar com est\u00e0 si anem a usar una base de dades local, mentre que els altres tres camps s\u00ed que hem d'actualitzar-los amb el noms de la base de dades a utilitzar i l'usuari i la contrasenya d'acc\u00e9s. Per a posar aquests valors obrim el fitxer .env de l'arrel del projecte i els actualitzem:</p> <pre><code>DB_CONNECTION=mysql \nDB_HOST=localhost \nDB_DATABASE=nom-base-de-dades \nDB_USERNAME=nom-de-usuari\nDB_PASSWORD=contrasenya-de-acc\u00e9s\n</code></pre>"},{"location":"7.5.Laravel_models.html#crear-la-base-de-dades","title":"Crear la base de dades","text":"<p>L'\u00fanic pas necessari des de fora de Laravel per a accedir a la base de dades ser\u00e0 crear-la. La resta d'operacions(creaci\u00f3 de taules, camps, claus, relacions, dades, etc) es podran fer des del propi Laravel, com anirem veient a continuaci\u00f3. La base de dades podem crear-la a trav\u00e9s d'algun administrador que tinguem disponible (per exemple, phpMyAdmin per a bases de dades MySQL), o b\u00e9 per l\u00ednia de comandos, connectant amb el SGBD en q\u00fcesti\u00f3 i creant la base de dades.</p>"},{"location":"7.5.Laravel_models.html#migracions","title":"Migracions","text":"<p>Les migracions s\u00f3n un sistema de control de versions per a bases de dades. Permeten que un equip treballe sobre una base de dades afegint i modificant camps, mantenint un hist\u00f2ric dels canvis realitzats i de l'estat actual de la base de dades. </p> <p>Les migracions s'utilitzen de forma conjunta amb l'eina Schema builder (que veurem en la seg\u00fcent secci\u00f3) per a gestionar l'esquema de base de dades de l'aplicaci\u00f3.</p> <p>La forma de funcionar de les migracions \u00e9s crear fitxers (PHP) amb la descripci\u00f3 de la taula a crear i posteriorment, si es vol modificar aquesta taula s'afegiria una nova migraci\u00f3 (un nou fitxer PHP) amb els camps a modificar.</p> <p>Artisan inclou comandos per a crear migracions, per a executar les migracions o per a fer rollback de les mateixes (tornar arrere).</p>"},{"location":"7.5.Laravel_models.html#estructura-de-les-migracions","title":"Estructura de les migracions","text":"<p>Per defecte, Laravel porta unes migracions predefinides, que es troben en la carpeta database/migrations . Cadascuna t\u00e9 un nom d'arxiu que comen\u00e7a per la data en qu\u00e8 es va fer, seguida d'una breu descripci\u00f3 del que cont\u00e9 (creaci\u00f3 de la taula d'usuaris, reinicialitze de contrasenyes...). Pot ser que algunes d'aquestes migracions no ens vagen a ser necess\u00e0ries, amb el que podem esborrar-les directament, i pot ser que altres (especialment la creaci\u00f3 de la taula d'usuaris) s\u00ed que ens servisca, per\u00f2 amb altres camps, amb el que haurem d'editar-la, com veurem a continuaci\u00f3. Si examinem el contingut d'una migraci\u00f3, totes han de tindre dos m\u00e8todes:</p> <ul> <li>up : permet agregar taules, columnes o \u00edndexs a la base de dades</li> <li>down : reverteix el fet pel m\u00e8tode anterior</li> </ul> <p>Si observem el contingut d'un m\u00e8tode up dels quals v\u00e9nen predefinits per a crear una taula, veiem que s'utilitzen diferents m\u00e8todes per a definir els tipus de dades de cada camp de la taula, com per exemple id() per a camps que puguen contindre sencers autoincrementales, o string() per a camps de tipus text. A m\u00e9s, existeixen altres m\u00e8todes modificadors per a agregar propietats addicionals, com per exemple unique() per a indicar valors \u00fanics (claus alternatives), o nullable() per a indicar que un camp admet nuls. Ac\u00ed tenim un exemple de m\u00e8tode up* :</p> <p><pre><code>public function up()\n{\n    Schema::create('usuarios', function(BluePrint $tabla) {\n        $tabla-&gt;id();\n        $tabla-&gt;string('nombre');\n        $tabla-&gt;string('email')-&gt;unique();\n        ...\n        $tabla-&gt;timestamps();\n    });\n}\n</code></pre> Per defecte, com veiem en els exemples que es proporcionen, els esquemes es creen amb un id autonum\u00e8ric, i uns timestamps per a indicar la data de creaci\u00f3 i de modificaci\u00f3 de cada registre, i que Laravel gestiona de manera autom\u00e0tica quan inserim o actualitzem continguts, la qual cosa resulta molt \u00fatil.</p> <p>Sobre aquesta base, podem afegir o llevar els camps que vulguem. Per a veure els tipus disponibles per a les columnes de la taula, podem visitar la documentaci\u00f3 de Laravel sobre migracions, en concret buscarem el subapartat Available Column Types. </p> <p>Conv\u00e9 tindre present, per exemple, que el tipus string que hem utilitzat en l'exemple anterior t\u00e9 una limitaci\u00f3 de 255 car\u00e0cters. Per a textos m\u00e9s grans, es pot emprar el tipus text (20.000 car\u00e0cters aproximadament) o longText . Podem especificar una clau prim\u00e0ria amb el m\u00e8tode primary , al qual li podem passar o b\u00e9 el nom del camp clau, o un array de camps clau, en el cas que aquesta siga composta.  Per defecte, els camps de tipus id s'acte-estableixen com a claus prim\u00e0ries.</p> <pre><code>$table-&gt;primary(['campo1', 'campo2']);\n</code></pre>"},{"location":"7.5.Laravel_models.html#crear-una-nova-migracio","title":"Crear una nova migraci\u00f3","text":"<p>Per a crear una nova migraci\u00f3 s'utilitza el comando de Artisan make:migration, al com li passarem el nom del fitxer a crear i el nom de la taula:</p> <pre><code>    php artisan make:migration nom_migracio\n</code></pre> <p>A\u00e7\u00f2 ens crear\u00e0 un fitxer de migraci\u00f3 en la carpeta database/migrations amb el nom _nom_migracio.php. En afegir un timestamp a les migracions el sistema sap l'ordre en el qual ha d'executar (o desfer) les mateixes. <p>Notar que Laravel ja assigna autom\u00e0ticament la data de la migraci\u00f3, nom\u00e9s hem d'especificar el nom descriptiu d'aquesta. A m\u00e9s, si Laravel detecta la paraula create en el nom de la migraci\u00f3, finalitzada en table, intueix que \u00e9s per a crear una taula nova.  En canvi, si detecta la paraula to (entre altres), i al final la paraula table, intueix que s'alterar\u00e0 o modificar una taula existent. Aix\u00f2 \u00e9s gr\u00e0cies a la classe TableGuesser incorporada en Laravel, que detecta uns certs patrons en els noms de migracions.</p> <p>La difer\u00e8ncia entre la creaci\u00f3 i la modificaci\u00f3 \u00e9s que en el m\u00e8tode up de la migraci\u00f3 s'utilitzar\u00e0 Schema::create o Schema::table sobre la taula en q\u00fcesti\u00f3, respectivament.</p> <p>En qualsevol cas, tamb\u00e9 podem especificar un par\u00e0metre addicional en el comando de migraci\u00f3 per a indicar si volem crear o modificar una taula, i d'aquesta manera podem definir el nom de la migraci\u00f3 en l'idioma que vulguem, i sense restriccions de patrons. Aquestes dues migracions creen una taula (comandes) i modifiquen una altra (usuaris), respectivament:</p> <p><pre><code>php artisan make:migration crear_tabla_pedidos --create=pedidos\nphp artisan make:migration nuevo_campo_usuario --table=usuarios \n</code></pre> En el cas de la segona migraci\u00f3, si, per exemple, volem afegir una columna amb el n\u00famero de tel\u00e8fon  dels usuaris, pot quedar aix\u00ed (tant el m\u00e8tode up com el down ):</p> <pre><code>public function up()\n{\n    Schema::table('usuarios', function(Blueprint $tabla)    {\n        $tabla-&gt;string('telefono')-&gt;nullable();\n    });\n}\n\npublic function down()\n{\n    Schema::table('usuarios', function(Blueprint $tabla)    {\n        $tabla-&gt;dropColumn('telefono');\n    });\n}\n</code></pre> <p>Si volem que el camp en q\u00fcesti\u00f3 estiga en un ordre concret, podem usar el m\u00e8tode after per a indicar darrere de quin camp volem posar-ho (en el m\u00e8tode up ):</p> <pre><code>$tabla-&gt;string('telefono')-&gt;after('email')-&gt;nullable();\n</code></pre>"},{"location":"7.5.Laravel_models.html#executar-i-esborrat-de-migracions","title":"Executar i esborrat de migracions","text":"<p>Despr\u00e9s de crear una migraci\u00f3 i de definir els camps de la taula (en la seg\u00fcent secci\u00f3 veurem com especificar a\u00e7\u00f2) hem de llan\u00e7ar la migraci\u00f3 amb el seg\u00fcent comando:</p> <pre><code>php artisan migrate\n</code></pre> <p>Aquest comanament aplicar\u00e0 la migraci\u00f3 sobre la base de dades. Si hi haguera m\u00e9s d'una migraci\u00f3 pendent s'executaran totes. Per a cada migraci\u00f3 es dir\u00e0 al seu m\u00e8tode up perqu\u00e8 creu o modifique la base de dades. Posteriorment en cas que vulguem desfer els \u00faltims canvis podrem executar:</p> <pre><code>php artisan migrate:rollback\n</code></pre> <p>O si volem desfer totes les migracions </p> <pre><code>php artisan migrate:reset\n</code></pre> <p>Un comanament interessant quan estem desenvolupant un nou lloc web \u00e9s migrate:refresh, el qual desfar\u00e0 tots els canvis i tornar a aplicar les migracions:</p> <pre><code>php artisan migrate:fresh\n</code></pre> <p>A m\u00e9s si volem comprovar l'estat de les migracions, per a veure les que ja estan instal\u00b7lades i les que queden pendents, podem executar:</p> <pre><code>php artisan migrate:status\n</code></pre>"},{"location":"7.5.Laravel_models.html#migracio-inversa","title":"Migraci\u00f3 inversa","text":"<p>Si tenim la base de dades i volem crear les migracions a partir d'ella podem instal\u00b7lar el seg\u00fcent component. Te un bug ,explicat en aquest enlla\u00e7.</p>"},{"location":"7.5.Laravel_models.html#schema-builder","title":"Schema Builder","text":"<p>Una vegada creada una migraci\u00f3 hem de completar els seus m\u00e8todes up i down per a indicar la taula que volem crear o el camp que volem modificar. En el m\u00e8tode down sempre haurem d'afegir l'operaci\u00f3 inversa, eliminar la taula que s'ha creat en el m\u00e8tode up o eliminar la columna que s'ha afegit. </p> <p>A\u00e7\u00f2 ens permetr\u00e0 desfer migracions deixant la base de dades en el mateix estat en el qual es trobaven abans que s'afegiren.</p> <p>Per a especificar la taula a crear o modificar, aix\u00ed com les columnes i tipus de dades de les mateixes, s'utilitza la classe Schema. Aquesta classe t\u00e9 una s\u00e8rie de m\u00e8todes que ens permetr\u00e0 especificar l'estructura de les taules independentment del sistema de base de dades que utilitzem.</p>"},{"location":"7.5.Laravel_models.html#crear-i-esborrar-una-taula","title":"Crear i esborrar una taula","text":"<p>Per a afegir una nova taula a la base de dades s'utilitza el seg\u00fcent constructor:</p> <pre><code>Schema::create('users', function (Blueprint $table)     { \n    $table-&gt;increments('id');\n});\n</code></pre> <p>On el primer argument \u00e9s el nom de la taula i el segon \u00e9s una funci\u00f3 que rep com a par\u00e0metre un objecte del tipus Blueprint que utilitzarem per a configurar les columnes de la taula.</p> <p>En la secci\u00f3 down de la migraci\u00f3 haurem d'eliminar la taula que hem creat, per a a\u00e7\u00f2 usarem algun dels seg\u00fcents m\u00e8todes: </p> <pre><code>Schema::drop('users');\nSchema::dropIfExists('users');\n</code></pre> <p>En crear una migraci\u00f3 amb el comando de Artisan make:migration ja ens ve aquest codi afegit per defecte, la creaci\u00f3 i eliminaci\u00f3 de la taula que s'ha indicat i a m\u00e9s s'afigen un parell de columnes per defecte (id i timestamps).</p>"},{"location":"7.5.Laravel_models.html#afegir-columnes","title":"Afegir columnes","text":"<p>El constructor Schema::create rep com a segon par\u00e0metre una funci\u00f3 que ens permet especificar les columnes que va a tenir aquesta taula. </p> <p>En aquesta funci\u00f3 podem anar afegint tots els camps que vulguem, indicant per a cadascun d'ells el seu tipus i nom, i a m\u00e9s si volem tamb\u00e9 podrem indicar una s\u00e8rie de modificadors com a valor per defecte, \u00edndexs, etc. Per exemple:</p> <pre><code>    Schema::create('users', function($table) {\n        $table-&gt;increments('id'); \n        $table-&gt;string('username', 32); \n        $table-&gt;string('password'); \n        $table-&gt;smallInteger('vots'); \n        $table-&gt;string('direccion'); \n        $table-&gt;boolean('confirmat')-&gt;default(false);\n        $table-&gt;timestamps();\n    });\n</code></pre> <p>Schema defineix molts tipus de dades que podem utilitzar per a definir les columnes d'una taula, alguns dels principals s\u00f3n:</p> Comando Tipus de camp $table-&gt;boolean('confirmed'); BOOLEAN $table-&gt;enum('choices', array('foo', 'bar')); ENUM $table-&gt;float('amount'); FLOAT $table-&gt;increments('id'); Clau principal tipus INTEGER amb Acte-Increment $table-&gt;integer('votes'); INTEGER $table-&gt;mediumInteger('numbers'); MEDIUMINT $table-&gt;smallInteger('votes'); SMALLINT $table-&gt;tinyInteger('numbers'); TINYINT $table-&gt;string('email'); VARCHAR $table-&gt;string('name', 100); VARCHAR amb la longitud indicada TEXT $table-&gt;text('description'); TEXT $table-&gt;timestamp('added_on'); $table-&gt;timestamps(); Afig els timestamps \"created_at\" i \"updated_at\" -&gt;nullable() Indicar que la columna permet valors NULL -&gt;default($value) Declara un valor per defecte per a una columna -&gt;unsigned() Afig UNSIGNED a les columnes tipus INTEGER <p>Els tres \u00faltims es poden combinar amb la resta de tipus per a crear, per exemple, una columna que permeta nuls, amb un valor per defecte i de tipus unsigned.</p> <p>Per a consultar tots els tipus de dades que podem utilitzar podeu consultar la documentaci\u00f3 de Laravel en:</p>"},{"location":"7.5.Laravel_models.html#afegir-indexs","title":"Afegir \u00edndexs","text":"<p>Schema suporta els seg\u00fcents tipus d'\u00edndexs:</p> Comanament Descripci\u00f3 $table-&gt;primary('id'); Afegir una clau prim\u00e0ria $table-&gt;primary(array('first', 'last')); Definir una clau prim\u00e0ria composta $table-&gt;unique('email'); Definir el camp com UNIQUE $table-&gt;index('state'); Afegir un \u00edndex a una columna <p>En la taula s'especifica com afegir aquests \u00edndexs despr\u00e9s de crear el camp, per\u00f2 tamb\u00e9 permet indicar aquests \u00edndexs alhora que es crea el camp:</p> <pre><code>$table-&gt;string('email')-&gt;unique();\n</code></pre>"},{"location":"7.5.Laravel_models.html#claus-alienes","title":"Claus alienes","text":"<p>Amb Schema tamb\u00e9 podem definir claus alienes entre taules:</p> <pre><code>$table-&gt;integer('user_id')-&gt;unsigned();\n$table-&gt;foreign('user_id')-&gt;references('id')-&gt;on('users');\n</code></pre> <p>En aquest exemple en primer lloc afegim la columna \"user_id\" de tipus UNSIGNED INTEGER (sempre haurem de crear primer la columna sobre la qual es va a aplicar la clau aliena). A continuaci\u00f3 vam crear la clau aliena entre la columna \"user_id\" i la columna \"id\" de la taula \"users\".</p> <p>La columna amb la clau aliena ha de ser del mateix tipus que la columna a la qual apunta. Si per exemple vam crear una columna a un \u00edndex auto-incremental haurem d'especificar que la columna siga unsigned per que no es produ\u00efsquen errors.</p> <p>Tamb\u00e9 podem especificar les accions que s'han de realitzar per a \"on delete\" i \"on update\":</p> <pre><code>$table-&gt;foreign('user_id')-&gt;references('id')-&gt;on('users')-&gt;onDelete('cascade');\n</code></pre> <p>Per a eliminar una clau aliena, en el m\u00e8tode down de la migraci\u00f3 hem d'utilitzar el seg\u00fcent codi: </p> <pre><code>$table-&gt;dropForeign('posts_user_id_foreign');\n</code></pre> <p>Per a indicar la clau aliena a eliminar hem de seguir el seg\u00fcent patr\u00f3 per a especificar el nom __foreign. On \"taula\" \u00e9s el nom de la taula actual i \"columna\" el nom de la columna sobre la qual es cree la clau aliena."},{"location":"7.5.Laravel_models.html#models-de-dades-mitjancant-orm","title":"Models de dades mitjan\u00e7ant ORM","text":"<p>El mapeado objecte-relacional (m\u00e9s conegut pel seu nom en angl\u00e8s, Object-Relational mapping, o per les seues sigles ORM) \u00e9s una t\u00e8cnica de programaci\u00f3 per a convertir dades entre un llenguatge de programaci\u00f3 orientat a objectes i una base de dades relacional com a motor de persist\u00e8ncia. A\u00e7\u00f2 possibilita l'\u00fas de les caracter\u00edstiques pr\u00f2pies de l'orientaci\u00f3 a objectes, podrem accedir directament als camps d'un objecte per a llegir les dades d'una base de dades o per a inserir-los o modificar-los. Laravel inclou el seu propi sistema de ORM anomenat Eloquent, el qual ens proporciona una manera elegant i f\u00e0cil d'interactuar amb la base de dades. Per a cada taula de la base dades haurem de definir el seu corresponent model, el qual s'utilitzar\u00e0 per a interactuar des de codi amb la taula.</p>"},{"location":"7.5.Laravel_models.html#definicio-dun-model-de-dades","title":"Definici\u00f3 dun model de dades","text":"<p>Per defecte els models es guardaran com a classes PHP dins de la carpeta app/Models.</p> <pre><code>    php artisan make:model Movie\n</code></pre> <p>Aquest comando crear\u00e0 el fitxer movie.php dins de la carpeta app/Models amb el codi b\u00e0sic d'un model.</p> <pre><code>&lt;?php\n    namespace App\\Models;\n    use Illuminate\\Database\\Eloquent\\Model;\n    class Movie extends Model\n    {\n    ...\n    }\n?&gt;\n</code></pre> <p>Autom\u00e0ticament, s'associa aquest model a una taula amb el mateix nom, per\u00f2 en plural i en min\u00fascula, per la qual cosa els models anteriors estarien associats a unes taules llibres i usuaris en la base de dades, respectivament. En cas que no vulguem que siga aix\u00ed, definim una propietat \\$table en la classe amb el nom que vulguem que tinga la taula associada. Per exemple:</p> <pre><code>class Movie extends Model\n{\n    protected $table = 'movies';\n}\n</code></pre>"},{"location":"7.5.Laravel_models.html#altres-opcions-de-crear-models","title":"Altres opcions de crear models","text":"<p>El comando anterior make:model admet uns par\u00e0metres addicionals, de manera que es pot crear alhora el model i la migraci\u00f3, i m\u00e9s encara, el model, la migraci\u00f3 i el controlador associat. Vegem alguns exemples:</p> <pre><code>php artisan make:model Movie -m\n</code></pre> <p>El comando anterior crea un model Pelicula en la carpeta app\\Models i, a m\u00e9s, crea una migraci\u00f3 anomenada create_peliculas_table en la carpeta database/migrations , llista perqu\u00e8 editem el m\u00e8tode up i especifiquem els camps necessaris. Notar que el nom de la migraci\u00f3 afig una \"s\" al nom de la taula autom\u00e0ticament, a partir del model en singular.</p> <pre><code>php artisan make:model Movie -mc\n</code></pre> <p>Aquest altre comando crea el mateix que l'anterior, i a m\u00e9s, un controlador anomenat PeliculaController en la carpeta app\\Http\\Controllers . Aquest controlador est\u00e0 buit, perqu\u00e8 afegim els m\u00e8todes que considerem.</p> <p><pre><code>php artisan make:model Movie -mcr\n</code></pre> Aquesta altra opci\u00f3 crea el mateix que l'anterior, per\u00f2 el controlador PeliculaController \u00e9s en aquest cas un controlador de recursos, per la qual cosa t\u00e9 ja incorporats el conjunt de m\u00e8todes propis d'aquesta mena de controladors: index , show , etc.</p>"},{"location":"7.5.Laravel_models.html#seguir-una-nomenclatura-uniforme","title":"Seguir una nomenclatura uniforme","text":"<p>Recorda que, de sessions anteriors, hem comentat la recomanaci\u00f3/necessitat de seguir una nomenclatura uniforme en els models, controladors i vistes. Aix\u00ed, per al model Movie ja tindr\u00edem el seu controlador associat MovieController , i les vistes es definirien en la subcarpetac resources/views/movies , amb els noms corresponents a cada m\u00e8tode del controlador (per exemple index.blade.php  o show.blade.php ), i amb una taula associada movies.</p>"},{"location":"7.5.Laravel_models.html#clau-primaria","title":"Clau prim\u00e0ria","text":"<p>Laravel tamb\u00e9 assumeix que cada taula t\u00e9 declarada una clau prim\u00e0ria amb el nom id. En el cas que no siga aix\u00ed i vulguem canviar-ho haurem de sobreescriure el valor de la propietat protegida \\$primaryKey del model, per exemple: </p> <pre><code>    protected $primaryKey = 'my_id';\n</code></pre> <p>\u00c9s important definir correctament aquest valor ja que s'utilitza en determinats m\u00e8todes de Eloquent, com per exemple per a cercar registres o per a crear les relacions entre models.</p>"},{"location":"7.5.Laravel_models.html#timestamps","title":"Timestamps","text":"<p>Una altra propietat que en ocasions haurem d'establir s\u00f3n els timestamps autom\u00e0tics. Per defecte Eloquent assumeix que totes les taules contenen els camps updated_at i created_at (els quals els podem afegir molt f\u00e0cilment amb Schema afegint \\$table-&gt;timestamps() en la migraci\u00f3). Aquests camps s'actualitzaran autom\u00e0ticament quan es creu un nou registre o es modifique. En el cas que no vulguem utilitzar-los (i que no estiguen afegits a la taula) haurem d'indicar-ho en el model o d'una altra forma ens donaria un error. Per a indicar que no els actualitze autom\u00e0ticament haurem de modificar el valor de la propietat p\u00fablica \\$timestamps a false, per exemple: </p> <pre><code>    public $timestamps = false;\n</code></pre> <p>A continuaci\u00f3 es mostra un exemple d'un model de Eloquent en el qual s'afigen totes les especificacions que hem vist:</p> <pre><code>    &lt;?php namespace App;\n    use Illuminate\\Database\\Eloquent\\Model; \n    class User extends Model\n        {\n        protected $table = 'my_users'; \n        protected $primaryKey = 'my_id';\n        public $timestamps = false;\n        }\n</code></pre>"},{"location":"7.5.Laravel_models.html#us-dun-model-de-dades","title":"\u00das d'un model de dades","text":"<p>Una vegada creat el model ja podem comen\u00e7ar a utilitzar-ho per a recuperar dades de la base de dades, per a inserir noves dades o per a actualitzar-los.  El lloc correcte on realitzar aquestes accions \u00e9s en el controlador, el qual li'ls /els hi haur\u00e0 de passar a la vista ja preparats per a la seua visualitzaci\u00f3.</p> <p>\u00c9s important que per a la seua utilitzaci\u00f3 indiquem a l'inici de la classe l'espai de noms del model o models a utilitzar.  Per exemple, si anem a usar els models User i Orders haur\u00edem d'afegir:</p> <pre><code>    use App\\Models\\User;\n    use App\\Models\\Orders;\n</code></pre>"},{"location":"7.5.Laravel_models.html#consultar-dades","title":"Consultar dades","text":"<p>Per a obtenir totes les files de la taula associada a un model usarem el m\u00e8tode all():</p> <p><pre><code>    use App\\Models\\Movie;\n    ...\n    class MovieController extends Controller\n    {\n        public function index()\n        {\n            $movies = Movie::get();\n            return view('movies.index', compact('movies'));\n        }\n    }   \n</code></pre> Aquest m\u00e8tode pasar\u00e0 a la vista un array de objectes, on cada item del array ser\u00e0 una inst\u00e0ncia del model movie i accedirem a les seues propietats com a tals. Aix\u00ed en la vista tindriem alguna cosa com:</p> <pre><code>@forelse($movies as $movie)\n    {{ \"{{  $movies-&gt;titulo \" }}}}\n@endforelse\n</code></pre> <p>Alternativament, tamb\u00e9 podem obtindre una consulta filtrada, amb el m\u00e8tode get i especificant amb el m\u00e8tode where la condici\u00f3 que han de complir els registres a obtindre. Per exemple, aix\u00ed obtindr\u00edem els llibres el preu dels quals siga inferior a 10 euros</p> <p><pre><code>$movies = Movie::where('precio', '&lt;', 10)-&gt;get();\n</code></pre> o combinant-les</p> <pre><code>$movies = Movie::where('precio', '&lt;', 10)\n-&gt;where('precio', '&gt;', 5)-&gt;get();\n</code></pre> <p>Sobre aquestes consultes base podem aplicar una s\u00e8rie d'afegits. Per exemple, podem voler ordenar els llibres per t\u00edtol, per al que far\u00edem aix\u00f2 en el controlador:</p> <pre><code>$movies = Movie::orderBy('titulo', 'DESC')-&gt;get();\n</code></pre> <p>Nota: Tots els m\u00e8todes que es descriuen en la secci\u00f3 de \"Constructor de consultes\" i en la documentaci\u00f3 de Laravel sobre \"Query Builder\" tamb\u00e9 es poden utilitzar en els models Eloquent. Per tant podrem utilitzar where, orWhere, first, get, orderBy, groupBy, having, skip, take, etc. per a elaborar les consultes.</p> <p>Tamb\u00e9 podem utilitzar els m\u00e8todes agregats per a calcular el total de registres obtinguts, o el m\u00e0xim, m\u00ednim, mitjana o summa d'una determinada columna. Per exemple:</p> <pre><code>    $count = User::where('votes', '&gt;', 100)-&gt;count(); \n    $price = Orders::max('price');\n    $price = Orders::min('price');\n    $price = Orders::avg('price');\n    $total = User::sum('votes');\n</code></pre>"},{"location":"7.5.Laravel_models.html#paginacio-de-resultats","title":"Paginaci\u00f2 de resultats","text":"<p>Si volem paginar els resultats obtinguts, devem, d'una banda, quan obtinguem el llistat des del controlador, indicar amb paginate quants registres volem per p\u00e0gina:</p> <pre><code>public function index()\n    {\n        $movies = Movie::paginate(5);\n        return view('movies.index', compact('moviemovies'));\n    }\n</code></pre> <p>Despr\u00e9s, en la vista associada ( movies.index en l'exemple anterior), podem emprar el m\u00e8tode links perqu\u00e8 mostre els botons de paginaci\u00f3 en el lloc desitjat:</p> <pre><code>    @forelse($movies as $movie)\n        {{ \"{{  $movie-&gt;titulo \" }}}}\n    @endforelse\n    {{ \"{{  $movies-&gt;links() \" }}}}\n</code></pre>"},{"location":"7.5.Laravel_models.html#paginacio-des-de-laravel-8","title":"Paginaci\u00f3 des de Laravel 8","text":"<p>En la versi\u00f3 8 de Laravel s'ha canviat l'estil dels botons de paginaci\u00f3, emprant el del framework Tailwind CSS. Si volem continuar utilitzant els de Bootstrap, hem d'afegir aquesta l\u00ednia en el m\u00e8tode boot del provider* App\\Providers\\AppServiceProvider** :</p> <pre><code>Paginator::useBootstrap();\n</code></pre> <p>A m\u00e9s hem d'incorporar la clausula use per localitzar l'element Paginator</p> <p>use Illuminate\\Pagination\\Paginator;</p>"},{"location":"7.5.Laravel_models.html#objectes-individuals","title":"Objectes individuals","text":"<p>Una operaci\u00f3 bastant habitual \u00e9s mostrar una fitxa d'un objecte a partir d'un llistat, fent clic en el t\u00edtol o alguna part visible d'aqueix objecte. Per exemple, si volem veure les dades d'un llibre a partir d'un llistat amb els seus t\u00edtols, podem fer alguna cosa com aix\u00f2 en la plantilla Blade:</p> <pre><code>@forelse($movies as $movie)\n    &lt;li&gt;\n        &lt;a href=\"{{ \"{{  route('movies.show', $movie) \" }}}}\"&gt;\n        {{ \"{{  $movie-&gt;titulo \" }}}}&lt;/a&gt;\n    &lt;/li&gt;\n@endforelse\n</code></pre> <p>Veiem que hem utilitzat el m\u00e8tode route per a indicar la ruta a seguir, amb un segon par\u00e0metre, que en aquest cas \u00e9s l'objecte concret d'aqueixa fila. Laravel autom\u00e0ticament ho reempla\u00e7ar\u00e0 en l'enlla\u00e7 per l'identificador d'aquest objecte. Per part seua, la ruta associada a aquest enlla\u00e7 podria ser una cosa aix\u00ed (en l'arxiu de rutes):</p> <pre><code>Route::get('/movies/{id}', [movieController::class, 'show'])\n-&gt;name('movies.show');\n</code></pre>"},{"location":"7.5.Laravel_models.html#mostar-dades","title":"Mostar dades","text":"<p>Finalment, el m\u00e8tode show del controlador associat s'encarregar\u00e0 d'obtindre les dades del llibre a partir de el seu id, i generar la vista corresponent. Per a obtindre les dades d'un objecte a partir del seu identificador,podem emprar el m\u00e8tode find del model, passant-li com a par\u00e0metre l'identificador. Aix\u00ed,podr\u00edem generar una vista amb les dades com aquesta:</p> <pre><code>...\nclass movieController extends Controller\n{\n    ...\n    public function show($id)\n    {\n        $movie = movie::find($id);\n        return view('movies.show', compact('movie'));\n    }\n}\n</code></pre> <p>En el cas que l'objecte no es trobe (perqu\u00e8, per exemple, utilitzem un aneu equivocat), la vista generada fallar\u00e0. Per a evitar-ho, en lloc del m\u00e8tode find podem emprar *findOrFail , que, en cas que    no es trobe l'objecte, generar\u00e0 una vista amb un error 404, m\u00e9s apropiada. A m\u00e9s, recorda que pots personalitzar aquestes p\u00e0gines d'error definint les vistes corresponents.</p> <pre><code>$movie = movie::findOrFail($id);\n</code></pre>"},{"location":"7.5.Laravel_models.html#inserir-dades","title":"Inserir dades","text":"<p>Per a afegir una entrada en la taula de la base de dades associada amb un model simplement hem de crear una nova inst\u00e0ncia d'aquest model, assignar els valors que vulguem i finalment guardar-los amb el m\u00e8tode save():</p> <pre><code>    $movie = new movie();\n    $movie-&gt;titulo = \"La guerra de las galaxias\";\n    $movie-&gt;director = \"George Lucas\";\n    $movie-&gt;precio = 3.95;\n    $movie-&gt;save();\n</code></pre> <p>Per a obtenir l'identificador assignat en la base de dades despr\u00e9s de guardar (quan es tracte de taules amb \u00edndex auto-incremental), ho podrem recuperar simplement accedint al camp id de l'objecte que hav\u00edem creat, per exemple:</p> <pre><code>$insertedId = $movie-&gt;id;\n</code></pre> <p>Com a alternativa, tamb\u00e9 es pot utilitzar el m\u00e8tode create del model, i passar-li totes les dades de la petici\u00f3, que arribarien des d'un formulari, com veurem m\u00e9s endavant:    </p> <p><pre><code>movie::create($request-&gt;all());\n</code></pre> Perqu\u00e8 aix\u00f2 \u00faltim funcione, han de complir-se dues premisses:</p> <ul> <li> <p>Cada camp de la petici\u00f3 ha de tindre associat un camp del mateix nom en el model.</p> </li> <li> <p>Hem de definir en el model una propietat anomenada \\$fillable amb els noms dels camps de la petici\u00f3 que ens interessa processar (la resta es descarten). Aix\u00f2 \u00e9s obligatori especificar-ho, encara que ens interessen tots els camps, per a evitar insercions massives malintencionades (per exemple , editant el codi font per a afegir altres camps i modificar dades inesperades).</p> </li> </ul> <pre><code>class movie extends Model\n{\nprotected $fillable = ['titulo', 'director', 'precio'];\n}\n</code></pre> <p>Aquest codi d'inserci\u00f3 (o b\u00e9 camp a camp, o usant el m\u00e8tode all ) se sol posar en el m\u00e8tode store del controlador, perqu\u00e8 reba les dades del formulari d'inserci\u00f3 i la fa\u00e7a en la base de dades .Ho acabarem de veure quan abordem el tema dels formularis.</p>"},{"location":"7.5.Laravel_models.html#modificar-dades","title":"Modificar dades","text":"<p>La modificaci\u00f3 consisteix en dos passos:</p> <ul> <li>Trobar l'objecte a modificar (buscant-lo per l'id amb findOrFail() , per exemple, com s'ha explicat abans).</li> <li>Modificar les propietats que es necessiten, i cridar al m\u00e8tode save() de l'objecte per a guardar els canvis.</li> </ul> <p><pre><code>$movieAModificar = movie::findOrFail($id);\n$movieAModificar-&gt;titulo=\"Otro t\u00edtulo\";\n$movieAModificar-&gt;save();\n</code></pre> Tamb\u00e9 podem utilitzar el m\u00e8tode update enlla\u00e7at amb findOrFail , i passar-li com a par\u00e0metre totes les dades de la petici\u00f3, igual que s'ha explicat per a la inserci\u00f3, i sempre que h\u00e0gem declarat l'atribut \\$fillable en el model per a indicar quins camps s'accepten:</p> <pre><code>movie::findOrFail($id)-&gt;update($request-&gt;all());\n</code></pre>"},{"location":"7.5.Laravel_models.html#esborrar-dades","title":"Esborrar dades","text":"<p>Per a esborrar una inst\u00e0ncia d'un model en la base de dades simplement hem d'usar el seu m\u00e8tode delete():</p> <pre><code>    movie::findOrFail($id)-&gt;delete();\n</code></pre> <p>Aix\u00f2 ho farem normalment en el m\u00e8tode destroy del controlador en q\u00fcesti\u00f3. Despr\u00e9s, podem redirigir o renderitzar alguna vista resultat, com el llistat de llibres general per a comprovar que s'ha esborrat.</p> <pre><code>public function destroy($id)\n{\n    movie::findOrFail($id)-&gt;delete();\n    $movies = movie::get();\n    return view('movies.index', compact('movies'));\n}\n</code></pre>"},{"location":"7.5.Laravel_models.html#sobre-lesborrat-des-de-les-vistes","title":"Sobre lesborrat des de les vistes","text":"<p>El normal \u00e9s que l'esborrat s'active fent clic en algun element d'una vista. Per exemple, fent clic en un bot\u00f3 o enlla\u00e7 que pose \"Esborrar\". Tanmateix, si implementem aix\u00f2 aix\u00ed:</p> <pre><code>    &lt;a href=\"{{ \"{{  route('movies.destroy', $movie \" }}}}\"&gt;\nBorrar\n&lt;/a&gt;\n</code></pre> <p>Si volem esborrar el llibre amb id 3, es generar\u00e0 una ruta http://biblioteca/movies/3. Ho podem comprovar passant el ratol\u00ed per l'enlla\u00e7 i veient la barra inferior d'estat del navegador. Aquesta ruta, no obstant aix\u00f2,ens enviar\u00e0 a la fitxa del llibre 3, no a l'esborrat, ja que estem enviant una petici\u00f3 GET, i no una d'esborrat (DELETE). Per a evitar aix\u00f2, l'opci\u00f3 d'esborrat ha de fer-se sempre des d'un formulari, on a trav\u00e9s del helper @method indiquem que \u00e9s una petici\u00f3 d'esborrat (DELETE). Amb el que l'enlla\u00e7 per a esborrar un llibre quedaria aix\u00ed:</p> <pre><code>&lt;form action=\"{{ \"{{  route('movies.destroy', $movie) \" }}}}\" method=\"POST\"&gt;\n    @method('DELETE')\n    @csrf\n    &lt;button&gt;Borrar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>NOTA el helper @csrf ho veurem amb m\u00e9s detall en parlar de formularis, per\u00f2 s'afig als formularis Laravel per a evitar atacs de tipus cross-site, \u00e9s a dir, accessos a una URL de la nostra web des d'altres webs.</p>"},{"location":"7.5.Laravel_models.html#exemple","title":"Exemple","text":""},{"location":"7.6.Laravel_dades.html","title":"Els models i les dades: seeders, factories, i relacions entre models.","text":"<p>Relacions</p> <p>Seeders i factories</p> <p>Constructor de consultes</p> <p>Us de dades</p> <p>Exemple</p> <p>Exercisis</p> <p>Addedum</p> <p>En aquesta llic\u00f2 continuarem amb el vist en l'anterior quant a mecanismes d'acc\u00e9s a dades des de Laravel, i parlarem de conceptes una mica m\u00e9s avan\u00e7ats. D'una banda, veurem com podem poblar les taules de la nostra base de dades amb una s\u00e8rie de dades ja pre-carregades, i fins i tot amb dades fict\u00edcies que ens servisquen per a unes proves inicials, que despr\u00e9s es puguen descartar. Tamb\u00e9 veurem quins tipus de relacions es poden establir entre els models de l'aplicaci\u00f3, i com es reflecteixen autom\u00e0ticament en la base de dades.   </p>"},{"location":"7.6.Laravel_dades.html#relacions-en-laravel","title":"Relacions en Laravel","text":"<p>Les taules de les bases de dades es relacionen sovint unes amb unes altres. Eloquent facilita la gesti\u00f3 i el treball amb aquestes relacions f\u00e0cilment suportant diversos tipus de relacions diferents:</p> <ul> <li>Un a un \u2013 One to one</li> <li>Un a molts \u2013 One to many</li> <li>Molts a molts \u2013 Many to many</li> <li>Molta a molts mitjan\u00e7ant - Has Many Through</li> </ul> <p>Les relacions entre models Eloquent es defineixen com a m\u00e8todes en les pr\u00f2pies classes. At\u00e8s que, com els propis models Eloquent, les relacions tamb\u00e9 serveixen com a poderosos query builders, la definici\u00f3 de relacions com a m\u00e8todes proporciona potents funcions d'encadenament i consulta de m\u00e8todes.</p>"},{"location":"7.6.Laravel_dades.html#un-a-un","title":"Un a Un","text":"<p>Suposem que tenim dos models Usuario i Telefono , de manera que podem establir una relaci\u00f3 un a un entre ells: un usuari t\u00e9 un tel\u00e8fon, i un tel\u00e8fon pertany a un usuari. Per a reflectir aquesta relaci\u00f3 en taules, una de les dues hauria de tindre una refer\u00e8ncia a l'altra. En aquest cas, podr\u00edem tindre un camp usuari_id en la taula de telefonos que indique a qui pertany aquest tel\u00e8fon. \u00c9s important que el camp es diga usuari_id , com veurem a continuaci\u00f3. Per a indicar que un usuari t\u00e9 un tel\u00e8fon, afegim un nou m\u00e8tode en el model d'Usuari , que es cride igual que el model amb el qual volem connectar ( telefono , en aquest cas):</p> <pre><code>class Usuario extends Model\n{\n    public function telefono()\n    {\n        return $this-&gt;hasOne('App\\Models\\Telefono');\n    }\n}\n</code></pre> <p>Ara, si volem obtindre el tel\u00e8fon d'un usuari, n'hi ha prou que fem aix\u00f2:</p> <p>$telefono = Usuario::findOrFail($id)-&gt;telefono;</p> <p>Hem emprat una caracter\u00edstica de Eloquent denominada propietats din\u00e0miques, per la qual podem referenciar un m\u00e8tode de relaci\u00f3 com si f\u00f3ra una propietat (en lloc d'usar telefono() , hem emprat telefono ). La instrucci\u00f3 anterior obt\u00e9 l'objecte Telefono associat amb l'usuari buscat (a trav\u00e9s del \\$id de l'usuari). Perqu\u00e8 aquesta associaci\u00f3 tinga efecte, cal que en la taula telefonos existisca un camp usuario_id i que es corresponga amb un camp id de la taula d'usuaris , de manera que Eloquent estableix la connexi\u00f3 entre una i una altra taula. Haurem de definir una nova migraci\u00f3 de modificaci\u00f3 sobre la taula telefonos per a afegir aqueix nou camp, o refrescar la migraci\u00f3 original amb ell i esborrar els continguts previs. Si volem utilitzar altres camps diferents en una i una altra taula per a connectar-les, hem d'indicar dos par\u00e0metres m\u00e9s en cridar a hasOne . Per exemple, aix\u00ed relacionar\u00edem les dues taules anteriors, indicant que la clau aliena de telefonos \u00e9s idUsuario , i que la clau local a la qual es referencia en usuaris \u00e9s codigo :</p> <pre><code>return $this-&gt;hasOne('App\\Models\\Telefono', 'idUsuario', 'codigo');\n</code></pre> <p>Tamb\u00e9 \u00e9s possible obtindre la relaci\u00f3 inversa, \u00e9s a dir, a partir d'un tel\u00e8fon, obtindre l'usuari al qual pertany. Per a aix\u00f2, afegim un m\u00e8tode en el model Telefono i emprem el m\u00e8tode belongsTo per a indicar a quin model s'associa:</p> <pre><code>class Telefono extends Model\n{\n    public function usuario()\n    {\n        return $this-&gt;belongsTo('App\\Models\\Usuario');\n    }\n}\n</code></pre> <p>Novament, podem especificar altres noms de clau passant par\u00e0metres addicionals a belongsTo , igual que es fa per a hasOne . D'aquesta manera, si volem obtindre l'usuari a partir del tel\u00e8fon, podem fer-lo aix\u00ed:</p> <pre><code>$usuario = Telefono::findOrFail($idTelefono)-&gt;usuario;\n</code></pre>"},{"location":"7.6.Laravel_dades.html#guardar-dades-relacionades","title":"Guardar dades relacionades","text":"<p>Suposem que volem guardar un usuari amb el seu tel\u00e8fon associat. Podem simplement guardar l'id del tel\u00e8fon com un camp m\u00e9s de l'usuari:</p> <pre><code>// Buscamos el tel\u00e9fono que queremos asociar\n// (suponiendo que existe previamente)\n$telefono = Telefono::findOrFail($idTelefono);\n$usuario = new Usuario();\n$usuario-&gt;nombre = \"Pepe\";\n$usuario-&gt;email = \"pepe@gmail.com\";\n$usuario-&gt;telefono_id = $telefono-&gt;id;\n$usuario-&gt;save();\n</code></pre> <p>Per\u00f2, a m\u00e9s, podem vincular tots dos objectes en la relaci\u00f3, usant el m\u00e8tode associate , d'aquesta manera:</p> <pre><code>// Buscamos el tel\u00e9fono que queremos asociar\n// (suponiendo que existe previamente)\n$telefono = Telefono::findOrFail($idTelefono);\n$usuario = new Usuario();\n$usuario-&gt;nombre = \"Pepe\";\n$usuario-&gt;email = \"pepe@gmail.com\";\n$usuario-&gt;telefono()-&gt;associate($telefono);\n$usuario-&gt;save();\n</code></pre>"},{"location":"7.6.Laravel_dades.html#un-a-molts","title":"Un a molts","text":"<p>Una relaci\u00f3 \"un-a-molts\" s'usa per a definir relacions en les quals un model \u00fanic posseeix qualsevol quantitat d'altres models. Per exemple: suposem que tenim els models Autor i Llibre , de manera que un autor pot tindre diversos llibres, i un llibre est\u00e0 associat a un autor. La manera d'establir la relaci\u00f3 entre tots dos consistir\u00e0 a afegir en la taula de llibres una clau aliena a l'autor al qual pertany. A l'hora de plasmar aquesta relaci\u00f3 en els models, es fa de manera similar al cas anterior, nom\u00e9s que en lloc d'utilitzar el m\u00e8tode hasOne en la classe Autor usar\u00edem el m\u00e8tode hasMany :    </p> <pre><code>class Autor extends Model\n{\n    public function libros()\n    {\n        return $this-&gt;hasMany('App\\Models\\Libro');\n    }\n}\n</code></pre> <p>Igual que ocorria abans, s'assumeix que la taula de llibres t\u00e9 una clau prim\u00e0ria id , i que la clau aliena corresponent cap a la taula d'autors \u00e9s autor_id . En cas contrari, es poden especificar uns altres passant m\u00e9s par\u00e0metres a hasMany . D'aquesta manera obtenim els llibres associats a un autor:</p> <pre><code>$libros = Autor::findOrFail($id)-&gt;libros();\n</code></pre> <p>Finalment, tamb\u00e9 podem establir la relaci\u00f3 inversa, i recuperar l'autor al qual pertany un determinat llibre, definint un m\u00e8tode en la classe Llibre que empre *belongsTo , com en les relacions un a un:</p> <pre><code>class Libro extends Model\n{\n    public function autor()\n    {\n        return $this-&gt;belongsTo('App\\Models\\Autor');\n    }\n}\n</code></pre> <p>I obtindre, per exemple, el nom de l'autor a partir del llibre:</p> <pre><code>$nombreAutor = Libro::findOrFail($id)-&gt;autor-&gt;nombre;\n</code></pre>"},{"location":"7.6.Laravel_dades.html#acces-eficient-a-dades-relacionades-eager-loading","title":"Acc\u00e9s eficient a dades relacionades. Eager loading","text":"<p>Si en una vista Blade, accedim al nom de l'autor de esta manera:</p> <p><pre><code>{{ \"{{ $libro-&gt;autor-&gt;nombre \" }}}}\n</code></pre> aquest codi provoca una nova consulta en la base de dades per a buscar les dades de l'autor associat al llibre, al que, per a un llistat de 100 llibres, estarem fent 100 consultes addicionals per a extraure la informaci\u00f3 dels respectius autors. Per a evitar aquesta sobrec\u00e0rrega, podem emprar una t\u00e8cnica anomenada eager loading (que en valenci\u00e0 podr\u00edem traduir com a c\u00e0rrega precipitada o impacient). Consisteix a emprar el m\u00e8tode with per a indicar quina relaci\u00f3 volem deixar pre-carregada en el resultat. Per exemple, si indiquem una cosa aix\u00ed en la funci\u00f3 index del controlador de llibres:</p> <pre><code>public function index()\n{\n    $libros = Libro::with('autor')-&gt;get();\n    return view('libros.index', compact('libros'));\n}\n</code></pre>"},{"location":"7.6.Laravel_dades.html#molts-a-molts-many-to-many","title":"Molts a molts \u2013 Many to many","text":"<p>Les relacions molts-a-molts s\u00f3n una mica m\u00e9s complicades que les hasOne o les hasMany. Un exemple de tal relaci\u00f3 \u00e9s un usuari que cont\u00e9 diversos rols, on els rols s\u00f3n compartits per altres usuaris. Per exemple, diversos usuaris poden tenir el rol de \"Admin\". Per a definir aquesta relaci\u00f3, es requereixen tres taules de la base de dades: users, rols, i role_user. La taula role_user \u00e9s derivada de l'ordre alfab\u00e8tic dels noms dels models relacionats i cont\u00e9 les columnes user_id i role_id.</p> <p>Les relacions molts-a-molts es defineixen amb un m\u00e8tode que retorna el resultat del m\u00e8tode belongsToMany. Per exemple, definir el m\u00e8tode rols en el model User:</p> <pre><code>    class User extends Model\n    {\n        /\n          The roles that belong to the user.\n         /\n        public function roles()\n        {\n            return $this-&gt;belongsToMany('App\\Models\\Role');\n        }\n    }\n</code></pre> <p>Una vegada definida la relaci\u00f3, es pot accedir als rols de l'usuari usant la propietat din\u00e0mica rols:</p> <pre><code>    $roles = App\\User::find($id)-&gt;roles;\n</code></pre> <p>Per a definir la inversa d'una relaci\u00f3 de molts a molts, simplement cal posar una altra cridada a belongsToMany en el model relacionat. </p> <pre><code>class Rol extends Model\n{\n    public function usuarios()\n    {\n        return $this-&gt;belongsToMany('App\\Models\\Usuario');\n    }\n}\n</code></pre> <p>A l'efecte d'automatitzaci\u00f3, \u00e9s a dir, perqu\u00e8 Eloquent establisca els nexes de manera autom\u00e0tica, si volem establir una relaci\u00f3 molts a molts entre un model A i un altre B , s'assumeix que existir\u00e0 una altra taula a_b (l'ordre en qu\u00e8 es col\u00b7loquen els noms de les taules \u00e9s alfab\u00e8tic), amb els camps a_id i b_id , que relacionen els dos models. En este cas, s'assumir\u00e0 que existeix una taula rol_usuari amb un camp rol_id i un altre anomenat usuario_id , que enllacen amb els corresponents id de les taules d'usuaris i rols. Si aix\u00f2 no f\u00f3ra aix\u00ed, podem passar m\u00e9s par\u00e0metres a belongsToMany per a indicar-ho.</p> <p>En el cas de les relacions molts a molts, \u00e9s possible que ens interesse accedir a alguna dada d'aqueixa taula interm\u00e8dia que els relaciona. En aqueix cas, fem \u00fas de l'atribut pivot , predefinit, i que apunta a la taula o model intermedi entre els dos relacionats. Per exemple, si volgu\u00e9rem obtindre la data de creaci\u00f3 de la relaci\u00f3 entre un usuari i un rol, podr\u00edem fer aix\u00f2:</p> <pre><code>$roles = Usuario::findOrFail($id)-&gt;roles;\nfor($roles as $rol)\n{\n    echo $rol-&gt;pivot-&gt;created_at;\n}\n</code></pre> <p>Per defecte, nom\u00e9s les claus del model estaran presents en l'objecte pivot. Si la taula pivot cont\u00e9 atributs addicionals, s'han d'especificar en definir la relaci\u00f3:</p> <pre><code>    return $this-&gt;belongsToMany('App\\Role')-&gt;withPivot('column1', 'column2');\n</code></pre> <p>Si es desitja que els camps crated_at i updated_at es mantinguen de forma autom\u00e0tica, cal utilitzar el m\u00e8tode withTimestamps en definir la relaci\u00f3:</p> <pre><code>    return $this-&gt;belongsToMany('App\\Role')-&gt;withTimestamps();\n</code></pre>"},{"location":"7.6.Laravel_dades.html#filtrant-relacions-via-columnes-de-taula-intermedia","title":"Filtrant Relacions Via Columnes de Taula Interm\u00e8dia","text":"<p>Tamb\u00e9 pots filtrar els resultats van retornar per belongsToMany utilitzant el wherePivot i wherePivotIn m\u00e8todes quan definint la relaci\u00f3:</p> <pre><code>    retorn $this-&gt;belongsToMany('App\\Notes')-&gt;wherePivot('aprovat', 1);\n</code></pre>"},{"location":"7.6.Laravel_dades.html#seeders-i-factories","title":"Seeders i factories","text":"<p>En les proves que hem fet fins ara, per a tindre dades amb qu\u00e8 provar l'aplicaci\u00f3, ens hem limitat a afegir-los a m\u00e0 des de phpMyAdmin. At\u00e9s que les dades d'inici s\u00f3n necessaris per a provar algunes funcionalitats b\u00e0siques de l'aplicaci\u00f3, com s\u00f3n les cerques i filtrats, i at\u00e9s que els formularis per a donar d'alta i gestionar aquestes dades normalment no es tenen llestos fins a etapes m\u00e9s tardanes, pot resultar convenient disposar d'algun mecanisme que genere aquestes dades de prova a l'inici, sense preocupar-nos de tocar la base de dades a m\u00e0 o alterar el codi de l'aplicaci\u00f3 per a aix\u00f2. En aquest aspecte, els seeders i factories juguen un paper important.</p>"},{"location":"7.6.Laravel_dades.html#los-seeds","title":"Los seeds","text":"<p>Els seeders s\u00f3n classes especials que permeten sembrar (seed) de contingut una aplicaci\u00f3. Per a crear-los, utilitzem el comando php artisan com segueix:</p> <p>php artisan make:seeder NombreSeeder</p> <p>Aix\u00f2 crear\u00e0 una classe anomenada NombreSeeder en la carpeta database/seeders. En el m\u00e8tode run d'aquesta classe podem crear els elements que necessitem afegir a la base de dades. Per exemple, per a emplenar un taula de llibres podem fer un LibrosSeeder:</p> <pre><code>php artisan make:seeder LibrosSeeder\n</code></pre> <p>Editem el m\u00e8tode run del seeder que hem creat, i definim aquest codi per a crear un autor amb un llibre associat (haurem d'incorporar amb use els models d'Autor i Llibre pr\u00e8viament):</p> <pre><code>public function run()\n{\n    $autor = new Autor();\n$autor-&gt;nombre = \"Juan Seeder\";\n$autor-&gt;nacimiento = 1960;\n$autor-&gt;save();\n$libro = new Libro();\n$libro-&gt;titulo = \"El libro del Seeder\";\n$libro-&gt;editorial = \"Seeder S.A.\";\n$libro-&gt;precio = 10;\n$libro-&gt;autor()-&gt;associate($autor);\n$libro-&gt;save();\n}\n</code></pre>"},{"location":"7.6.Laravel_dades.html#afegint-els-seeders-a-laplicacio","title":"Afegint els seeders a l'aplicaci\u00f3","text":"<p>Per defecte, els seeders que creguem no formen part de l'aplicaci\u00f3 encara, en el sentit que encara no els podem executar. Per a aix\u00f2, hem de donar-los d'alta en el seeder general, anomenat DatabaseSeeder* , situat en la mateixa carpeta que els seeders que definim:</p> <pre><code>class DatabaseSeeder extends Seeder\n{\n    public function run()\n    {\n        ...\n        $this-&gt;call(LibrosSeeder::class);\n    }\n}\n</code></pre>"},{"location":"7.6.Laravel_dades.html#llancant-els-seeders","title":"Llan\u00e7ant els seeders","text":"<p>Si nom\u00e9s volem executar aquest *seeder perqu\u00e8 afija les dades, emprarem aquest comando:</p> <pre><code>php artisan db:seed\n</code></pre> <p>Aix\u00f2 llan\u00e7ar\u00e0 tots els seeders que tinguem declarats en la classe DatabaseSeeder . Si nom\u00e9s volem llan\u00e7ar un en concret, podem fer el seg\u00fcent:</p> <pre><code>php artisan db:seed --class=LibrosSeeder\n</code></pre> <p>Tamb\u00e9 pot ser necessari (i a vegades convenient) netejar la base de dades i omplir-la des de zero amb les dades dels seeds per a comen\u00e7ar a provar l'aplicaci\u00f3. En aquest cas, el comando \u00e9s el seg\u00fcent:</p> <pre><code>php artisan migrate:fresh --seed\n</code></pre>"},{"location":"7.6.Laravel_dades.html#els-factories","title":"Els factories","text":"<p>Els seeders s\u00f3n una eina \u00fatil per a poblar la nostra aplicaci\u00f3 amb dades a l'inici. Podem, per exemple , donar d'alta una s\u00e8rie d'usuaris inicials amb acc\u00e9s a l'aplicaci\u00f3, perqu\u00e8 amb ells es puguen emplenar la resta de dades. Tamb\u00e9 podem donar d'alta una s\u00e8rie de dades predefinides en unes certes taules, o dades de prova que despr\u00e9s poder esborrar. No obstant aix\u00f2, els seeders per si sols es queden una mica \"coixos\". Qu\u00e8 haur\u00edem de fer per a donar d'alta 10 o 20 llibres en la nostra taula. Haur\u00edem de definir algun tipus de bucle en el seeder, i definir dades diferents (per exemple, amb identificadors o comptadors aleatoris) per a cada llibre. Per a facilitar aquesta tasca, podem tirar m\u00e0 dels factories.</p> <p>Els factories s\u00f3n classes que permeten generar dades per lots. Es creen amb el seg\u00fcent comando, emmagatzemant-se la classe en la carpeta database/factories :</p> <pre><code>php artisan make:factory NombreFactory\n</code></pre> <p>Per exemple, anem a crear un factori per crear autors:</p> <pre><code>php artisan make:factory AutorFactory\n</code></pre> <p>Un dels canvis importants que ha portat la versi\u00f3 8 de Laravel \u00e9s que ara els factories estan orientats a objectes, per la qual cosa s'engloben en classes. A m\u00e9s, per defecte s'associen als models que creguem, de manera que podem generar una factoria d'objectes a partir d'una classe, com veurem a continuaci\u00f3. Per aquest motiu, quan creguem un model s'afig una cl\u00e0usula use indicant que empra el trait HasFactory.</p> <pre><code>class Libro extends Model\n{\nuse HasFactory;\n...\n}\n</code></pre> <p>Un trait b\u00e0sicament \u00e9s un conjunt de m\u00e8todes que es pot emprar per qualsevol classe que vulga utilitzar-los. D'aquesta manera, s'esmorteeix en part la limitaci\u00f3 de nom\u00e9s poder heretar d'una classe, i mitjan\u00e7ant aquests traits podem incorporar la funcionalitat d'unes altres.</p> <p>Quan creem una factoria en Laravel 8 emprant el comando php artisan make:factory comentat anteriorment, obtindrem una classe amb el nom que h\u00e0gem indicat, en la carpeta database/factories . Per exemple:</p> <p><pre><code>namespace Database\\Factories;\nuse App\\Models\\Autor;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\nclass AutorFactory extends Factory\n{\n    /**\n    * The name of the factory's corresponding model.\n    *\n    * @var string\n    */\n    protected $model = Autor::class;\n        /**\n        * Define the model's default state.\n        *\n        * @return array\n        */\n        public function definition()\n        {\n            return [\n                //\n            ];\n    }\n}\n</code></pre> Ara haurem d'emplenar el m\u00e8tode definition amb les dades que vulguem generar per a cada objecte que es cree. Per exemple, aix\u00ed emprar\u00edem el faker (ara autom\u00e0ticament incorporat en el propi objecte \\$this ), per a generar dades a l'atzar per als autors:</p> <pre><code>public function definition()\n{\n    return [\n        'nombre' =&gt; $this-&gt;faker-&gt;name,\n        'nacimiento' =&gt; $this-&gt;faker-&gt;numberBetween(1950, 1990)\n    ];\n}\n</code></pre> <p>Finalment, en el seeder corresponent, podem utilitzar aquest factory per a generar N objectes del model associat. Per exemple:</p> <pre><code>class AutoresSeeder extends Seeder\n{\n    public function run()\n    {\n        Autor::factory()-&gt;count(5)-&gt;create();\n    }\n}\n</code></pre> <p>Per a generar dades relacionades entre models (per exemple, llibres amb els seus autors), procedim igual queen les versions anteriors de Laravel, per\u00f2 tenint en compte que per a cridar a la factoria s'ha d'utilitzar el m\u00e8tode est\u00e0tic del model associat. Per exemple:</p> <pre><code>class LibrosSeeder extends Seeder\n{\n    public function run()\n    {\n        $autores = Autor::all();\n        $autores-&gt;each(function($autor) {\n            Libro::factory()-&gt;count(2)-&gt;create([\n'autor_id' =&gt; $autor-&gt;id]);\n        });\n    }\n}\n</code></pre>"},{"location":"7.6.Laravel_dades.html#query-builder","title":"Query Builder","text":"<p>Laravel inclou una s\u00e8rie de classes que ens facilita la construcci\u00f3 de consultes i un altre tipus d'operacions amb la base de dades. A m\u00e9s, en utilitzar aquestes classes, vam crear una notaci\u00f3 molt m\u00e9s llegible, compatible amb tots els tipus de bases de dades suportats per Laravel i que ens prev\u00e9 de cometre errors o d'atacs per injecci\u00f3 de codi SQL.</p>"},{"location":"7.6.Laravel_dades.html#consultes","title":"Consultes","text":"<p>Per a realitzar una \"Select\" que retorne totes les files d'una taula utilitzarem el seg\u00fcent codi: </p> <pre><code>    $users = DB::table('users')-&gt;get();\n    foreach ($users as $user) {\n        echo $user-&gt;name; \n    }\n</code></pre> <p>En l'exemple s'utilitza el constructor DB::taula indicant el nom de la taula sobre la qual es va a realitzar la consulta, i finalment es diu al m\u00e8tode get() per a obtenir totes les files de la mateixa.</p> <p>Si volem obtenir un sol element podem utilitzar first en lloc de get, de la forma: </p> <pre><code>    $user = DB::table('users')-&gt;first();\n</code></pre>"},{"location":"7.6.Laravel_dades.html#clausula-where","title":"Clausula where","text":"<p>Per a filtrar les dades usem la clausula where, indicant el nom de la columna i el valor a filtrar:</p> <pre><code>    $user = DB::table('users')-&gt;where('name','Pedro')-&gt;get();\n</code></pre> <p>En aquest exemple, la clausula where filtrar\u00e0 totes les files la columna de les quals name siga igual a Pedro. Si volem realitzar un altre tipus de filtrats, com a columnes que tinguen un valor major (&gt;), major o igual (&gt;=), menor (&lt;), menor o igual (&lt;=), diferent de l'indicat (&lt;&gt;) o usar l'operador like, ho podem indicar com a segon par\u00e0metre de la forma:</p> <pre><code>    $users = DB::table('users')-&gt;where('votes', '&gt;', 100)-&gt;get(); \n    $users = DB::table('users')-&gt;where('status', '&lt;&gt;', 'active')-&gt;get();\n    $users = DB::table('users')-&gt;where('name', 'like', 'T%')-&gt;get();\n</code></pre> <p>Si afegim m\u00e9s clausulas where a la consulta per defecte s'uniran mitjan\u00e7ant l'operador l\u00f2gic AND. En cas que vulguem utilitzar l'operador l\u00f2gic OR ho haurem de realitzar usant orWhere de la forma:</p> <pre><code>    $users = DB::table('users') -&gt;where('votes', '&gt;', 100)-&gt;orWhere('name', 'Pedro') -&gt;get();\n</code></pre>"},{"location":"7.6.Laravel_dades.html#orderby-groupby-having","title":"orderBy / groupBy / having","text":"<p>Tamb\u00e9 podem utilitzar els m\u00e8todes orderBy, groupBy i having en les consultes:</p> <pre><code>    $users = DB::table('users') -&gt;orderBy('name', 'desc')-&gt;groupBy('count') -&gt;having('count', '&gt;', 100)-&gt;get();\n</code></pre>"},{"location":"7.6.Laravel_dades.html#offset-limit","title":"Offset / Limit","text":"<p>Si volem indicar un offset o limit ho realitzarem mitjan\u00e7ant els m\u00e8todes skip (per a l'offset) i take (para limit), per exemple:</p> <pre><code>    $users = DB::table('users')-&gt;skip(10)-&gt;take(5)-&gt;get();\n</code></pre>"},{"location":"7.6.Laravel_dades.html#transaccions","title":"Transaccions","text":"<p>Laravel tamb\u00e9 permet crear transaccions sobre un conjunt d'operacions:</p> <pre><code>    DB::transaction(function() {\n        DB::table('users')-&gt;update(array('votes' =&gt; 1));\n        DB::table('posts')-&gt;delete(); \n    });\n</code></pre> <p>En cas que es produ\u00efsca qualsevol excepci\u00f3 en les operacions que es realitzen en la transacci\u00f3 es desfarien tots els canvis aplicats fins a aqueix moment de forma autom\u00e0tica.</p>"},{"location":"7.6.Laravel_dades.html#us-de-dates","title":"Us de dates","text":"<p>En algunes taules que hem vist o creat, s'ha usat un tipus timestamp, que b\u00e0sicament genera un tipus data en la taula corresponent. Aquests camps de tipus taula s\u00f3n inst\u00e0ncies d'una llibreria PHP anomenada Carbon, molt \u00fatil per a treballar amb dates. Aix\u00ed que, si tenim un registre de tipus Persona amb un camp created_at de tipus data, podem treballar amb ell com una data Carbon, i, per exemple, mostrar-la en una vista amb un format espec\u00edfic:</p> <p>Fecha creaci\u00f3n: {{ \"{{ Carbon\\Carbon::parse($persona-&gt;created_at)-&gt;format('d/m/Y) \" }}}}</p> <p>A m\u00e9s, per a treballar sobre els camps created_at i updated_at que per defecte es creen en una taula des d'una migraci\u00f3 Laravel, podem emprar aquesta llibreria Carbon per a donar-los valor, encara que d'aix\u00f2 ja s'encarrega Eloquent autom\u00e0ticament, per\u00f2 per si ho volem fer manualment, ac\u00ed va un exemple:</p> <pre><code>DB::table('personas')-&gt;insert([\n'nombre' =&gt; 'Juan',\n'edad' =&gt; 56,\n'created_at' =&gt; Carbon::now(),\n'updated_at' =&gt; Carbon::now()\n]);\n</code></pre> <p>Per a poder emprar la classe Carbon , hem d'importar-la ( use Carbon\\Carbon ).</p>"},{"location":"7.6.Laravel_dades.html#addendum-sobre-relacions","title":"Addendum sobre relacions","text":""},{"location":"7.6.Laravel_dades.html#has-many-through","title":"Has Many Through","text":"<p>El \"Has Many Through\" proporciona una drecera convenient per accedir relacions distants via una relaci\u00f3 interm\u00e8dia.Per exemple, un model Country, pot tenir molts models Post a trav\u00e9s d'un model intermedi User. En aquest exemple, es podria reunir f\u00e0cilment tots els missatges d'un blog per a un pa\u00eds determinat. Fem una ullada a les taules per a definir aquesta relaci\u00f3:</p> <p>countries     id - integer     name - string</p> <p>users     id - integer     country_id - integer     name - string</p> <p>posts     id - integer     user_id - integer     title - string</p> <p>Encara que Post no cont\u00e9 una columna country_id, la relaci\u00f3 hasManyThrough proporciona acc\u00e9s als missatges d'un pa\u00eds via \\$country-&gt;posts. </p> <p>Per a realitzar aquesta consulta, Eloquent inspecciona country_id en la taula interm\u00e8dia users. Despr\u00e9s de trobar els IDs d'usuaris coincidents, seran usats per a la consulta a la taula posts.</p> <p>Ara que s'ha examinat l'estructura de la taula per a la relaci\u00f3, es va a definir sobre el model Country:</p> <pre><code>    class Country extends Model\n    {\n        /*\n         * Get all of the posts for the country.\n         */\n        public function posts()\n        {\n            return $this-&gt;hasManyThrough('App\\Post', 'App\\User');\n        }\n    }\n</code></pre> <p>El primer par\u00e0metre passat al m\u00e8tode hasManyThrough \u00e9s el nom del model final al que es desitja accedir, mentre que el segon par\u00e0metre \u00e9s el nom del model intermedi.</p> <p>Els convenis t\u00edpics per a claus de Eloquent seran usats per a realitzar les consultes de la relaci\u00f3. Si es desitja personalitzar les claus de la relaci\u00f3, es pot fer pels par\u00e0metres tercer i quart al m\u00e8tode hasManyThrough. El tercer par\u00e0metre \u00e9s el nom de la clau aliena del model intermediari. El quart par\u00e0metre correspon amb el nom de la clau aliena del model final. El cinqu\u00e8 argument \u00e9s la clau local, mentre que el sis\u00e8 \u00e9s la clau local del model intermedi:</p> <pre><code>    class Country extends Model\n    {\n        public function posts()\n        {\n            return $this-&gt;hasManyThrough(\n                'App\\Post',\n                'App\\User',\n                'country_id', // Foreign key on users table...\n                'user_id', // Foreign key on posts table...\n                'id', // Local key on countries table...\n                'id' // Local key on users table...\n            );\n        }\n    }\n</code></pre>"},{"location":"7.6.Laravel_dades.html#consultar-lexistencia-de-relacions","title":"Consultar l'Exist\u00e8ncia de Relacions","text":"<p>Quan s'accedeixen als registres d'un model, es poden limitar els resultats basats en l'exist\u00e8ncia d'una relaci\u00f3. Per exemple, imaginar que es desitja obtenir tots els posts que continguen almenys un comentari. Per a a\u00e7\u00f2, es passaria el nom de la relaci\u00f3 al m\u00e8tode has o a orHas:</p> <pre><code>    // Retrieve all posts that have at least one comment...\n    $posts = App\\Post::has('comments')-&gt;get();\n</code></pre> <p>A m\u00e9s es pot especificar un operador i un comptador per a personalitzar la consulta:</p> <pre><code>    // Retrieve all posts that have three or habite comments...\n    $posts = Post::has('comments', '&gt;=', 3)-&gt;get();\n</code></pre> <p>Es poden nigar estructures has utilitzant la notaci\u00f3 de \"punts\". Per exemple, es podrien obtenir tots els posts que tenen almenys un comentari i un vot:</p> <pre><code>    // Retrieve all posts that have at least one comment with votes...\n    $posts = Post::has('comments.votes')-&gt;get();\n</code></pre> <p>Si es necessita encara m\u00e9s control, es poden utilitzar els m\u00e8todes whereHas i orWhereHas per a incloure condicions \"where\" en les consultes has. Aquests m\u00e8todes permeten afegir restricciones personalitzades a una relaci\u00f3, aix\u00ed com comprovar el contingut d'un comentari:</p> <pre><code>    // Retrieve all posts with at least one comment containing words like foo%\n    $posts = Post::whereHas('comments', function ($query) {\n        $query-&gt;where('content', 'like', 'foo%');\n    })-&gt;get();\n</code></pre> <p>Quan s'accedeixen als registres d'un model, es poden limitar els resultats basats en la inexist\u00e8ncia d'una relaci\u00f3. Per exemple, imaginar que es desitja obtenir tots els posts que no continguen almenys un comentari. Per a a\u00e7\u00f2, es passaria el nom de la relaci\u00f3 al m\u00e8tode doesntHave o a orDoesntHave:</p> <pre><code>    $posts = App\\Post::doesntHave('comments')-&gt;get();\n</code></pre>"},{"location":"7.6.Laravel_dades.html#insertant-i-modificant-models-rellacionats","title":"Insertant i modificant Models rel.lacionats","text":""},{"location":"7.6.Laravel_dades.html#el-metode-save","title":"El m\u00e8tode Save","text":"<p>Eloquent proveeix m\u00e8todes convenients per a l'addici\u00f3 de nous models a les relacions. Per exemple, potser necessite inserir un nou Comment a un model Post. En lloc de configurar manualment l'atribut post_id en el Comment, pot inserir el Comment directament des del m\u00e8tode save de la relaci\u00f3:</p> <pre><code>$comment = new App\\Comment(['message' =&gt; 'A new comment.']);\n$post = App\\Post::find(1);\n$post-&gt;comments()-&gt;save($comment);\n</code></pre> <p>Note's que no accedim als comments de la relaci\u00f3 com una propietat din\u00e0mica. En el seu lloc, cridem al m\u00e8tode comments per a obtenir una inst\u00e0ncia de la relaci\u00f3. El m\u00e8tode save agregar\u00e0 autom\u00e0ticament el valor post_id apropiat al nou model Comment.</p> <p>Si necessitem gravar multiples models relacionats, pot usar el m\u00e8tode saveMany</p> <pre><code>    $post = App\\Post::find(1);\n\n    $post-&gt;comments()-&gt;saveMany([\n        new App\\Comment(['message' =&gt; 'A new comment.']),\n        new App\\Comment(['message' =&gt; 'Another comment.']),\n    ]);\n</code></pre>"},{"location":"7.6.Laravel_dades.html#el-metode-create","title":"El m\u00e8tode Create","text":"<p>A m\u00e9s dels m\u00e8todes save i saveMany, es pot utilitzar tamb\u00e9 el m\u00e8tode create, eque accepta una matriu d'atributs, crea el model i ho insereix en la base de dades. De nou, la difer\u00e8ncia entre save i create \u00e9s que save accepta una inst\u00e0ncia d'un model complet de Eloquent mentre que create accepta una matriu de PHP:</p> <pre><code>    $post = App\\Post::find(1);\n\n    $comment = $post-&gt;comments()-&gt;create([\n        'message' =&gt; 'A new comment.',\n    ]);\n</code></pre> <p>Abans d'utilitzar el crear m\u00e8tode, revisa la documentaci\u00f3 d'assignment masssiu. Pots utilitzar el createMany m\u00e8tode per crear el m\u00faltiple va relacionar models:</p> <pre><code>    $post = App\\Post::find(1);\n    $post-&gt;comments()-&gt;createMany([\n        [\n            'message' =&gt; 'A new comment.',\n        ],\n        [\n            'message' =&gt; 'Another new comment.',\n        ],\n    ]);\n</code></pre>"},{"location":"7.6.Laravel_dades.html#belongs-to-relationships","title":"Belongs To Relationships","text":"<p>Quan actualitzem una relaci\u00f3 belongsTo, utilitzaem el m\u00e8tode associate. Aquest m\u00e8tode establir\u00e0 la clau for\u00e0nia en el model fill.</p> <pre><code>$account = App\\Account::find(10);\n$user-&gt;account()-&gt;associate($account);\n$user-&gt;save();\n</code></pre> <p>Per a llevar-la, pots utilitzar el m\u00e8tode dissociate. Aquest m\u00e8tode posar\u00e0 la clau for\u00e0nia de la relaci\u00f3 a null:</p> <pre><code>$user-&gt;account()-&gt;dissociate();\n$user-&gt;save();\n</code></pre>"},{"location":"7.6.Laravel_dades.html#relacions-molts-a-molts","title":"Relacions Molts a Molts","text":""},{"location":"7.6.Laravel_dades.html#adjuntar-separar-attaching-detaching","title":"Adjuntar / Separar (Attaching / Detaching)","text":"<p>Eloquent tamb\u00e9 proporciona uns quants helpers addicionals helper m\u00e8todes per fer que treballen amb va relacionar models habite convenient. Per exemple, imaginar que un usuari pot tenir diversos rols i un rol pot tenir diversos usuaris. Per un adjuntar un rol un un usuari inserint un registre en la taula interm\u00e8dia que uneix els models, utilitzar el m\u00e8tode attach:</p> <pre><code>$user = App\\User::find(1);\n$user-&gt;rols()-&gt;attach($roleId);\n</code></pre> <p>Quan s'adjunta una relaci\u00f3 a un model, es pot passar a m\u00e9s un array de dades addicional per a inserir-ho en la taula interm\u00e8dia:</p> <pre><code>$user-&gt;rols()-&gt;attach($roleId, ['expires' =&gt; $expires]);\n</code></pre> <p>Per descomptat, a voltes \u00e9s necessari eliminar un rol d'un usuari. Per a eliminar un registre d'una relaci\u00f3 molts-a-molts, utilitzar el m\u00e8tode detach. El m\u00e8tode detach eliminar\u00e0 el registre apropiat de la taula interm\u00e8dia; no obstant a\u00e7\u00f2, tots dos models romandran en la base de dades:</p> <pre><code>// Detach a single role from the user...\n$user-&gt;rols()-&gt;dettach($roleId);\n\n// Detach all rols from the user...\n$user-&gt;rols()-&gt;dettach();\n</code></pre> <p>Per comoditat, attach i dettach accepten a m\u00e9s un array de IDs com a entrada:</p> <pre><code>$user = App\\User::find(1);\n\n$user-&gt;rols()-&gt;detach([1, 2, 3]);\n\n$user-&gt;rols()-&gt;attach([\n    1 =&gt; ['expires' =&gt; $expires],\n    2 =&gt; ['expires' =&gt; $expires]\n]);\n</code></pre>"},{"location":"7.6.Laravel_dades.html#guardant-dades-addicional-en-la-taula-pivot","title":"Guardant dades addicional en la taula pivot","text":"<p>Quan treballem amb una relaci\u00f3 molts-a-molts, el m\u00e8tode Save accepta , com a segon argument, una matriu de attributes de la taula annexa (taula pivot)</p> <pre><code>App\\User::find(1)-&gt;rols()-&gt;save($role, ['expires' =&gt; $expires]);\n</code></pre>"},{"location":"7.6.Laravel_dades.html#modificant-un-registre-en-la-taula-pivot","title":"Modificant un registre en la taula Pivot","text":"<p>Si necessites actualitzar una fila en el taula pivot, pots utilitzar el m\u00e8tode updateExistingPivot. Aquest m\u00e8tode accepta la clau for\u00e0nia i una varietat d'atributs per actualitzar:</p> <pre><code>$user = App\\User::find(1);\n$user-&gt;rols()-&gt;updateExistingPivot($roleId, $attributes);\n</code></pre> <p>Consulta documentaci\u00f3n</p>"},{"location":"7.7.Laravel_validacio.html","title":"Formularis i validaci\u00f3 de dades","text":"<p>Validaci\u00f3 de Formularis</p> <p>Casos Especials</p> <p>Exercisis</p> <p>Exemple</p>"},{"location":"7.7.Laravel_validacio.html#dades-dentrada","title":"Dades d'entrada","text":"<p>Laravel facilita l'acc\u00e9s a les dades d'entrada de l'usuari a trav\u00e9s de solament uns pocs m\u00e8todes. No importa el tipus de petici\u00f3 que s'haja realitzat (POST, GET, PUT, DELETE), si les dades s\u00f3n d'un formulari o si s'han afegit a la query string, en tots els casos s'obtindran de la mateixa forma.</p> <p>Per a aconseguir acc\u00e9s a aquests m\u00e8todes Laravel utilitza injecci\u00f3 de depend\u00e8ncies. A\u00e7\u00f2 \u00e9s simplement afegir la classe Request al constructor o m\u00e8tode del controlador en el qual ho necessitem. Laravel s'encarregar\u00e0 d'injectar aquesta depend\u00e8ncia ja inicialitzada i directament podrem usar aquest par\u00e0metre per a obtenir les dades d'entrada. </p>"},{"location":"7.7.Laravel_validacio.html#creacio-i-enviament-de-formularis","title":"Creaci\u00f3 i enviament de formularis","text":"<p>Si definim un formulari en una vista, es defineix amb els conceptes que ja sabem d'HTML. Com a \u00fanic afegit, en el camp action del formulari podem utilitzar Blade i la funci\u00f3 route per a indicar el nom de ruta a la qual volem enviar el formulari. Vegem, per exemple, com definir un formulari per a donar d'alta noves pelicules. Creem una vista anomenada create.blade.php en la subcarpeta resources/views/catalog , amb un contingut com aquest:</p> <pre><code>@extends('plantilla')\n@section('titulo', 'Nueva Pelicula')\n@section('contenido')\n    &lt;h1&gt;Nueva pelicula&lt;/h1&gt;\n    &lt;form action=\"{{ route('catalog.store') }}\" method='POST'&gt;\n        @csrf\n            &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"title\"&gt;T\u00edtulo&lt;/label&gt;\n                &lt;input type=\"text\" name=\"title\" id=\"title\" class=\"form-control\"&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;label for='year'&gt;Any:&lt;/label&gt;\n                &lt;input type='number' name='year' /&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;label for='director'&gt;Director:&lt;/label&gt;\n                &lt;input type='text' name='director' /&gt;\n            &lt;/div&gt;\n           &lt;div class=\"form-group\"&gt;\n                &lt;label for='poster'&gt;Poster:&lt;/label&gt;\n                &lt;input type='url' name='poster' /&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"synopsis\"&gt;Resumen&lt;/label&gt;\n                &lt;textarea name=\"synopsis\" id=\"synopsis\" class=\"form-control\" rows=\"3\"&gt;&lt;/textarea&gt;\n            &lt;/div&gt;\n             &lt;div class=\"form-group text-center\"&gt;\n                &lt;button type=\"submit\" class=\"btn btn-primary\" style=\"padding:8px 100px;margin-top:25px;\"&gt;Afegir pel.l\u00edcula&lt;/button&gt;\n            &lt;/div&gt;\n    &lt;/form&gt; \n@endsection\n</code></pre> <p>Un segon afegit m\u00e9s que hem de tindre en compte \u00e9s que Laravel per defecte protegeix d'atacs XSS (Cross Site Scripting) de suplantaci\u00f3 d'identitat, per la qual cosa obtindrem un error de tipus 419 si enviem un formulari no validat. Per a solucionar aquest problema, n'hi ha prou amb utilitzar la directiva @csrf en el formulari, que afig un camp ocult amb un token de validaci\u00f3 de l'usuari.</p> <p>En qualsevol cas, aquest formulari s'enviar\u00e0 a la ruta indicada, que ser\u00e0 el m\u00e8tode store de catalog que s'encarregar\u00e0 de recollir les dades de la petici\u00f3 a trav\u00e9s del par\u00e0metre Request d'aquest m\u00e8tode. Disposem d'un m\u00e8tode get per a accedir a cada camp del formulari a partir del seu nom:</p> <pre><code>public function store(Request $request)\n{\n    $movie = new Movie();\n    $movie-&gt;titulo = $request-&gt;get('titulo');\n    $movie-&gt;director = $request-&gt;get('director');\n    $movie-&gt;year = $request-&gt;get('year');\n    ..\n    $movie-&gt;save();\n    return redirect()-&gt;route('movie.index');\n}\n</code></pre> <p>En aquest exemple com es pot veure s'ha afegit la classe Request com a par\u00e0metre al m\u00e8tode store. Laravel autom\u00e0ticament s'encarrega d'injectar aquestes depend\u00e8ncies pel que directament podem usar la variable $request per a obtenir les dades d'entrada.</p> <p>Si el m\u00e8tode del controlador tinguera m\u00e9s par\u00e0metres simplement els haurem d'afegir a continuaci\u00f3 de les depend\u00e8ncies, per exemple:</p> <pre><code>    public function edit(Request $request, $id) {\n    //... }\n</code></pre> <p>A continuaci\u00f3 veurem els m\u00e8todes i dades que podem obtenir a partir de la variable $request.</p>"},{"location":"7.7.Laravel_validacio.html#obtenir-els-valors-dentrada","title":"Obtenir els valors d'entrada","text":"<p>Per a obtenir el valor d'una variable d'entrada usem el m\u00e8tode input indicant el nom de la variable: </p> <pre><code>    $name = $request-&gt;input('nom');\n    // O simplement....\n    $name = $request-&gt;nom;\n</code></pre> <p>Tamb\u00e9 podem especificar un valor per defecte com a segon par\u00e0metre: </p> <pre><code>    $name = $request-&gt;input('nom', 'Pedro');\n</code></pre>"},{"location":"7.7.Laravel_validacio.html#comprovar-si-una-variable-existeix","title":"Comprovar si una variable existeix","text":"<p>Si ho necessitem podem comprovar si un determinat valor existeix en les dades d'entrada: </p> <pre><code>    if ($request-&gt;has('nom')) { //...}\n</code></pre>"},{"location":"7.7.Laravel_validacio.html#actualitzacions-i-esborrats","title":"Actualitzacions i esborrats","text":"<p>Per defecte, l'atribut method d'un formulari nom\u00e9s admet els valors GET o POST. Si volem enviar un formulari d'actualitzaci\u00f3 o esborrat, aquest ha d'anar associat als m\u00e8todes PUT o DELETE,respectivament. Per a aix\u00f2, podem emprar dins del mateix formulari la directiva @method ,indicant el nom del m\u00e8tode que volem usar:</p> <pre><code>&lt;form ...&gt;\n    @csrf\n    @method('PUT')\n    ...\n&lt;/form&gt;\n</code></pre>"},{"location":"7.7.Laravel_validacio.html#validacio-de-formularis","title":"Validaci\u00f3 de formularis","text":"<p>A m\u00e9s d'aplicar una validaci\u00f3 en el client a trav\u00e9s d'HTML5, que tamb\u00e9 \u00e9s recomanable, s'han de validar les dades en el servidor. Per a fer aix\u00f2, el propi objecte request proporciona un m\u00e8tode anomenat validate , al qual li passem un array amb les regles de validaci\u00f3. Per exemple, aix\u00ed comprovar\u00edem que el t\u00edtol i l'editorial s'han enviat, i que el t\u00edtol t\u00e9 una grand\u00e0ria m\u00ednima de 3 car\u00e0cters. A m\u00e9s, comprovem que el preu \u00e9s un valor num\u00e8ric real positiu.</p> <pre><code>public function store()\n{\n    request()-&gt;validate(\n    [\n        'title' =&gt; 'required|min:3',\n        'director' =&gt; 'required',\n        'year' =&gt; 'required|numeric|min:1900'\n    ]\n);\n// ... C\u00f3digo para procesar el formulario\n}\n</code></pre>"},{"location":"7.7.Laravel_validacio.html#utilitzar-form-requests-per-a-validacions-mes-complexes","title":"Utilitzar form requests per a validacions m\u00e9s complexes","text":"<p>Si hem de validar uns pocs camps, pot ser adequat cridar al m\u00e8tode validate des del propi m\u00e8tode del controlador, per\u00f2 per a formularis m\u00e9s grans el codi pot cr\u00e9ixer massa. Una alternativa que ofereix laravel \u00e9s crear un form request, una classe addicional que cont\u00e9 la l\u00f2gica de validaci\u00f3 d'una petici\u00f3. Es creen amb el comando php artisan , i l'opci\u00f3 make:request ,seguida del nom de la classe a crear:</p> <pre><code>php artisan make:request MoviePost\n</code></pre> <p>Aquesta classe s'emmagatzema per defecte en app/Http/Requests , i cont\u00e9 un parell de m\u00e8todes predefinits: authorize : retorna un boole\u00e0 depenent de si l'usuari actual est\u00e0 autoritzat a enviar la petici\u00f3 o no. Per a molts formularis que no requerisquen autoritzaci\u00f3 pr\u00e8via podem simplement retornar true . Ser\u00e0 el que farem de moment en aquest formulari. rules : aquest \u00e9s el m\u00e8tode que m\u00e9s ens interessa. Retorna un array de regles de validaci\u00f3 com les que ten\u00edem en el controller, aix\u00ed que movem aqueix codi ac\u00ed:</p> <pre><code>public function rules()\n{\nreturn [\n    'title' =&gt; 'required|min:3',\n    'director' =&gt; 'required',\n    'year' =&gt; 'required|numeric|min:1900'\n];\n}\n</code></pre> <p>Ara, en el m\u00e8tode del controlador simplement hem d'injectar aquest form request com a par\u00e0metre (si observem la classe que s'ha creat, \u00e9s un subtipus de Request ), i usar-lo per a validar. La validaci\u00f3 \u00e9s autom\u00e0tica, \u00e9s a dir, no hem d'afegir m\u00e9s codi al controlador que l'objecte injectat com a par\u00e0metre, que s'encarregar\u00e0 de validar la pr\u00f2pia petici\u00f3 que cont\u00e9 a trav\u00e9s del m\u00e8tode rules .</p> <pre><code>public function store(MoviePost $request)\n{\n// Si entramos aqu\u00ed, el formulario es v\u00e1lido\n}\n</code></pre>"},{"location":"7.7.Laravel_validacio.html#mostrar-missatges-derror","title":"Mostrar missatges derror","text":"<p>Si la validaci\u00f3 \u00e9s correcta, es retornar\u00e0 la dada del final de la funci\u00f3, per\u00f2 si falla algun camp, es tornar\u00e0 a la p\u00e0gina del formulari, amb la informaci\u00f3 de l'error que s'haja produ\u00eft. Podem accedir des de qualsevol lloc de Laravel a la variable \\$errors amb els errors que s'hagen produ\u00eft en una operaci\u00f3 determinada. Aquesta variable t\u00e9 un m\u00e8tode boole\u00e0 anomenat any que comprova si hi ha algun error, i un altre m\u00e8tode anomenat all que retorna el array d'errors produ\u00efts. Combinant aquests dos m\u00e8todes amb Blade, podem mostrar el llistat d'errors de validaci\u00f3 abans del formulari, d'aquesta manera:</p> <pre><code>@if ($errors-&gt;any())\n    &lt;ul&gt;\n        @foreach($errors-&gt;all() as $error)\n            &lt;li&gt;{{ $error }}&lt;/li&gt;\n        @endforeach\n    &lt;/ul&gt;\n@endif\n&lt;form ...&gt;\n    @csrf\n    ...\n&lt;/form&gt;\n</code></pre> <p>Tamb\u00e9 podem emprar el m\u00e8tode first del array d'errors per a obtindre el primer error associat a un camp, i mostrar-lo baix o sobre el camp en q\u00fcesti\u00f3. Per exemple:</p> <pre><code>&lt;form action=\"{{ route('movies.store') }}\" method=\"POST\"&gt;\n    @csrf\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"titulo\"&gt;T\u00edtulo:&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" name=\"titulo\"\nid=\"titulo\"&gt;\n        @if ($errors-&gt;has('titulo'))\n            &lt;div class=\"text-danger\"&gt;\n                {{ $errors-&gt;first('titulo') }}\n            &lt;/div&gt;\n        @endif\n    &lt;/div&gt;\n...\n</code></pre> <p>A m\u00e9s, podem personalitzar el missatge d'error a mostrar, redefinint en la classe del form request el m\u00e8tode messages* . En aquest m\u00e8tode retornem un array amb el missatge a mostrar per a cada possible error de validaci\u00f3. Per exemple:</p> <pre><code>public function messages()\n{\n    return [\n        'titulo.required' =&gt; 'El t\u00edtulo es obligatorio',\n        ...\n    ];\n}\n</code></pre> <p>De manera alternativa, si optem per validar el formulari en el propi controlador, aquest array de missatges \u00e9s passa com a segon par\u00e0metre en l'anomenada al m\u00e8tode validate :</p> <pre><code>request()-&gt;validate(\n[\n    'title' =&gt; 'required|min:3',\n    'director' =&gt; 'required',\n    'year' =&gt; 'required|numeric|min:1900'\n], [\n    'titulo.required' =&gt; 'El t\u00edtulo es obligatorio',\n    ...\n]\n);\n</code></pre>"},{"location":"7.7.Laravel_validacio.html#recordar-valors-enviats","title":"Recordar valors enviats","text":"<p>Un problema derivat de la validaci\u00f3 de dades \u00e9s que, en tornar a la p\u00e0gina del formulari despr\u00e9s d'un error, els camps que ja s'han examinat fins a l'error, encara que foren correctes, han perdut el valor que tenien, i pot resultar enutj\u00f3s haver-los de que emplenar una altra vegada. Per a mantindre el seu antic valor, podem afegir l'atribut value en cada camp del formulari, i utilitzar amb Blade una funci\u00f3 anomenada old , que permet accedir a l'anterior valor d'un determinat camp, referenciat pel seu nom:</p> <pre><code>&lt;form action=\"{{ route('movies.store') }}\" method=\"POST\"&gt;\n    @csrf\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"titulo\"&gt;T\u00edtulo:&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" name=\"titulo\"\n            id=\"titulo\" value=\"{!! old('titulo') !!}\"&gt;\n        @if ($errors-&gt;has('titulo'))\n            &lt;div class=\"text-danger\"&gt;\n                {{ $errors-&gt;first('titulo') }}\n            &lt;/div&gt;\n        @endif\n    &lt;/div&gt;\n...\n</code></pre>"},{"location":"7.7.Laravel_validacio.html#casos-especials","title":"Casos especials","text":""},{"location":"7.7.Laravel_validacio.html#obtenir-dades-agrupades","title":"Obtenir dades agrupades","text":"<p>O tamb\u00e9 podem obtenir totes les dades d'entrada alhora (en un array) o solament alguns d'ells:</p> <pre><code>    // Obtenir tots:\n        $input = $request-&gt;all();\n    // Obtenir solament els camps indicats:\n        $input = $request-&gt;only('username', 'password');\n    // Obtenir tots excepte els indicats: \n        $input = $request-&gt;except('credit_card');\n</code></pre>"},{"location":"7.7.Laravel_validacio.html#assignacio-massiva","title":"Assignaci\u00f3 Massiva","text":"<p>Tamb\u00e9 es pot utilitzar el m\u00e8tode create per a emmagatzemar un model en una \u00fanica l\u00ednia. Des del m\u00e8tode es retornar\u00e0 la inst\u00e0ncia del model inserit. No obstant a\u00e7\u00f2, abans d'a\u00e7\u00f2, cal especificar la propietat fillable o guarded del model, doncs tots els models Eloquent posseeixen protecci\u00f3 contra l'assignaci\u00f3 en massa.</p> <p>Una vulnerabilitat d'assignaci\u00f3 massiva t\u00e9 lloc quan un usuari passa un par\u00e0metre HTTP inesperat a trav\u00e9s de la sol\u00b7licitud, i aquest par\u00e0metre canvia una columna de la base de dades que no s'esperava. Per exemple, un usuari malintencionat podria enviar un par\u00e0metre is_admin a trav\u00e9s d'una petici\u00f3 HTTP, el qual es marejaria dins del m\u00e8tode create del model, permetent a l'usuari postular-se com un administrador.</p> <p>Aix\u00ed que, per a comen\u00e7ar, cal definir a quins atributs se'ls permet l'assignaci\u00f3 massiva. A\u00e7\u00f2 s'estableix en la propietat fillable del model. Per exemple, anem a permetre l'assignaci\u00f3 massiva sobre l'atribut name d'un model Flight:</p> <pre><code>&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['name'];\n}\n</code></pre>"},{"location":"7.7.Laravel_validacio.html#atributes-guarding","title":"Atributes Guarding","text":"<p>Mentre que \\$fillable serveix com una \"llista blanca\" d'atributs que poden ser assignats massivament, tamb\u00e9 es pot optar per \\$guarded. La propietat guarded cont\u00e9 un array d'atributs que no poden ser assignats de forma massiva.  La resta d'atributs que no es troben en el array si podran. Pel que, \\$guarded actua com una \"llista negra\". Per descomptat, s'ha d'establir \\$fillable o \\$guarded - mai tots dos. En l'exemple que segueix, tots els atributs excepte price comptaran amb assignaci\u00f3 massiva:</p> <pre><code>&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The attributes that aren't mass assignable.\n     *\n     * @var array\n     */\n    protected $guarded = ['price'];\n}\n</code></pre> <p>Si es desitja que tots els atributs es puguen assignar en massa, es pot definir la propietat $guarded com un array buit:</p> <pre><code>/*\n* The attributes that llauren't mass assignable.\n*\n* @var array\n/\nprotected $guarded = [];\n</code></pre>"},{"location":"7.7.Laravel_validacio.html#fitxers-dentrada","title":"Fitxers d'entrada","text":"<p>Laravel facilita una s\u00e8rie de classes per a treballar amb els fitxers d'entrada. Per exemple per a obtenir un fitxer que s'ha enviat en el camp amb nom photo i guardar-ho en una variable, hem de fer:</p> <pre><code>$file = $request-&gt;file('photo');\n// O simplement... \n$file = $request-&gt;photo;\n</code></pre> <p>Si volem podem comprovar si un determinat camp t\u00e9 un fitxer assignat:</p> <pre><code>if ($request-&gt;hasFile('photo')) { //...}\n</code></pre> <p>El Symfony\\Component\\HttpFoundation\\File\\UploadedFile est\u00e9n de la classe de PHP SplFileInfo, per tant, tindrem molts m\u00e8todes que podem utilitzar per a obtenir dades del fitxer o per a gestionar-ho.</p> <p>Per exemple, per a comprovar si el fitxer que s'ha pujat \u00e9s v\u00e0lid:</p> <pre><code>if ($request-&gt;file('photo')-&gt;isValid()) { //...}\n</code></pre> <p>O per a moure el fitxer d'entrada a una ruta determinada: </p> <pre><code>// Moure el fitxer a la ruta conservant el nom original\n    $request-&gt;file('photo')-&gt;move($destinationPath);\n// Moure el fitxer a la ruta amb un nou nom: \n    $request-&gt;file('photo')-&gt;move($destinationPath, $fileName);\n</code></pre> <p>Laravel incorpora una llibreria que ens permet gestionar l'acc\u00e9s i escriptura de fitxers en un emmagatzematge. L'interessant d'a\u00e7\u00f2 \u00e9s que ens permet manejar de la mateixa forma l'emmagatzematge en local, en Amazon S3 i en Rackspace Cloud Storage, simplement ho hem de configurar en config/filesystems.php i posteriorment els podrem usar de la mateixa forma. </p> <p>Per exemple, per a emmagatzemar un fitxer pujat mitjan\u00e7ant un formulari hem d'usar el m\u00e8tode store indicant com a par\u00e0metre la ruta on volem emmagatzemar el fitxer (sense el nom del fitxer):</p> <pre><code>$path = $request-&gt;photo-&gt;store('images');\n$path = $request-&gt;photo-&gt;store('images', 's3'); // Especificar un emmagatzematge\n</code></pre> <p>Aquests m\u00e8todes retornaran el path fins al fitxer emmagatzemat de forma relativa a l'arrel de disc configurada. Per al nom del fitxer es generar\u00e0 autom\u00e0ticament un UUID (identificador \u00fanic universal). Si volem especificar nosaltres el nom haur\u00edem d'usar el m\u00e8tode storeAs:</p> <pre><code>$path = $request-&gt;photo-&gt;storeAs('images', 'filename.jpg'); \n$path = $request-&gt;photo-&gt;storeAs('images', 'filename.jpg', 's3');\n</code></pre> <p>Altres m\u00e8todes que podem utilitzar per a recuperar informaci\u00f3 del fitxer s\u00f3n:</p> <pre><code>    // Obtenir la ruta:\n    $path = $request-&gt;file('photo')-&gt;getRealPath();\n    // Obtenir el nom original:\n    $name = $request-&gt;file('photo')-&gt;getClientOriginalName();\n    // Obtenir l'extensi\u00f3:\n    $extension = $request-&gt;file('photo')-&gt;getClientOriginalExtension();\n    // Obtenir la grand\u00e0ria:\n    $size = $request-&gt;file('photo')-&gt;getSize();\n    // Obtenir el Type:\n    $acarone = $request-&gt;file('photo')-&gt;getMimeType();\n</code></pre>"},{"location":"7.8.Laravel_autenticacio.html","title":"7.8.Laravel autenticacio","text":""},{"location":"7.8.Laravel_autenticacio.html#control-dusuaris","title":"Control d'usuaris","text":"<p>A l'hora d'afegir autenticaci\u00f3 d'usuaris en les nostres aplicacions Laravel, hem de tindre en compte que existeixen dos possibles escenaris:</p> <ul> <li>Estem treballant sobre un projecte ja existent que no disposa d'autenticaci\u00f3</li> <li>Estem creant un nou projecte en el qual definirem l'autenticaci\u00f3 des de l'inici</li> </ul> <p>En el primer cas, haurem d'implementar una autenticaci\u00f3 m\u00e9s o menys \"manual\", encara que molt senzilla. En el segon cas, podem especificar unes opcions en crear el projecte que ens facilitaran molt la incorporaci\u00f3 del login, i fins i tot del registre de nous usuaris. Veurem cada cas per separat.</p>"},{"location":"7.8.Laravel_autenticacio.html#configuracio-general-de-lautenticacio","title":"Configuraci\u00f3 general de l'autenticaci\u00f3","text":"<p>En l'arxiu config/auth.php es disposa d'algunes opcions de configuraci\u00f3 generals d'autenticaci\u00f3. Aquesta autenticaci\u00f3 en Laravel es recolza en dos elements: els guards i els providers.</p> <ul> <li> <p>Els guards s\u00f3n mecanismes que defineixen com s'autenticaran els usuaris per a cada petici\u00f3. El mecanisme m\u00e9s habitual \u00e9s mitjan\u00e7ant sessions, on es guarda la informaci\u00f3 de l'usuari autenticat en la sessi\u00f3, encara que per defecte tamb\u00e9 s'habilita l'autenticaci\u00f3 mitjan\u00e7ant tokens.</p> </li> <li> <p>Els providers indiquen com s'obtindran els usuaris de la base de dades per a comprovar l'autenticaci\u00f3. Les opcions habilitades per defecte s\u00f3n mitjan\u00e7ant Eloquent (i el model d'usuaris que tinguem definit), o mitjan\u00e7ant query builder, consultant directament la taula corresponent d'usuaris.</p> </li> </ul> <p>Haurem de modificar en l'arxiu la refer\u00e8ncia a la taula on emmagatzemarem els usuaris (per defecte es fa refer\u00e8ncia a una taula anomenada users ) i/o al model associat (per defecte, la classe User ). Aix\u00ed que convindr\u00e0 modificar els noms d'aquests dos elements en la secci\u00f3 providers , aix\u00ed com la ubicaci\u00f3 (namespace) del model d'usuari, si escau. Per exemple:</p> <pre><code>...\n'providers' =&gt; [\n'users' =&gt; [\n'driver' =&gt; 'eloquent',\n'model' =&gt; App\\Models\\Usuario::class,\n],\n// 'users' =&gt; [\n// 'driver' =&gt; 'database',\n// 'table' =&gt; 'usuarios',\n// ],\n],\n</code></pre> <p>Notar que la secci\u00f3 providers disposa de dos prove\u00efdors d'autenticaci\u00f3: un (el que est\u00e0 habilitat) est\u00e0 basat en Eloquent, i fa \u00fas del model d'usuaris que h\u00e0gem definit. L'altre (que apareix comentat) no utilitza Eloquent, sin\u00f3 del query builder contra la pr\u00f2pia base de dades. Si preferim aquesta segona opci\u00f3, haurem de comentar la primera i deixar habilitada la segona. Tamb\u00e9 \u00e9s possible deixar habilitats m\u00faltiples providers, cadascun amb un nom diferent, i assignar-lo a m\u00faltiples guards.</p>"},{"location":"7.8.Laravel_autenticacio.html#el-model-o-la-taula-users","title":"El model o la taula users","text":"<p>Si triem el provider basat en Eloquent, haurem de tindre un model d'usuaris al qual accedir. En el cas de la nostra aplicaci\u00f3 de blog, disposem ja d'un model creat en App\\Models\\Usuari , per la qual cosa l'exemple anterior ens serviria per a establir aquest model com el model d'usuaris per defecte.</p> <p>Si optem per utilitzar el query builder en lloc de Eloquent, haurem de tindre una taula en la base de dades on estiguen les dades dels usuaris. En el nostre cas, tamb\u00e9 disposem d'aqueixa taula usuaris, per la qual cosa podr\u00edem emprar aquesta altra opci\u00f3 per a autenticar usuaris si volgu\u00e9rem. </p> <p>No obstant aix\u00f2, ens valdrem de Eloquent per a l'autenticaci\u00f3. En qualsevol cas, com veurem a continuaci\u00f3, ser\u00e0 convenient que els passwords dels usuaris estiguen encriptats mitjan\u00e7ant bcrypt, que \u00e9s el mecanisme d'encriptaci\u00f3 per defecte que utilitza Laravel. </p>"},{"location":"7.8.Laravel_autenticacio.html#afegir-autentiacio-a-un-projecte-existent","title":"Afegir autentiaci\u00f3 a un projecte existent","text":"<p>Per a afegir autenticaci\u00f3 a un projecte Laravel ja existent que no dispose d'aquests mecanismes,seguirem aquests passos:</p> <ol> <li>Definirem un formulari de *login</li> <li>Definirem un nou controlador que s'encarregue de gestionar el *login: tant de mostrar el formulari quan l'usuari no estiga autenticat com de validar les seues credencials quan les envie</li> <li>Afegirem les rutes pertinents en l'arxiu routes/web.php tant per al formulari de *login com per a l'autenticaci\u00f3 posterior</li> <li>Protegirem les rutes que siguen d'acc\u00e9s restringit</li> <li>Opcionalment, podem afegir tamb\u00e9 una opci\u00f3 de logout.</li> </ol>"},{"location":"7.8.Laravel_autenticacio.html#el-formulari-de-login","title":"El formulari de login","text":"<p>Definirem un formulari de login en la vista **resources/views/auth/login.blade.php , perqu\u00e8  l'usuari especifique el seu login i el seu password. Tamb\u00e9 deixarem una zona per a mostrar un possible missatge d'error si l'autenticaci\u00f3 no ha sigut reeixida:</p> <pre><code>@extends('plantilla')\n@section('titulo', 'Login')\n@section('contenido')\n    &lt;h1&gt;Login&lt;/h1&gt;\n    @if (!empty($error))\n        &lt;div class=\"text-danger\"&gt;\n            {{ $error }}\n        &lt;/div&gt;\n    @endif\n&lt;form action=\"{{ route('login') }}\" method=\"POST\"&gt;\n    @csrf\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"login\"&gt;Login:&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\"\nname=\"login\" id=\"login\" /&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\n        &lt;input type=\"password\" class=\"form-control\"\nname=\"password\" id=\"password\" /&gt;\n    &lt;/div&gt;\n    &lt;input type=\"submit\" name=\"enviar\" value=\"Enviar\"\nclass=\"btn btn-dark btn-block\"&gt;\n&lt;/form&gt;\n@endsection\n</code></pre>"},{"location":"7.8.Laravel_autenticacio.html#el-controlador-de-login","title":"El controlador de Login","text":"<p>Crearem un nou controlador que s'encarregue de gestionar tota l'autenticaci\u00f3:</p> <pre><code>php artisan make:controller LoginController\n</code></pre> <p>Dins, definim una funci\u00f3 que s'encarregar\u00e0 de mostrar el formulari anterior:</p> <pre><code>public function loginForm()\n{\n    return view('auth.login');\n}\n</code></pre> <p>I afegirem una segona funci\u00f3 que s'encarregue de validar les credencials enviades per l'usuari. Per a aix\u00f2,farem \u00fas del facade d'autenticaci\u00f3, existent en Illuminate\\Support\\Facades\\Auth . Recorda que un facade \u00e9s b\u00e0sicament un element que proporciona acc\u00e9s a una s\u00e8rie de m\u00e8todes est\u00e0tics d'utilitat, en aquest cas per a autenticar usuaris.</p> <pre><code>namespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass LoginController extends Controller\n{\n    ...\n    public function login(Request $request)\n    {\n        $credenciales = $request-&gt;only('login', 'password');\n        if (Auth::attempt($credenciales))\n        {\n            // Autenticaci\u00f3n exitosa\n            return redirect()-&gt;intended(route('movies.index'));\n        } else {\n            $error = 'Usuario incorrecto';\n            return view('auth.login', compact('error'));\n        }\n    }\n}\n</code></pre> <p>El m\u00e8tode attempt accepta una s\u00e8rie de parells clau-valor com a primer par\u00e0metre. En aquest cas, li passem un nom\u00e9s parell format pel login (o l'e-mail, depenent del camp que usem per a autenticar) i el password rebuts en la petici\u00f3. Aix\u00f2 servir\u00e0 per a localitzar a l'usuari per la clau , i comprovar si t\u00e9 el valor associat (el password). En el cas dels passwords, Laravel autom\u00e0ticament els encripta en format bcrypt, per la qual cosa hem de cerciorar-nos que el password est\u00e0 encriptat en aqueix format en la base de dades.</p> <p>D'altra banda, el m\u00e8tode intended tracta d'enviar a l'usuari a la ruta a la qual intentava accedir abans que se li sol\u00b7licitara autenticaci\u00f3. Li passem com a par\u00e0metre una ruta per defecte en el cas que la destinaci\u00f3 prevista no estiga disponible.</p>"},{"location":"7.8.Laravel_autenticacio.html#les-rutes-associades","title":"Les rutes associades","text":"<p>Finalment, hem de definir les rutes tant per a mostrar el formulari (per get) com per a recollir les credencials i validar a l'usuari (per post).</p> <pre><code>Route::get('login', [LoginController::class, 'loginForm'])-&gt;name('login');\nRoute::post('login', [LoginController::class, 'login']);\n</code></pre>"},{"location":"7.8.Laravel_autenticacio.html#redireccio-en-cas-derror","title":"Redirecci\u00f3 en cas d'error","text":"<p>Quan es detecta que un usuari no autenticat intenta accedir a una ruta protegida, autom\u00e0ticament se li redirigeix a la ruta nomenada com login (com la que hem definit pr\u00e8viament), on veur\u00e0 el formulari d'acc\u00e9s. Si volem canviar el nom de la ruta a la qual redirigir (en el cas que no vulguem que siga login), hem de modificar el m\u00e8tode redirectTo en el middleware d'autenticaci\u00f3 app/Http/Middleware/Authenticate.php :</p> <pre><code>protected function redirectTo($request)\n{\n...\nreturn route('login');\n}\n</code></pre>"},{"location":"7.8.Laravel_autenticacio.html#protegir-les-rutes-dacces-restringit","title":"Protegir les rutes d'acc\u00e9s restringit","text":"<p>Ara que ja tenim definit el mecanisme de login (controlador amb m\u00e8tode d'autenticaci\u00f3, formulari de login i ruta associada), podem protegir aquelles rutes o enlla\u00e7os que vulguem que siguen d'acc\u00e9s restringit. Per exemple, podem fer que les operacions de creaci\u00f3, esborrat i edici\u00f3 de videos (funcions create , store , edit , update i destroy ) nom\u00e9s estiguen disponibles per a usuaris autenticats. Aix\u00f2 pot fer-se de diverses formes.</p> <p>Si tenim una ruta de recursos ( Route::resource ) en l'arxiu routes/web.php , llavors l'opci\u00f3 m\u00e9s c\u00f2moda \u00e9s definir un constructor en el controlador associat (en aquest cas,MovieController ), i especificar quines funcions volem protegir, b\u00e9 amb only o amb except (en aquest \u00faltim cas, es protegiran totes les rutes excepte les indicades en la llista):</p> <pre><code>class LibroController extends Controller\n{\n    public function __construct()\n    {\n        $this-&gt;middleware('auth',['only' =&gt; ['create', 'store', 'edit', 'update', 'destroy']]);\n    }\n...\n</code></pre> <p>Si definim les rutes soltes, podem emprar el m\u00e8tode middleware per a indicar en cadascuna si volem que s'aplique el middleware d'autenticaci\u00f3:</p> <pre><code>Route::get('prueba', [PruebaController::class, 'create'])-&gt;middleware('auth');\n</code></pre>"},{"location":"7.8.Laravel_autenticacio.html#detectar-en-les-vistes-lusuari-autenticat","title":"Detectar en les vistes l'usuari autenticat","text":"<p>Pot ser molt necessari detectar en una vista si l'usuari s'ha autenticat o no, b\u00e9 per a mostrar certs controls (per exemple, enlla\u00e7os per a crear llibres), o per a carregar informaci\u00f3 pr\u00f2pia de l'usuari (per exemple, posts creats per l'usuari que ha entrat en un blog). Per exemple, d'aquesta manera podem modificar el men\u00fa de navegaci\u00f3 ( **resources/views/partials/nav.blade.php ) perqu\u00e8 mostre l'enlla\u00e7 de crear nou nova pel\u00edcula nom\u00e9s si l'usuari s'ha autenticat:</p> <p><pre><code>@if(Auth()::check())\n    &lt;li class=\"{{ setActivo('movies.create') }} nav-item\"&gt;\n&lt;a class=\"nav-link\" href=\"{{ route('movies.create') }}\"&gt;Nova pelicula&lt;/a\n&lt;/li&gt;\n@endif\n</code></pre> Podem emprar el m\u00e8tode Auth::guest() si volem comprovar si l'usuari encara NO s'ha autenticat (per exemple, per a mostrar-li l'enlla\u00e7 a login), i el m\u00e8tode Auth::check() per a comprovar si SI est\u00e0 autenticat (per a mostrar-li, per exemple, les opcions restringides). De manera an\u00e0loga, el m\u00e8tode Auth::user() obt\u00e9 l'objecte de l'usuari autenticat, amb el que podem accedir als seus atributs:</p> <pre><code>Bienvenido/a {{ Auth::user()-&gt;login }}\n</code></pre>"},{"location":"7.8.Laravel_autenticacio.html#implementacio-del-logout","title":"Implementaci\u00f3 del logout","text":"<p>Per a implementar el logout, n'hi ha prou amb cridar al m\u00e8tode logout del facade Auth utilitzat anteriorment, en el m\u00e8tode que es vaja a encarregar d'aqueixa tasca. Ho podem afegir en el mateix controlador anterior:</p> <pre><code>namespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nclass LoginController extends Controller\n{\n    ...\n    public function logout()\n    {\n        Auth::logout();\n        // ... Renderizar la vista deseada\n    }\n</code></pre> <p>Tamb\u00e9 far\u00e0 falta definir la ruta associada en routes/web.php :</p> <pre><code>Route::get('logout', [LoginController::class, 'logout'])-&gt;name('logout');\n</code></pre> <p>\u00d2bviament, tamb\u00e9 ser\u00e0 necessari afegir un enlla\u00e7 per a fer logout en alguna part. Podem posar-ho en el men\u00fa de navegaci\u00f3 (arxiu resources/views/partials/nav.blade.php , quan detectem que l'usuari est\u00e0 autenticat):</p> <pre><code>@if(Auth::check())\n    &lt;li class=\"{{ setActivo('movies.create') }} nav-item\"&gt;\n        &lt;a class=\"nav-link\" href=\"{{ route('movies.create') }}\"&gt;Nuevo libro&lt;/a\n    &lt;/li&gt;\n    &lt;li class=\"nav-item\"&gt;\n        &lt;a class=\"nav-link\" href=\"{{ route('logout') }}\"&gt;Logout&lt;/a&gt;\n    &lt;/li&gt;\n@endif\n</code></pre>"},{"location":"7.8.Laravel_autenticacio.html#crear-un-projecte-desde-cero-amb-lautenticacio-incorporada","title":"Crear un projecte desde cero amb l'autenticaci\u00f3 incorporada","text":"<p>Laravel tamb\u00e9 ofereix l'opci\u00f3 de crear un projecte des de zero incorporant mecanismes d'autenticaci\u00f3 d'usuaris des del principi. Aquesta opci\u00f3 ha variat amb el pas de les versions de Laravel,per\u00f2 b\u00e0sicament es conserva una mateixa ess\u00e8ncia: quan creem el projecte, podem deixar ja establit el model d'usuaris, i mecanismes per a registrar i autenticar usuaris en l'aplicaci\u00f3.</p> <p>Per a crear un projecte amb aquesta infraestructura ja definida executem el comando laravel new amb l'opci\u00f3 --jet en Laravel 8.</p> <pre><code>laravel new nombre_proyecto --jet\n</code></pre> <p>Aix\u00f2 crear\u00e0 el projecte incorporant la infraestructura de gesti\u00f3 d'usuaris, juntament amb formularis b\u00e0sics per a registre i login. En el cas de Laravel 8 s'empra JetStream, la nova utilitat incorporada en aquesta versi\u00f3 per a proporcionar l'esquelet b\u00e0sic o scaffolding d'autenticaci\u00f3.  Una de les principals difer\u00e8ncies entre totes dues versions \u00e9s que en Laravel 7 s'empra Bootstrap per a l'aparen\u00e7a o el disseny web, i en Laravel 8 s'empra Tailwind. Ho podem comprovar donant una ullada al contingut de la carpeta views , on ja tindrem unes quantes vistes preparades per a registre, login, recuperaci\u00f3 de contrasenya, etc:</p> <p>Evidentment, abans de poder fer res necessitem tindre una base de dades creada. Recorda crear-la i modificar les dades de connexi\u00f3 en l'arxiu .env del teu projecte, i tamb\u00e9 executar les migracions predefinides en el projecte amb php artisan migrate:fresh.</p>"},{"location":"7.8.Laravel_autenticacio.html#canviar-lidioma","title":"Canviar l'idioma","text":"<p>Un dels inconvenients que tenim en utilitzar aquest scaffolding \u00e9s que tots els enlla\u00e7os i camps de formularis que s'han creat v\u00e9nen amb textos en angl\u00e9s. Podem afegir missatges en altres idiomes amb dos passos senzills:</p> <ul> <li>D'una banda, hem de modificar la regi\u00f3 (locale) per defecte definida en l'arxiu config/app.php . Aix\u00ed la deixar\u00edem per a fixar l'idioma en espanyol:</li> </ul> <p><pre><code>'locale' =&gt; 'es',\n</code></pre> * D'altra banda, hem de descarregar el paquet de fitxers en l'idioma corresponent, i situar-lo en la subcarpeta adequada dins de resources/lang . En el nostre cas, podem per exemple copiar els arxius d'aquesta carpeta en la subcarpeta resources/lang del nostre projecte, de manera que l'arxiu es.json quedar\u00e0 en aqueixa carpeta, i a m\u00e9s es crear\u00e0 una subcarpeta es amb el contingut dels arxius que hi ha en aqueix repositori. </p> <p>Si els donem una ullada, podem veure que contenen les traduccions a l'espanyol de diferents missatges de diferents seccions de la web. Amb aix\u00f2 ja podrem veure els continguts de la web en espanyol. Aquesta \"m\u00e0gia\" es deu al fet que en les vistes que hem carregat, els missatges s'obtenen directament d'aquesta carpeta resources/lang per a l'idioma especificat en config/app.php . Per exemple, aix\u00ed es mostra el missatge Forgot Your Password? original en el formulari de login:</p> <pre><code>&lt;a class=\"btn btn-link\" href=\"{{ route('password.request') }}\"&gt;\n{{ __('Forgot Your Password?') }}\n&lt;/a&gt;\n</code></pre> <p>La instrucci\u00f3 __() cerca la clau que li passem (Forgot Your Password?) en els arxius de configuraci\u00f3 en angl\u00e9s, i si no la troba, posa directament la clau sense m\u00e9s. Si busquem aquesta mateixa clau en l'arxiu es.json que hem descarregat, podem veure per qu\u00e8 text se substituir\u00e0 quan canviem l'idioma a espanyol:</p> <pre><code>\"Forgot Your Password?\": \"\u00bfOlvidaste tu contrase\u00f1a?\",\n</code></pre>"},{"location":"7.8.Laravel_autenticacio.html#altres-consideracions","title":"Altres consideracions","text":"<p>La incorporaci\u00f3 del scaffolding d'autenticaci\u00f3, com podem comprovar, estalvia molta faena a l'hora de definir els mecanismes de registre i login d'usuaris en el sistema. No obstant aix\u00f2, queden algunes tasques pendents que poden requerir una configuraci\u00f3 addicional, i que no veurem en aquest curs per falta de temps.</p> <p>Una d'elles, per exemple, \u00e9s l'opci\u00f3 de recuperar contrasenya quan punxem en l'enlla\u00e7 de Vas oblidar la teua contrasenya?. En principi, i at\u00e9s que ens registrem amb un e-mail com login, ens demana que facilitem aquest e-mail per a enviar-nos un enlla\u00e7 per a restablir la contrasenya. No obstant aix\u00f2, hem de configurar apropiadament el correu SMTP per a poder enviar el missatge. Per a aix\u00f2, necessitem un compte origen, i depenent del servidor de correu on el tinguem creat (Gmail, Outlook, etc), la configuraci\u00f3 \u00e9s diferent. Ac\u00ed, per exemple, explica els passos a seguir per a configurar com a compte emissora una de Gmail. </p>"},{"location":"7.8.Laravel_autenticacio.html#definir-roles-us-de-middleware","title":"Definir roles. \u00das de middleware","text":"<p>Per a poder definir rols per als diferents usuaris de la nostra aplicaci\u00f3, \u00f2bviament hem de comen\u00e7ar per definir un nou camp en la taula d'usuaris per a emmagatzemar aquest rol.</p> <p>Despr\u00e9s, per a protegir certes rutes en funci\u00f3 dels rols, podem ocultar l'enlla\u00e7 en les vistes amb una simple comprovaci\u00f3. Per exemple, assumint que el camp dels rols es diu rol:</p> <pre><code>@if (Auth::user()-&gt;rol === 'admin')\n    // Mostrar contenido\n@endif\n</code></pre> <p>No obstant aix\u00f2, si accedim a la URL sense passar per l'enlla\u00e7, podrem veure el contingut. Devem novament incorporar el middleware auth al controlador que corresponga (si no ho est\u00e0 ja), per a protegir l'acc\u00e9s general per a usuaris autenticats. A m\u00e9s, hem de definir un middleware propi que verifique el rol de l'usuari logueado. Podem crear-ho amb aquest comando: </p> <pre><code>php artisan make:middleware RolCheck\n</code></pre> <p>En aquest cas hem anomenat al middleware RolCheck , per\u00f2 el nom pot ser el que vulguem. Aquest middleware es crear\u00e0 en la carpeta App\\Http\\Middleware . Hem d'editar el seu m\u00e8tode handle per a verificar que els usuaris s\u00f3n de tipus \"admin\":</p> <pre><code>public function handle($request, Closure $next, $rol)\n{\n    if (Auth::user()-&gt;rol === $rol)\n        return $next($request);\n    else\n        return redirect('/');\n}\n</code></pre> <p>Despr\u00e9s de definir el middleware, ho registrem en l'arxiu App/Http/Kernel.php (en l'apartat de routeMiddleware):</p> <pre><code>protected $routeMiddleware = [\n...\n'roles' =&gt; \\App\\Http\\Middleware\\RolCheck::class\n</code></pre> <p>Finalment, ho carreguem en el constructor del nostre controlador. Podem incloure amb except i only restriccions sobre quins m\u00e8todes del controlador es veuran afectats o no pel middleware.</p> <pre><code>public function __construct()\n{\n    $this-&gt;middleware(['auth', 'roles:admin']);\n}\n</code></pre> <p>En aquest exemple, hem mapatge el middleware amb l'\u00e0lies rols en l'arxiu Kernel.php , i el que hi ha despr\u00e9s dels dos punts \u00e9s el par\u00e0metre extra que t\u00e9 el m\u00e8tode handle del middleware (el rol a comprovar). En el cas de voler passar m\u00e9s par\u00e0metres, es pot fer separats per comes.</p>"},{"location":"7.8.Laravel_autenticacio.html#sobre-el-concepte-de-middleware","title":"Sobre el concepte de middleware","text":"<p>Hem comentat breument el concepte de middleware associat tant al mecanisme d'autenticaci\u00f3 com a la classe \"extra\" que podem crear per a comprovar rols. En general, un middleware \u00e9s un fragment de codi (normalment una funci\u00f3) que s'executa enmig d'un proc\u00e9s. En aquest cas, s'executa des que es rep la petici\u00f3 fins que s'emet la resposta, i permet alterar aqueix flux normal, fent certes comprovacions sobre la petici\u00f3. Per exemple, com \u00e9s el cas, verificar que l'usuari t\u00e9 els permisos adequats abans d'emetre una resposta o una altra.</p>"},{"location":"8.1.Laravel_restfull.html","title":"8.1.Laravel restfull","text":""},{"location":"8.1.Laravel_restfull.html#desenvolupament-de-serveis-rest","title":"Desenvolupament de serveis REST","text":""},{"location":"8.1.Laravel_restfull.html#introduccio-als-serveis-rest","title":"Introducci\u00f3 als serveis REST","text":"<p>Video</p> <p>A hores d'ara tots haur\u00edem de tindre clar que qualsevol aplicaci\u00f3 web es basa en una arquitectura client-servidor, on un servidor queda a l'espera de connexions de clients, i els clients es connecten als servidors per a sol\u00b7licitar certs recursos. Sobre aquesta base, veurem unes breus pinzellades de com funciona el protocol HTTP, i en qu\u00e8 consisteixen els serveis REST.</p>"},{"location":"8.1.Laravel_restfull.html#el-protocol-http","title":"El protocol HTTP","text":"<p>Les comunicacions web entre client i servidor es realitzen mitjan\u00e7ant el protocol HTTP (o HTTPS, en el cas de comunicacions segures). En tots dos casos, client i servidor s'envien certa informaci\u00f3 est\u00e0ndard, en cada missatge.</p> <p>Quant als clients, envien al servidor les dades del recurs que sol\u00b7liciten, juntament amb certa informaci\u00f3 addicional, com per exemple les cap\u00e7aleres de petici\u00f3 (informaci\u00f3 relativa a la mena de client o navegador, contingut que accepta, etc), i par\u00e0metres addicionals anomenats normalment dades del formulari, ja que  solen contindre la informaci\u00f3 d'algun formulari que s'envia de client a servidor.</p> <p>Pel que respecta als servidors, accepten aquestes peticions, les processen i envien de tornada algunes dades rellevants, com un codi d'estat (indicant si la petici\u00f3 va poder ser atesa satisfact\u00f2riament o no), cap\u00e7aleres de resposta (indicant el tipus de contingut enviat, grand\u00e0ria, idioma, etc), i el recurs sol\u00b7licitat pr\u00f2piament dit, si tot ha anat correctament.</p> <p>Aquest \u00e9s el mecanisme que hem estat utilitzant fins ara a trav\u00e9s dels controladors: reben la petici\u00f3 concreta del client, i envien una resposta, que de moment s'ha centrat en renderitzar un contingut HTML d'una vista.</p> <p>Quant als codis d'estat de la resposta, dep\u00e9n del resultat de l'operaci\u00f3 que s'haja realitzat, aquests es cataloguen en cinc grups:</p> <ul> <li> <p>Codis 1xx: representen informaci\u00f3 sobre una petici\u00f3 normalment incompleta. No s\u00f3n molt habituals, per\u00f2 es poden emprar quan la petici\u00f3 \u00e9s molt llarga, i s'envia abans una cap\u00e7alera per a comprovar si es pot processar aquesta petici\u00f3.</p> </li> <li> <p>Codis 2xx: representen peticions que s'han pogut atendre satisfact\u00f2riament. El codi m\u00e9s habitual \u00e9s el 200, resposta est\u00e0ndard per a les peticions que s\u00f3n correctes. Existeixen altres variants, com el codi 201, que s'envia quan s'ha inserit o creat un nou recurs en el servidor (una inserci\u00f3 en una base de dades, per exemple), o el codi 204, que indica que la petici\u00f3 s'ha at\u00e9s b\u00e9, per\u00f2 no s'ha retornat res com a resposta.</p> </li> <li> <p>Codis 3xx: s\u00f3n codis de redirecci\u00f3, que indiquen que d'alguna manera la petici\u00f3 original s'ha redirigit a un altre recurs del servidor. Per exemple, el codi 301 indica que el recurs sol\u00b7licitat s'ha mogut permanentment a una altra URL. El codi 304 indica que el recurs sol\u00b7licitat no ha canviat des de l'\u00faltima vegada que es va sol\u00b7licitar, per si es vol recuperar de la caixet local en aqueix cas.</p> </li> <li> <p>Codis 4xx: indiquen un error per part del client. El m\u00e9s t\u00edpic \u00e9s l'error 404, que indica que estem sol\u00b7licitant una URL o recurs que no existeix. Per\u00f2 tamb\u00e9 hi ha altres habituals, com el 401 (client no autoritzat), o 400 (les dades de la petici\u00f3 no s\u00f3n correctes, per exemple, perqu\u00e8 els camps del formulari no s\u00f3n v\u00e0lids).</p> </li> <li> <p>Codis 5xx: indiquen un error per part del servidor. Per exemple, l'error 500 indica un error intern del servidor, o el 504, que \u00e9s un error de timeout per temps excessiu a emetre la resposta.</p> </li> </ul> <p>Farem \u00fas d'aquests codis d'estat en els nostres serveis REST per a informar el client de la mena d'error que s'haja produ\u00eft, o de l'estat en qu\u00e8 s'ha pogut atendre la seua petici\u00f3.</p>"},{"location":"8.1.Laravel_restfull.html#els-serveis-rest","title":"Els serveis REST","text":"<p>REST s\u00f3n les sigles de REpresentational State Transfer, i designa un estil d'arquitectura d'aplicacions distribu\u00efdes basada en HTTP. En un sistema REST, identifiquem cada recurs a sol\u00b7licitar amb una URI (identificador uniforme de recurs), i definim un conjunt delimitat de comandos o m\u00e8todes a realitzar,que t\u00edpicament s\u00f3n:</p> <ul> <li>GET: per a obtindre resultats d'algun tipus (llistats complets o filtrats per alguna condici\u00f3) POST: per a realitzar insercions o afegir elements en un conjunt de dades</li> <li> <p>PUT: per a realitzar modificacions o actualitzacions del conjunt de dades</p> </li> <li> <p>DELETE: per a realitzar esborrats del conjunt de dades</p> </li> </ul> <p>Existeixen altres tipus de comandos o m\u00e8todes, com per exemple PATCH (similar a PUT, per\u00f2 per a canvis parcials), HEAD (per a consultar nom\u00e9s l'encap\u00e7alat de la resposta obtinguda), etc. Ens centrarem de moment en els quatre m\u00e8todes principals anteriors.</p> <p>Per tant, identificant el recurs a sol\u00b7licitar i el comando a aplicar-li, el servidor que ofereix aquesta API REST proporciona una resposta a aqueixa petici\u00f3. Aquesta resposta t\u00edpicament ve donada per un missatge en format JSON o XML (encara que aquest cada vegada est\u00e0 m\u00e9s en des\u00fas). Aix\u00f2 permet que les aplicacions puguen estendre's a diferents plataformes, i accedir als mateixos serveis des d'una aplicaci\u00f3 Angular, o una aplicaci\u00f3 d'escriptori .NET, o una aplicaci\u00f3 m\u00f2bil en Android, per posar diversos exemples.</p> <p>ACLARIMENT: per als qui no conegueu la definici\u00f3 de API (Application Programming Interface), b\u00e0sicament \u00e9s el conjunt de m\u00e8todes o funcionalitats que es posen a la disposici\u00f3 dels qui els vulguen utilitzar. En aquest cas, el concepte de API REST fa refer\u00e8ncia al conjunt de serveis REST proporcionats pel servidor per als clients que vulguen utilitzar-los.</p>"},{"location":"8.1.Laravel_restfull.html#nivells-arquitectura-rest","title":"Nivells arquitectura REST","text":""},{"location":"8.1.Laravel_restfull.html#el-format-json","title":"El format JSON","text":"<p>JSON s\u00f3n les sigles de Javascript Object Notation, una sintaxi pr\u00f2pia de Javascript per a poder representar objectes com a cadenes de text, i poder aix\u00ed serialitzar i enviar informaci\u00f3 d'objectes a trav\u00e9s de fluxos de dades (arxius de text, comunicacions client-servidor, etc). Un objecte Javascript es defineix mitjan\u00e7ant una s\u00e8rie de propietats i valors. Per exemple, les dades d'una persona (com a nom i edat) podr\u00edem emmagatzemar-los aix\u00ed:</p> <pre><code>let persona = {\nnombre: \"Nacho\",\nedad: 39\n};\n</code></pre> <p>Aquest mateix objecte, convertit a JSON, formaria una cadena de text amb aquest contingut:</p> <pre><code>{\"nombre\":\"Nacho\",\"edad\":39}\n</code></pre> <p>De la mateixa manera, si tenim una col\u00b7lecci\u00f3 (vector) d'objectes com aquesta:</p> <pre><code>let personas = [\n{ nombre: \"Nacho\", edad: 39},\n{ nombre: \"Mario\", edad: 4},\n{ nombre: \"Laura\", edad: 2},\n{ nombre: \"Nora\", edad: 10}\n];\n</code></pre> <p>Transformada a JSON segueix la mateixa sintaxi, per\u00f2 entre claud\u00e0tors:</p> <pre><code>[{\"nombre\":\"Nacho\",\"edad\":39}, {\"nombre\":\"Mario\",\"edad\":4},\n{\"nombre\":\"Laura\",\"edad\":2}, {\"nombre\":\"Nora\",\"edad\":10}]\n</code></pre>"},{"location":"8.1.Laravel_restfull.html#construint-una-apirest-basica","title":"Constru\u00efnt una API/REST b\u00e0sica","text":"<p>Video</p> <p>Vegem ara quins passos donar per a construir una API REST en Laravel que done suport a les operacions b\u00e0siques sobre una o diverses entitats: consultes (GET), insercions (POST), modificacions (PUT) i esborrats (DELETE). Emprarem per a aix\u00f2 els denominats controladors de API i que proporcionen un conjunt de funcions ja definides per a donar suport a cadascun d'aquests comandos.</p>"},{"location":"8.1.Laravel_restfull.html#definint-els-controlador-de-la-api","title":"Definint els controlador de la API","text":"<p>Per a proporcionar una API REST als clients que ho requerisquen, necessitem definir un controlador (o controladors) orientats a oferir aquests serveis REST. Aquests controladors en Laravel es denominen de tipus api, com vam veure en sessions pr\u00e8vies. Normalment es definir\u00e0 un controlador API per cadascun dels models als quals necessitem accedir. Crearem un de prova per a oferir una API REST sobre els llibres de la nostra aplicaci\u00f3 de videoclub. Existeixen diferents maneres d'executar el comando de creaci\u00f3 del controlador de API. Ac\u00ed mostrarem potser un dels m\u00e9s \u00fatils:</p> <pre><code>php artisan make:controller Api/MovieController --api --model=Movie\n</code></pre> <p>Aix\u00f2 crear\u00e0 el controlador en la carpeta App\\Http\\Controllers\\Api amb una s\u00e8rie de funcions ja predefinides. No \u00e9s obligatori situar-ho en aqueixa subcarpeta, \u00f2bviament, per\u00f2 aix\u00f2 ens servir\u00e0 per a separar els controladors de API de la resta. Aquesta ser\u00e0 l'aparen\u00e7a del controlador generat:</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Movie;\nuse Illuminate\\Http\\Request;\n\nclass MovieController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index()\n    {\n        //\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        //\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\Movie  $movie\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Movie $movie)\n    {\n        //\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Movie  $movie\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, Movie $movie)\n    {\n        //\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\Movie  $movie\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Movie $movie)\n    {\n        //\n    }\n}\n</code></pre> <p>Observem que s'incorpora autom\u00e0ticament la cl\u00e0usula use per a carregar el model associat, que hem indicat en el par\u00e0metre --model . A m\u00e9s, els m\u00e8todes show , update i destroy ja v\u00e9nen amb un par\u00e0metre de tipus Llibre que facilitar\u00e0 molt algunes tasques.</p> <p>Cadascuna de les funcions del nou controlador creat s'associa a un dels m\u00e8todes REST comentats anteriorment:</p> <ul> <li> <p>index s'associaria amb una operaci\u00f3 GET de llistat general, per a obtindre tots els registres (de videos, en aquest cas)</p> </li> <li> <p>store s'associaria amb una operaci\u00f3 POST, per a emmagatzemar les dades que arriben en la petici\u00f3 (com un nou video, en el nostre cas)</p> </li> <li> <p>show s'associaria amb una operaci\u00f3 GET per a obtindre el registre associat a un identificador concret</p> </li> <li> <p>update s'associaria amb una operaci\u00f3 PUT, per a actualitzar les dades del registre associat a un identificador concret</p> </li> <li> <p>destroy s'associaria amb una operaci\u00f3 DELETE, per a eliminar les dades del registre associat a un identificador concret</p> </li> </ul>"},{"location":"8.1.Laravel_restfull.html#establint-les-rutes","title":"Establint les rutes","text":"<p>Una vegada tenim el controlador API creat, definirem les rutes associades a cada m\u00e8tode del controlador. Si recordem de sessions anteriors, pod\u00edem emprar el m\u00e8tode Route::resource en l'arxiu routes/web.php per a establir de colp totes les rutes associades a un controlador de recursos.</p> <p>De manera an\u00e0loga, podem emprar el m\u00e8tode Route::apiResource en l'arxiu routes/api.php per a establir autom\u00e0ticament totes les rutes d'un controlador de API. Afegim aquesta l\u00ednia en aquest arxiu routes/api.php :</p> <pre><code>Route::apiResource('movies',Api\\MovieController::class);\n</code></pre> <p>Les rutes de API (aquelles definides en l'arxiu routes/api.php ) per defecte tenen un prefix api , tal com s'estableix en el provider RouteServiceProvider . Per tant, hem definit una ruta general api/movies , de manera que totes les subrutes que es deriven d'ella portaran a l'un o l'altre m\u00e8tode del controlador de API de video. Podem comprovar quines rutes hi ha actives amb aquest comando:</p> <pre><code>php artisan route:list\n\n+--------+-----------+--------------------+----------------+--------------------------------------------------+------------+\n| Domain | Method    | URI                | Name           | Action                                           | Middleware |\n+--------+-----------+--------------------+----------------+--------------------------------------------------+------------+\n|        | GET|HEAD  | /                  |                | App\\Http\\Controllers\\HomeController              | web        |\n|        | GET|HEAD  | api/movies         | movies.index   | App\\Http\\Controllers\\Api\\MovieController@index   | api        |\n|        | POST      | api/movies         | movies.store   | App\\Http\\Controllers\\Api\\MovieController@store   | api        |\n|        | GET|HEAD  | api/movies/{movie} | movies.show    | App\\Http\\Controllers\\Api\\MovieController@show    | api        |\n|        | PUT|PATCH | api/movies/{movie} | movies.update  | App\\Http\\Controllers\\Api\\MovieController@update  | api        |\n|        | DELETE    | api/movies/{movie} | movies.destroy | App\\Http\\Controllers\\Api\\MovieController@destroy | api        |\n|        | GET|HEAD  | api/user           |                | Closure                                          +--------------------------------------------------+------------+\n</code></pre>"},{"location":"8.1.Laravel_restfull.html#serveis-get","title":"Serveis GET","text":"<p>Comen\u00e7arem per definir el m\u00e8tode index . En aquest cas, obtindrem el conjunt de videos de labase de dades i retornar-lo tal qual:</p> <pre><code>public function index()\n{\n    $movies = Movie::get();\n    return $movies;\n}\n</code></pre> <p>Si accedim a la ruta api/videos des del navegador, s'activar\u00e0 el m\u00e8tode index que acabem d'implementar, i rebrem els llibres de la base de dades, directament en format JSON.</p> <pre><code>{\n\"id\": 1,\n\"title\": \"El padrino\",\n\"year\": \"1972\",\n\"director\": \"Francis Ford Coppola\",\n\"poster\": \"http://ia.media-imdb.com/images/M/MV5BMjEyMjcyNDI4MF5BMl5BanBnXkFtZTcwMDA5Mzg3OA@@._V1_SX214_AL_.jpg\",\n\"rented\": 0,\n\"synopsis\": \"Don Vito Corleone (Marlon Brando) es el respetado y temido jefe de una de las cinco familias de la mafia de Nueva York. Tiene cuatro hijos: Connie (Talia Shire), el impulsivo Sonny (James Caan), el pusil\u00e1nime Freddie (John Cazale) y Michael (Al Pacino), que no quiere saber nada de los negocios de su padre. Cuando Corleone, en contra de los consejos de 'Il consigliere' Tom Hagen (Robert Duvall), se niega a intervenir en el negocio de las drogas, el jefe de otra banda ordena su asesinato. Empieza entonces una violenta y cruenta guerra entre las familias mafiosas.\",\n\"created_at\": \"2020-12-03T11:19:19.000000Z\",\n\"updated_at\": \"2020-12-21T10:36:20.000000Z\"\n},\n{\n\"id\": 2,\n\"title\": \"El Padrino. Parte II\",\n\"year\": \"1974\",\n\"director\": \"Francis Ford Coppola\",\n\"poster\": \"http://ia.media-imdb.com/images/M/MV5BNDc2NTM3MzU1Nl5BMl5BanBnXkFtZTcwMTA5Mzg3OA@@._V1_SX214_AL_.jpg\",\n\"rented\": 0,\n\"synopsis\": \"Continuaci\u00f3n de la historia de los Corleone por medio de dos historias paralelas: la elecci\u00f3n de Michael Corleone como jefe de los negocios familiares y los or\u00edgenes del patriarca, el ya fallecido Don Vito, primero en Sicilia y luego en Estados Unidos, donde, empezando desde abajo, lleg\u00f3 a ser un poderos\u00edsimo jefe de la mafia de Nueva York.\",\n\"created_at\": \"2020-12-03T11:19:19.000000Z\",\n\"updated_at\": \"2020-12-03T11:19:19.000000Z\"\n}}\n</code></pre> <p>NOTA: podem instal\u00b7lar l'extensi\u00f3 JSON formatter per a Chrome, i aix\u00ed poder veure les dades en format JSON m\u00e9s organitzats i amb la sintaxi ressaltada.</p> <p>D'una forma similar, podr\u00edem implementar i provar el m\u00e8tode show</p> <pre><code>public function show(Movie $movie)\n{\n    return $movie;\n}\n</code></pre> <p>En aquest cas, si accedim a la URI api/movies/1 , obtindrem la informaci\u00f3 del video amb id = 1. Notar que Laravel s'encarrega autom\u00e0ticament de buscar el llibre per nosaltres (fer la corresponent operaci\u00f3 find per a l'id proporcionat). \u00c9s el que es coneix com a enlla\u00e7 impl\u00edcit, i \u00e9s alguna cosa que tamb\u00e9 est\u00e0 disponible en els controladors web normals, sempre que els associem correctament amb el model vinculat. Aix\u00f2 es fa autom\u00e0ticament si creem el controlador juntament amb el model o si usem el par\u00e0metre --model per a associar-ho, com hem fet ac\u00ed.</p>"},{"location":"8.1.Laravel_restfull.html#mes-coses-sobre-el-format-json-i-la-resposta","title":"Mes coses sobre el format JSON i la resposta","text":"<p>Despr\u00e9s de provar els dos serveis anteriors, haur\u00e0s observat que Laravel s'encarrega de transformar directament els registres obtinguts a format JSON quan els enviem mitjan\u00e7ant return , per la qual cosa, en principi, no tenim per qu\u00e8 preocupar-nos d'aquest proc\u00e9s. No obstant aix\u00f2, d'aquesta manera s'escapen algunes coses al nostre control. Per exemple, i sobretot, no podem especificar el codi d'estat de la resposta, que per defecte \u00e9s 200 si tot ha anat correctament. A m\u00e9s, tampoc podem controlar quina informaci\u00f3 enviar de l'objecte en q\u00fcesti\u00f3.</p> <p>Si volem limitar o formatar la informaci\u00f3 a enviar dels objectes que estem tractant, i que no s'envien tots els seus camps sense m\u00e9s, tenim diverses opcions:</p> <ul> <li>Afegir cl\u00e0usules hidden en els models corresponents, per a indicar que aqueixa informaci\u00f3 no ha de ser enviada en cap cas enlloc de l'aplicaci\u00f3. \u00c9s el que ocorre, per exemple, amb el camp password del model d'Usuari :</li> </ul> <pre><code>protected $hidden = ['password'];\n</code></pre> <ul> <li>Definir a m\u00e0 un array amb els camps a enviar en el m\u00e8tode del controlador. En el cas de la fitxa del video anterior, si nom\u00e9s volem enviar el t\u00edtol i el director, podr\u00edem fer una cosa aix\u00ed:</li> </ul> <pre><code>public function show(Movie $movie)\n{\n    return [\n        'titulo' =&gt; $movie-&gt;title,\n        'director' =&gt; $movie-&gt;director\n    ];\n}\n</code></pre> <ul> <li>En el cas que el pas anterior siga molt cost\u00f3s (perqu\u00e8 el model t\u00e9 molts camps, o perqu\u00e8 hem de fer el mateix en diverses parts del codi), tamb\u00e9 podem definir recursos (resources), que permeten separar el codi de la informaci\u00f3 a mostrar del propi controlador. Ac\u00ed podeu trobar informaci\u00f3 sobre aquest tema.</li> </ul> <p>D'altra banda, si volem afegir o modificar m\u00e9s informaci\u00f3 en la resposta, com el codi d'estat, l'estructura anterior no ens serveix, ja que sempre s'enviar\u00e0 un codi 200. Per a aix\u00f2, \u00e9s convenient emprar el m\u00e8tode response()-&gt;json(...) , que permet especificar com a primer par\u00e0metre les dades a enviar, i com segon par\u00e0metre el codi d'estat. Els m\u00e8tode anterior quedaria aix\u00ed, enviant un codi 200 com a resposta (encara que si s'omet el segon par\u00e0metre, s'assumeix que \u00e9s 200):</p> <pre><code>public function show(Movie $movie)\n{\n    return response()-&gt;json($movie, 200);\n}\n</code></pre>"},{"location":"8.1.Laravel_restfull.html#resta-dels-serveis","title":"Resta dels serveis","text":"<p>Video</p> <p>Vegem ara com implementar la resta de serveis (POST, PUT i DELETE). En el cas de la inserci\u00f3 (POST), haurem de rebre en la petici\u00f3 les dades de l'objecte a inserir (un llibre, en el nostre exemple). Igual que les dades del servidor al client s'envien en format JSON, \u00e9s d'esperar en aplicacions que segueixen l'arquitectura REST que les dades del client al servidor tamb\u00e9 s'envien en format JSON. El nostre m\u00e8tode store , associat al servei POST, podria quedar d'aquesta manera (retornem el codi d'estat 201, que s'utilitza quan s'han inserit elements nous):</p> <pre><code>public function store(MoviePost $request)\n{\n        $movie = new Movie();\n        $movie-&gt;title = $request-&gt;title;\n        $movie-&gt;year = $request-&gt;year;\n        $movie-&gt;director = $request-&gt;director;\n        $movie-&gt;poster = $request-&gt;poster;\n        $movie-&gt;synopsis = $request-&gt;synopsis;\n        $movie-&gt;save();\n        return response()-&gt;json($movie, 201);\n}\n</code></pre> <p>De forma semblant tindriem el m\u00e8tode update per al servei PUT. En est cas tornem un codi 200.</p> <pre><code> public function update(MoviePost $request, Movie $movie)\n    {\n        $movie-&gt;title = $request-&gt;title;\n        $movie-&gt;year = $request-&gt;year;\n        $movie-&gt;director = $request-&gt;director;\n        $movie-&gt;poster = $request-&gt;poster;\n        $movie-&gt;synopsis = $request-&gt;synopsis;\n        $movie-&gt;save();\n        return response()-&gt;json($movie);\n    }\n</code></pre> <p>Finalment, pel servei DELETE, hem d'implementar el m\u00e8tode destroy , que podria quedar aix\u00ed:</p> <pre><code>public function destroy(Movie $movie)\n{\n    $movie-&gt;delete();\n    return response()-&gt;json(null, 204);\n}\n</code></pre> <p>Notar que retornem un codi d'estat 204, que indica que no estem retornant contingut (\u00e9s null). D'altra banda, \u00e9s habitual en aquesta mena d'operacions d'esborrat retornar en format JSON l'objecte que s'ha eliminat, per si de cas es vol desfer l'operaci\u00f3 en un pas posterior. En aquest cas, la resposta del m\u00e8tode d'esborrat seria aix\u00ed:</p> <pre><code>return response()-&gt;json($movie,204);\n</code></pre> <p>Com podem comen\u00e7ar a intuir, provar aquests serveis no \u00e9s tan senzill com provar serveis de tipus GET, ja que no podem simplement teclejar una URL en el navegador. Necessitem un mecanisme per a passar-li les dades al servidor en format JSON, i tamb\u00e9 el m\u00e8tode (POST, PUT o DELETE).</p>"},{"location":"8.1.Laravel_restfull.html#validacio-de-dades","title":"Validaci\u00f3 de dades","text":"<p>A l'hora de rebre dades en format JSON per a serveis REST, tamb\u00e9 podem establir mecanismes de validaci\u00f3 similars als vistos per als formularis, a trav\u00e9s dels corresponents requests, com ja hem fet en els exemples anteriors.</p>"},{"location":"8.1.Laravel_restfull.html#respostes-derror","title":"Respostes d'error","text":"<p>D'altra banda, hem d'assegurar-nos que qualsevol error que es produ\u00efsca en la part del API retorne un contingut en format JSON, i no una p\u00e0gina web. Per exemple, si sol\u00b7licitem veure la fitxa d'un llibre que el seu id no existeix, no hauria de retornar-nos una p\u00e0gina d'error 404, sin\u00f3 un codi d'estat 404 amb un missatge d'error en format JSON.</p> <p>Aix\u00f2 no es compleix per defecte, ja que Laravel est\u00e0 configurat per a renderitzar una vista amb l'error produ\u00eft. En el cas de Laravel 8 hem de modificar el m\u00e8tode register dins de la classe App\\Exceptions\\Handler.php. Ho podem deixar de la seg\u00fcent forma:</p> <pre><code>public function register()\n{\n    $this-&gt;renderable(function (Throwable $exception) {\n    if (request()-&gt;is('api'))\n        {\n            if ($exception instanceof ModelNotFoundException)\n                return response()-&gt;json(['error' =&gt; 'Recurso no encontrado'],404);\n            else if ($exception instanceof ValidationException)\n                return response()-&gt;json(['error' =&gt; 'Datos no v\u00e1lidos'],400);\n            else if (isset($exception))\n                return response()-&gt;json(['error' =&gt; 'Error: ' .$exception-&gt;getMessage()], 500);\n        }\n    });\n}\n</code></pre>"},{"location":"8.1.Laravel_restfull.html#provant-els-serveis-amb-postman","title":"Provant els serveis amb POSTMAN","text":"<p>Ja hem vist que provar uns serveis de llistat (GET) \u00e9s senzill a trav\u00e9s d'un navegador. Per\u00f2 els serveis d'inserci\u00f3 (POST), modificaci\u00f3 (PUT) o esborrat (DELETE) exigeixen d'altres eines per a poder ser provats. Podr\u00edem definir formularis amb aquests m\u00e8todes encapsulats, per\u00f2 l'esfor\u00e7 de definir aqueixos formularis per a despr\u00e9s no utilitzar-los m\u00e9s no mereix molt la pena. Veurem a continuaci\u00f3 una eina molt \u00fatil per a provar tot tipus de serveis sense necessitat d'implementar gens addicional.</p> <p>Postman \u00e9s una aplicaci\u00f3 gratu\u00efta i multiplataforma que permet enviar tot tipus de peticions a un servidor determinat, i examinar la resposta que aquest produeix. D'aquesta forma, podem comprovar que els serveis ofereixen la informaci\u00f3 adequada abans de ser usats per una aplicaci\u00f3 client real.</p> <p>La primera vegada que l'executem ens preguntar\u00e0 si volem registrar-nos, de manera que puguem compartir els projectes que fem entre els diferents equips en qu\u00e8 estiguem registrats, per\u00f2 podem saltar aquest pas fent clic en l'enlla\u00e7 inferior.</p> <p>Despr\u00e9s d'iniciar l'aplicaci\u00f3, veurem la pantalla d'inici de Postman. Al principi apareixeran diverses opcions en la zona central, per a crear col\u00b7leccions o peticions, encara que tamb\u00e9 les podem crear des del bot\u00f3 New a la cantonada superior esquerra. Per exemple, podem crear una col\u00b7lecci\u00f3 \"Movies\", i apareixer\u00e0 en el panell esquerre:</p> <p>Des del mateix bot\u00f3*New a la cantonada superior esquerra podem crear noves peticions i associar-les a una col\u00b7lecci\u00f3. Existeix una forma alternativa (potser m\u00e9s c\u00f2moda) de crear aqueixes peticions, a trav\u00e9s del panell de pestanyes, afegint noves:</p>"},{"location":"8.1.Laravel_restfull.html#afegir-peticions-get","title":"Afegir peticions GET","text":"<p>Per a afegir una petici\u00f3, habitualment triarem el tipus de comando sota les pestanyes (GET, POST, PUT, DELETE) i la URL associada a aquest comando. Per exemple:</p> <p></p> <p>Llavors, podem fer clic en el bot\u00f3 \"Save\" en la part dreta, i guardar la petici\u00f3 per a poder-la reutilitzar. En guardar-la, ens demanar\u00e0 que li assignem un nom (per exemple, \"GET movies\" en aquest cas), i la col\u00b7lecci\u00f3 en la qual s'emmagatzemar\u00e0 (la nostra col\u00b7lecci\u00f3 de \"Movies\").</p> <p></p> <p>Despr\u00e9s, podrem veure la prova associada a la col\u00b7lecci\u00f3, en el panell esquerre, i si seleccionem aquesta prova i premem en el bot\u00f3 blau de \"*Send\" (part dreta), podem veure la resposta emesa pel servidor en el panell inferior de resposta (si tenim, \u00e9s clar, el servidor en marxa)</p> <p></p> <p>Seguint aquests mateixos passos, podem tamb\u00e9 crear una nova petici\u00f3 per a obtindre un llibre a partir del seu id, per GET:</p> <p></p> <p>Bastaria amb reempla\u00e7ar l'id de la URL pel qual vulguem consultar realment. Si provem aquesta petici\u00f3, obtindrem la resposta corresponent:</p> <p></p>"},{"location":"8.1.Laravel_restfull.html#afegir-altres-tipus-de-peticions","title":"Afegir altres tipus de peticions","text":"<p>Les peticions POST difereixen de les peticions GET en qu\u00e8 s'envia certa informaci\u00f3 en el cos de la petici\u00f3. Aquesta informaci\u00f3 normalment s\u00f3n les dades que es volen afegir en el servidor. Com podem fer aix\u00f2 amb Postman? En primer lloc, creem una nova petici\u00f3, triem el comando POST i definim la URL (en el nostre cas, videoclub.my/api/movies o una cosa similar, depenent de com tinguem en marxa el servidor). Llavors, fem clic en la pestanya Body, sota la URL, i establim el tipus com raw perqu\u00e8 ens deixe escriure'l sense restriccions. Tamb\u00e9 conv\u00e9 canviar la propietat Text perqu\u00e8 siga JSON, i que aix\u00ed el servidor reculla el tipus de dada adequada. S'afegir\u00e0 autom\u00e0ticament una cap\u00e7alera de petici\u00f3 (Header) que especificar\u00e0 que el tipus de contingut que s'enviar\u00e0 s\u00f3n dades JSON. Despr\u00e9s, en el quadre de text sota aquestes opcions, especifiquem l'objecte JSON que volem enviar per a inserir:</p> <p></p> <p>Despr\u00e9s d'aix\u00f2, n'hi ha prou amb guardar la petici\u00f3 com hem fet amb les anteriors, i llan\u00e7ar-la per a veure el resultat.</p> <p>Quant a les peticions PUT, procedirem de manera similar a les peticions POST: hem de triar el comando (PUT en aquest cas), la URL, i completar el cos de la petici\u00f3 amb les dades que vulguem modificar del contacte. En aquest cas, a m\u00e9s, l'id del llibre l'enviarem tamb\u00e9 en la pr\u00f2pia URL:</p> <p></p> <p>Per a peticions DELETE, la mec\u00e0nica \u00e9s similar a la fitxa de l'element (operaci\u00f3 GET), canviant el comando GET per DELETE, i sense necessitat d'establir res en el cos de la petici\u00f3:</p> <p></p>"},{"location":"8.1.Laravel_restfull.html#autenticacio-en-serveis-rest","title":"Autenticaci\u00f3 en serveis REST","text":"<p>Video</p> <p>En una API REST tamb\u00e9 pot ser necessari protegir certs serveis, de manera que nom\u00e9s puguen accedir a ells els usuaris autenticats. No obstant aix\u00f2, en aquest cas no tenim disponible el mecanisme d'autenticaci\u00f3 basat en sessions que vam veure en temes anteriors, ja que la parteix client que consula la API REST no t\u00e9 per qu\u00e8 estar basada en un navegador. Podr\u00edem accedir des d'una aplicaci\u00f3 d'escriptori feta a Java, per exemple, o des d'una aplicaci\u00f3 m\u00f2bil, i en aquests casos no podr\u00edem disposar de les sessions, pr\u00f2pies de clients web o navegadors. En el seu lloc, emprarem un mecanisme d'autenticaci\u00f3 basat en tokens.</p>"},{"location":"8.1.Laravel_restfull.html#fonaments-de-lautenticacio-basada-en-tokens","title":"Fonaments de l'autenticaci\u00f3 basada en tokens","text":"<p>L'autenticaci\u00f3 basada en tokens \u00e9s un mecanisme de validaci\u00f3 d'usuaris en aplicacions client/servidor que podr\u00edem dir que \u00e9s m\u00e9s universal que l'autenticaci\u00f3 basada en sessions, ja que permet autenticar usuaris provinents de diferents tipus de clients. El que es fa \u00e9s el seg\u00fcent:</p> <ul> <li>L'usuari necessita enviar les seues credencials (login i password), de manera similar a com es fa en una aplicaci\u00f3 web normal, encara que aquesta vegada les dades s'envien normalment en format JSON.</li> <li>El servidor valida aqueixes credencials i, si s\u00f3n correctes, genera una cadena de text anomenada token, d'una certa longitud, i que servir\u00e0 per a identificar un\u00edvocament a l'usuari a partir d'aqueix moment. Dit token ha de ser enviat de tornada (tamb\u00e9 en format JSON) al client que es va validar.</li> <li>A partir d'aquest punt, el client ha d'adjuntar el token com a part de la informaci\u00f3 en cada petici\u00f3 que realitza a una zona d'acc\u00e9s restringit, de manera que el servidor puga consultar el token i comprovar si correspon amb el d'algun usuari autoritzat. Aquest token normalment s'envia en una cap\u00e7alera de la petici\u00f3 anomenada Authorization, com veurem despr\u00e9s, i el servidor pot consultar el valor d'aquesta cap\u00e7alera per a verificar l'acc\u00e9s del client.</li> </ul>"},{"location":"8.1.Laravel_restfull.html#alternatives-per-a-la-implementacio-de-lautenticacio-basada-en-tokens","title":"Alternatives per a la implementaci\u00f3 de l'autenticaci\u00f3 basada en tokens","text":"<p>Podem emprar diferents alternatives per a l'autenticaci\u00f3 basada en tokens baix Laravel. Comentarem dues d'elles.</p> <ul> <li> <p>D'una banda, podem emprar el mecanisme natiu de Laravel per a autenticaci\u00f3 basada en tokens.Com a avantatges principals, no es necessita instal\u00b7lar cap depend\u00e8ncia addicional, i \u00e9s relativament senzill d'utilitzar. Com a inconvenients, requereix afegir un camp m\u00e9s a la taula d'usuaris, per a emmagatzemar el token generat per a cada usuari, i requereix tamb\u00e9 d'una gesti\u00f3 manual del token, encara que \u00e9s senzilla.</p> </li> <li> <p>D'altra banda podem valdre'ns de la llibreria Laravel Sanctum, que proporciona mecanismes d'autenticaci\u00f3 per a APIs i per a SPAs (Single Page Applications, aplicacions de p\u00e0gina \u00fanica). Entre els seus avantatges podem destacar que \u00e9s senzilla d'integrar en l'aplicaci\u00f3 i automatitza alguns aspectes de la gesti\u00f3 de tokens, a m\u00e9s de comptar amb el suport oficial de Laravel. Com a inconvenients, \u00e9s una llibreria m\u00e9s intrusiva que l'anterior, ja que requereix crear una taula addicional on emmagatzemar els tokens.</p> </li> </ul> <p>En els seg\u00fcents apartats veurem com protegir mitjan\u00e7ant tokens un projecte senzill en Laravel emprant cadascun d'aquests mecanismes.</p>"},{"location":"8.1.Laravel_restfull.html#preparant-lentorn","title":"Preparant l'entorn","text":"<p>Hem d'editar l'arxiu App\\Exceptions\\Hanlder.php , en concret el seu m\u00e8tode register per a definir els diferents errors que poden produir-se i els missatges que cal retornar en cada cas:</p> <pre><code>&lt;?php\n\nnamespace App\\Exceptions;\n\nuse Illuminate\\Database\\QueryException;\nuse Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\nuse Throwable;\nuse Illuminate\\Validation\\ValidationException;\nuse Illuminate\\Auth\\AuthenticationException;\nuse Illuminate\\Database\\Eloquent\\ModelNotFoundException;\n\nclass Handler extends ExceptionHandler\n{\n    /**\n     * A list of the exception types that are not reported.\n     *\n     * @var array\n     */\n    protected $dontReport = [\n        //\n    ];\n\n    /**\n     * A list of the inputs that are never flashed for validation exceptions.\n     *\n     * @var array\n     */\n    protected $dontFlash = [\n        'password',\n        'password_confirmation',\n    ];\n\n    /**\n     * Register the exception handling callbacks for the application.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        $this-&gt;renderable(function (Throwable $exception) {\n\n            if (request()-&gt;is('api*'))\n            {\n                if ($exception instanceof ModelNotFoundException)\n                    return response()-&gt;json(['error' =&gt; 'Elemento no encontrado'], 404);\n                else if ($exception instanceof AuthenticationException)\n                    return response()-&gt;json(['error' =&gt; 'Usuario no autenticado'], 401);\n                else if ($exception instanceof ValidationException)\n                    return response()-&gt;json(['error' =&gt; 'Datos no v\u00e1lidos'], 400);\n                else if ($exception instanceof QueryException)\n                    return response()-&gt;json(['error' =&gt; 'Datos no v\u00e1lidos'], 400);\n                else if (isset($exception))\n                    return response()-&gt;json(['error' =&gt; 'Error en la aplicaci\u00f3n (' .get_class($exception) . '):' .$exception-&gt;getMessage()], 500);\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"8.1.Laravel_restfull.html#autenticacio-amb-token-nativa","title":"Autenticaci\u00f3 amb token nativa","text":""},{"location":"8.1.Laravel_restfull.html#configuracio-basica","title":"Configuraci\u00f3 b\u00e0sica","text":"<p>En primer lloc, modifiquem la migraci\u00f3 de la taula d'users per a afegir un nou camp on emmagatzemar el token. Aquest camp n'hi ha prou que tinga 60 car\u00e0cters de longitud, i ser\u00e0 necessari tamb\u00e9 que siga \u00fanic per a cada usuari:</p> <p><pre><code>public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table-&gt;id();\n            $table-&gt;string('name');\n            $table-&gt;string('email')-&gt;unique();\n            $table-&gt;timestamp('email_verified_at')-&gt;nullable();\n            $table-&gt;string('api_token', 60)-&gt;unique()-&gt;nullable();\n            $table-&gt;string('password');\n            $table-&gt;rememberToken();\n            $table-&gt;timestamps();\n        });\n    }\n</code></pre> Llancem la migraci\u00f3 i hem de comprovar que el artxiu config/auth.php fa\u00e7a refer\u00e8ncia al model d'usuaris, si utilitzarem un model diferent a User ho canviariem en:</p> <p><pre><code>'providers' =&gt; [\n'users' =&gt; [\n'driver' =&gt; 'eloquent',\n'model' =&gt; App\\Models\\Usuario::class,\n],\n</code></pre> No \u00e9s el cas.</p>"},{"location":"8.1.Laravel_restfull.html#proteccio-de-rutes","title":"Protecci\u00f3 de rutes","text":"<p>Per a protegir les rutes d'acc\u00e9s restringit, primer crearem un controlador que s'encarregue de validar les credencials de l'usuari:</p> <pre><code>php artisan make:controller Api/LoginController\n</code></pre> <p>Definim un m\u00e8tode login , per exemple, que validar\u00e0 les credencials que li arriben (login i password). Si s\u00f3n correctes, generar\u00e0 una cadena de text aleat\u00f2ria de 60 car\u00e0cters i l'emmagatzemar\u00e0 en el camp api_token de l'usuari validat. Tamb\u00e9 retornar\u00e0 dit token com a resposta en format JSON. En cas que hi haja un error en l'autenticaci\u00f3, enviar\u00e0 de tornada un missatge d'error, amb el codi 401 d'acc\u00e9s no autoritzat.</p> <p><pre><code>use App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Models\\User;\n\nclass LoginController extends Controller\n{\n    public function login(Request $request)\n    {\n        $usuario = User::where('email', $request-&gt;login)-&gt;first();\n        if (!$usuario || !Hash::check($request-&gt;password, $usuario-&gt;password))\n        {\n            return response()-&gt;json(['error' =&gt; 'Credenciales no v\u00e1lidas'], 401);\n        }\n        else\n        {\n            $usuario-&gt;api_token = Str::random(60);\n            $usuario-&gt;save();\n            return response()-&gt;json(['token' =&gt; $usuario-&gt;api_token]);\n        }\n    }\n}\n</code></pre> Definim en l'arxiu +routes/api.php* una ruta que redirigisca a aquest m\u00e8tode, per a quan l'usuari vulga autenticar-se (recorda afegir amb use la corresponent classe):  </p> <pre><code>Route::post('login', [LoginController::class, 'login']);\n</code></pre> <p>Tamb\u00e9 podem eliminar en aquest cas la ruta predefinida d'aquest arxiu, que empra l'autenticaci\u00f3 nativa de Laravel:</p> <pre><code>// Eliminar esta ruta:\nRoute::middleware('auth:api')-&gt;get('/user', function (Request $request) {\nreturn $request-&gt;user();\n});\n</code></pre> <p>Per a protegir les rutes que necessitem en els controladors API, les especifiquem en el constructor del controlador. Per exemple, aix\u00ed protegir\u00edem totes les rutes del nostre controlador MovieController , excepte index i show :</p> <pre><code>class MovieController extends Controller\n{\npublic function __construct()\n{\n    $this-&gt;middleware('auth:api',['except' =&gt; ['index', 'show']]);\n}\n...\n</code></pre> <p>Tamb\u00e9 podem fer-ho en el fitxer de rutes. </p>"},{"location":"8.1.Laravel_restfull.html#sanctum-or-passport","title":"Sanctum or Passport","text":"<p>A l'hora de instal\u00b7lar una llibreria per a l'autenticaci\u00f3 podem triar per Passport que utilitza OATH2 per autenticaci\u00f3 o una versi\u00f3 m\u00e9s simple que no l'utilitza com \u00e9s Sanctum. Esta senzilla gr\u00e0fica us pot orientar per saber quin dels dos instal\u00b7le. </p> <p></p>"},{"location":"8.1.Laravel_restfull.html#autenticacio-basada-en-tokens-emprant-laravel-sanctum","title":"Autenticaci\u00f3 basada en tokens emprant Laravel Sanctum","text":"<p>Com hem comentat anteriorment, Laravel Sanctum \u00e9s una llibreria que proporciona mecanismes d'autenticaci\u00f3 per a SPAs (Single Page Applications, aplicacions de p\u00e0gina \u00fanica), i APIs. En el nostre cas, l'emprarem per a autenticar-nos mitjan\u00e7ant tokens en nostres APIs. </p> <p>Els passos a seguir per a laconfiguraci\u00f3 s\u00f3n els seg\u00fcents... En primer lloc, hem d'incorporar Laravel Sanctum al nostre projecte, escrivint aquest comando des de l'arrel d'aquest:</p> <pre><code>composer require laravel/sanctum\n</code></pre> <p>Despr\u00e9s, hem de publicar la configuraci\u00f3 de Sanctum i el seu fitxer de migraci\u00f3, que generar\u00e0 una taula addicional on emmagatzemar els tokens. Escrivim el seg\u00fcent comando (tot en una l\u00ednia, encara que ac\u00ed es divideix en dues per a poder-lo veure complet):</p> <pre><code>php artisan vendor:publish\n--provider=\"Laravel\\Sanctum\\SanctumServiceProvider\"\n</code></pre> <p>En finalitzar aquest pas, tindrem la migraci\u00f3 creada i un arxiu de configuraci\u00f3 config/sanctum.php disponible, per a editar la configuraci\u00f3 per defecte de la llibreria. Per exemple, podem editar-ho per a especificar el temps de vida (TTL) dels tokens. El seg\u00fcent exemple estableix un temps de vida de 5 minuts, per exemple, encara que en el cas d'aplicacions basades en tokens \u00e9s habitual deixar temps molt majors (o indefinits, segons el cas, deixant aquesta propietat a null ):</p> <pre><code>'expiration' =&gt; 5,\n</code></pre> <p>Despr\u00e9s, hem de llan\u00e7ar la migraci\u00f3 que s'ha creat, juntament amb les quals tinguem pendents (la de la taula d'usuaris, per exemple). S'afegir\u00e0 una taula anomenada personal_access_tokens a la nostra base de dades.</p> <pre><code>php artisan migrate:fresh --seed\n</code></pre> <p>Finalment, hem de modificar el model d'usuaris (App\\Models\\User ) per a afegir el trait HasApiTokens . D'aquesta manera es vincula el model d'usuari amb els tokens que es vagen a generar per a aquests.</p> <pre><code>...\nuse Laravel\\Sanctum\\HasApiTokens;\nclass User extends Authenticatable\n{\nuse HasApiTokens, HasFactory, Notifiable;\n</code></pre>"},{"location":"8.1.Laravel_restfull.html#proteccio-de-rutes_1","title":"Protecci\u00f3 de rutes","text":"<p>Per a protegir les rutes d'acc\u00e9s restringit, primer crearem un controlador que s'encarregue de validar les credencials de l'usuari:</p> <pre><code>php artisan make:controller Api/LoginController\n</code></pre> <p>Definim un m\u00e8tode login , per exemple, que validar\u00e0 les credencials que li arriben (login i password). Si s\u00f3n correctes, cridar\u00e0 al m\u00e8tode createToken de Sanctum (incorporat a l'usuari a trav\u00e9s del trait HasApiTokens ), associant-lo al login de l'usuari entrant, i li retornar\u00e0 el token en format text pla, com un objecte JSON. En cas que hi haja un error en l'autenticaci\u00f3, enviar\u00e0 de tornada un missatge d'error, amb el codi 401 d'acc\u00e9s no autoritzat.</p> <pre><code>use App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Models\\User;\n\nclass LoginController extends Controller\n{\n    public function login(Request $request)\n    {\n        $usuario = User::where('email', $request-&gt;login)-&gt;first();\n        if (!$usuario || !Hash::check($request-&gt;password, $usuario-&gt;password))\n        {\n            return response()-&gt;json(['error' =&gt; 'Credenciales no v\u00e1lidas'], 401);\n        }\n        else\n        {\n            return response()-&gt;json(['token' =&gt; $usuario-&gt;createToken($usuario-&gt;email)-&gt;plainTextToken]);\n        }\n    }\n}\n</code></pre> <p>Definim en l'arxiu routes/api.php una ruta que redirigisca a aquest m\u00e8tode, per a quan l'usuari vulga autenticar-se (recorda afegir amb use la corresponent classe):</p> <pre><code>Route::post('login', 'Api\\LoginController@login');\n</code></pre> <p>Tamb\u00e9 podem eliminar en aquest cas la ruta predefinida d'aquest arxiu, que empra l'autenticaci\u00f3 nativa de Laravel:</p> <pre><code>// Eliminar esta ruta:\nRoute::middleware('auth:api')-&gt;get('/user', function (Request $request) {\nreturn $request-&gt;user();\n});\n</code></pre> <p>Per a protegir les rutes que necessitem en els controladors API, les especifiquem en el constructor del controlador. Per exemple, aix\u00ed protegir\u00edem totes les rutes del nostre controlador MovieController , excepte index i show :</p> <pre><code>class MovieController extends Controller\n{\npublic function __construct()\n{\n    $this-&gt;middleware('auth:sanctum',['except' =&gt; ['index', 'show']]);\n}\n...\n</code></pre>"},{"location":"8.1.Laravel_restfull.html#prova-dautenticacio-amb-postman","title":"Prova d'autenticaci\u00f3 amb POSTMAN","text":"<p>Vegem com provar l'autenticaci\u00f3 per token en el projecte de videoclub, per qualsevol dels m\u00e8todes vistos abans. En primer lloc, i despr\u00e9s de posar en marxa el projecte, ens assegurarem que podem accedir sense restriccions als dos serveis que no requereixen autoritzaci\u00f3 ( index o show ), igual que abans.</p> <p>Si accedim a un recurs protegit obtenim </p> <pre><code>{ \"error\": \"Credenciales no v\u00e1lidas\"}\n</code></pre> <p>Ara anem a loguejar-se</p> <p></p> <p>Ara hem de copiar aquest token, i pegar-ho en la petici\u00f3 d'acc\u00e9s restringit. Haurem de pegar-ho en la cap\u00e7alera Authorization (obrir aqueixa pestanya sota la URL de la petici\u00f3 en Postman), i el normal \u00e9s enviar-ho com un Bearer token, segons els est\u00e0ndards. Llavors s\u00ed que tindrem la resposta correcta de l'operaci\u00f3 sol\u00b7licitada.</p> <p></p> <p>A l'hora de traslladar aquestes proves a una aplicaci\u00f3 \"real\", enviar\u00edem les credencials per JSON al servidor, obtindr\u00edem el token de tornada i l'emmagatzemar\u00edem localment en alguna variable o suport (per exemple, en l'element localStorage , si treballem amb algun framework Javascript). Despr\u00e9s, davant cada petici\u00f3 JSON que f\u00e9rem al servidor, adjuntar\u00edem aquest token en la cap\u00e7alera Authorization perqu\u00e8 f\u00f3ra validat pel servidor.</p>"},{"location":"9.1.Laravel_swagger.html","title":"9.1.Laravel swagger","text":""},{"location":"9.1.Laravel_swagger.html#desenvolupament-de-serveis-rest","title":"Desenvolupament de serveis REST","text":""},{"location":"9.1.Laravel_swagger.html#que-es-swagger","title":"Qu\u00e8 \u00e9s swagger","text":"<p>Video Video</p>"},{"location":"9.1.Laravel_swagger.html#documentacio","title":"Documentaci\u00f3","text":"<p>Per a poder utilitzar swagger en Laravel podem instal\u00b7lar el seg\u00fcent paquet que utilitza Swagger-php i swagger-ui adaptat per treballar amb Laravel.</p> <pre><code>composer require \"darkaonline/l5-swagger\"\n</code></pre> <p>i publicarem el fitxers de configuraci\u00f3 i vistes</p> <pre><code>php artisan config:cache\nphp artisan vendor:publish --provider \"L5Swagger\\L5SwaggerServiceProvider\"\n</code></pre> <p>A continuaci\u00f3, obriu un fitxer config/l5-swagger.php.  Passem per les claus essencials: </p> <ul> <li> <p>routes.api - Aquest \u00e9s una URL per accedir a la documentaci\u00f3 d'interf\u00edcie d'usuari.  El vostre equip de frontend l'utilitzar\u00e0 per accedir a la documentaci\u00f3.  Per defecte \u00e9s api/documentaci\u00f3.  Podeu canviar-ho a quelcom m\u00e9s petit com api/docs </p> </li> <li> <p>Generar_always \u2014 Es millor desactivar-ho ja que generar\u00e0 documentaci\u00f3 sobre la marxa.  No \u00e9s \u00fatil amb l'API gran.  Sempre podeu executar manualment </p> </li> </ul> <pre><code>    php artisan l5-swagger:generate\n</code></pre> <p>Aquests s\u00f3n els m\u00e9s importants per a comen\u00e7ar.  Ara si intenteu crear documents mitjan\u00e7ant aquesta ordre retornar\u00e0 un error</p> <pre><code>Required @OA\\Info() not found\n</code></pre> <p>Aix\u00f2 vol dir que primer heu de crear aquesta notaci\u00f3.  Aix\u00ed que afegim-ho.  Prefereixo crear un controlador abstracte per a una API, per\u00f2 podeu afegir aix\u00f2 a app/Http/Controllers/Controller.php</p> <pre><code>/**\n * @OA\\Info(\n *    title=\"Your super  ApplicationAPI\",\n *    version=\"1.0.0\",\n * )\n */\nclass Controller extends BaseController\n{\n    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;\n}\n</code></pre> <p>A continuaci\u00f3, hem d'afegir documents per a almenys una ruta, per exemple per per app/Http/Controllers/Api/LoginController.php:</p> <pre><code>/**\n * @OA\\Post(\n * path=\"/login\",\n * summary=\"Sign in\",\n * description=\"Login by email, password\",\n * operationId=\"authLogin\",\n * tags={\"auth\"},\n * @OA\\RequestBody(\n *    required=true,\n *    description=\"Pass user credentials\",\n *    @OA\\JsonContent(\n *       required={\"email\",\"password\"},\n *       @OA\\Property(property=\"email\", type=\"string\", format=\"email\", example=\"user1@mail.com\"),\n *       @OA\\Property(property=\"password\", type=\"string\", format=\"password\", example=\"PassWord12345\"),\n *       @OA\\Property(property=\"persistent\", type=\"boolean\", example=\"true\"),\n *    ),\n * ),\n * @OA\\Response(\n *    response=422,\n *    description=\"Wrong credentials response\",\n *    @OA\\JsonContent(\n *       @OA\\Property(property=\"message\", type=\"string\", example=\"Sorry, wrong email address or password. Please try again\")\n *        )\n *     )\n * )\n */\n</code></pre> <p>Ara, est\u00e0s preparat per generar php artisan l5-swagger:generate i v\u00e9s a l'URL que has proporcionat a la teva configuraci\u00f3.  En el meu cas, ser\u00e0 http://videoclub/api/docs. </p> <p>Veur\u00e0s una cosa aix\u00ed:</p> <p></p> <p>Ara mirarem les anotacions.  Intentar\u00e9 explicar com utilitzar-les:</p> <ul> <li>@OA \u2014 significa anotaci\u00f3 d'Open API.  Podeu llegir m\u00e9s aqu\u00ed </li> <li>@OA/POST  \u2014 vol dir petici\u00f3 DE POST.  Hi ha GET, POST, DELETE, etc. </li> <li>Path \u2014 \u00e9s un URL </li> <li>Tags \u2014 us agrupar\u00e0 API per seccions. </li> <li>@OA\\RequestBody \u2014 \u00e9s obvi pel nom.  Hauria de tenir una anotaci\u00f3 JsonContent dins amb propietats (\u00e9s a dir, descripcions de camp). </li> <li>OA\\Response \u2014 podeu tenir tantes respostes com vulgueu.  Haur\u00edeu de proporcionar totes les respostes possibles d'\u00e8xit i error. </li> </ul> <p>Anem a afegir un codi de resposta 200:</p> <pre><code>*   @OA\\Response(\n*     response=200,\n*     description=\"Success\",\n*     @OA\\JsonContent(\n*        @OA\\Property(property=\"user\", type=\"object\", ref=\"#/components/schemas/User\"),\n*     )\n*  ),\n</code></pre> <p>L'anotaci\u00f3 @OA\\Property t\u00e9 una clau de propietat(nom de camp) i un tipus.  El tipus pot tenir valors diferents: string, object, integer, array, boolean, etc.  En aquesta resposta, vaig utilitzar el tipus objecte.  Podeu passar una refer\u00e8ncia a aquest objecte.  Crearem un objecte user.  Prefereixo afegir aix\u00f2 a la classe Model.</p> <pre><code>/**\n *\n * @OA\\Schema(\n * required={\"password\"},\n * @OA\\Xml(name=\"User\"),\n * @OA\\Property(property=\"id\", type=\"integer\", readOnly=\"true\", example=\"1\"),\n * @OA\\Property(property=\"role\", type=\"string\", readOnly=\"true\", description=\"User role\"),\n * @OA\\Property(property=\"email\", type=\"string\", readOnly=\"true\", format=\"email\", description=\"User unique email address\", example=\"user@gmail.com\"),\n * @OA\\Property(property=\"email_verified_at\", type=\"string\", readOnly=\"true\", format=\"date-time\", description=\"Datetime marker of verification status\", example=\"2019-02-25 12:59:20\"),\n * @OA\\Property(property=\"first_name\", type=\"string\", maxLength=32, example=\"John\"),\n * @OA\\Property(property=\"last_name\", type=\"string\", maxLength=32, example=\"Doe\"),\n\n * )\n *\n * Class User\n *\n */\n</code></pre> <p>Mireu aquesta notaci\u00f3 @OA\\Xml(nom=\u201d Usuari).  Aquest nom s'utilitzar\u00e0 en una clau ref de la @OA\\Property </p> <p>Ara veureu una icona de bloqueig prop de la ruta.  Quan feu clic sobre aix\u00f2, podreu afegir l'autenticaci\u00f3 de Bearer.</p> <p></p>"},{"location":"9.1.Laravel_swagger.html#exemple","title":"Exemple","text":"<p>El gran problema d'este component \u00e9s que no est\u00e0 ben documentat. Partint del seg\u00fcent exemple he documentant el m\u00e8tode get i post del videoclub i ha quedat aix\u00ed:</p> <p>Primer cal possar l'inici del swagger en el Controller.php de la seg\u00fcent manera:</p> <p><pre><code>/**\n * @OA\\Info(\n *    title=\"VideoClub ApplicationAPI\",\n *    version=\"1.0.0\",\n * )\n */\n\n/**\n * @OA\\SecurityScheme(\n *     type=\"http\",\n *     description=\"Login with email and password to get the authentication token\",\n *     name=\"Token based Based\",\n *     in=\"header\",\n *     scheme=\"bearer\",\n *     bearerFormat=\"JWT\",\n *     securityScheme=\"apiAuth\",\n * )\n */\n</code></pre> La primera part serveix per a identificar el projecte i la segon per a l'autenticaci\u00f3 de la API basada en tokens.</p> <p>Ara omplirem el model Movie.php per a generar el schema Movie.</p> <p><pre><code>/**\n *\n * @OA\\Schema(\n * required={\"id,title\"},\n * @OA\\Xml(name=\"Movie\"),\n * @OA\\Property(property=\"id\", type=\"integer\", readOnly=\"true\", example=\"1\"),\n * @OA\\Property(property=\"title\", type=\"string\", readOnly=\"true\", description=\"User role\"),\n * @OA\\Property(property=\"year\", type=\"integer\", readOnly=\"true\",  description=\"Year\", example=\"1956\"),\n * @OA\\Property(property=\"director\", type=\"string\", readOnly=\"true\",  description=\"Director\", example=\"Copolla\"),\n * @OA\\Property(property=\"genre\", type=\"string\", readOnly=\"true\",  description=\"Genre\", example=\"Thriller\"),\n * )\n */\n</code></pre> Observeu que en el genre retorne un string perqu\u00e8 ser\u00e0 el que voldr\u00e8 retornar, en compte de la id de Genre.</p> <p>Ara generar\u00e8 el schema de la petici\u00f3 request del post de movie. No \u00e9s exactament igual que esta perqu\u00e8 ac\u00ed voldr\u00e9 el genre amb ID i restriccions en alguns camps. Ho puc fer en el MoviePost.php dins de request.</p> <p><pre><code>/**\n * @OA\\Schema(\n *      title=\"Store Movie Request\",\n *      required={\"title,director,year\"},\n *      description=\"Store Movie request body data\",\n *      @OA\\Xml(name=\"MoviePost\"),\n * )\n */\n /**\n     * @OA\\Property(\n     *      property = \"title\",\n     *      title=\"name\",\n     *      description=\"Title\",\n     *      example=\"Titanic\"\n     * )\n     *\n     * @var string\n     */\n  /**\n     * @OA\\Property(\n     *      property = \"year\",\n     *      title=\"year\",\n     *      description=\"Year\",\n     *      example=\"1998\"\n     * )\n     *\n     * @var integer\n     */\n /**\n     * @OA\\Property(\n     *      property = \"genre\",\n     *      title=\"genre\",\n     *      description=\"Genre\",\n     *      example=\"1\"\n     * )\n     *\n     * @var integer\n     */\n /**\n     * @OA\\Property(\n     *      property = \"director\",\n     *      title=\"director\",\n     *      description=\"Director\",\n     *      example=\"Steven Spilberg\"\n     * )\n     *\n     * @var string\n     */\n    /**\n     * @OA\\Property(\n     *      property = \"synopsis\",\n     *      title=\"synopsis\",\n     *      description=\"Synopsis\",\n     *      example=\"De que va la pelicula\"\n     * )\n     *\n     * @var string\n     */\n\n    /**\n     * @OA\\Property(\n     *      property = \"poster\",\n     *      title=\"poster\",\n     *      description=\"Poster\",\n     *      example=\"adre\u00e7a del poster\"\n     * )\n     *\n     * @var string\n     */         \n</code></pre> No he pogut fer-ho d'un altra manera. Diferix un poc de la que he utilitzat al model Movie, per\u00f2 si no ho feia aix\u00ed no funcionaba.</p> <p>Falta ara generar la resposta de totes les pelicules per al index. Per a\u00e7o genere un Resource per a Movies, amb el seg\u00fcent codi.</p> <p><pre><code>&lt;?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n/**\n * @OA\\Schema(\n *     title=\"MovieResource\",\n *     description=\"Project resource\",\n *     @OA\\Xml(name=\"MovieResource\"),\n * )\n */\nclass MovieResource extends JsonResource\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n\n    /**\n     * @OA\\Property(\n     *     property=\"data\",\n     *     title=\"data\",\n     *     description=\"Data wrapper\"\n     * )\n     *\n     * @var \\App\\Models\\Movie[]\n     */\n    public function toArray($request)\n    {\n        return [ 'id' =&gt; $this-&gt;id,\n            'title' =&gt; $this-&gt;title,\n            'director' =&gt; $this-&gt;director,\n            'year' =&gt; $this-&gt;year,\n            'genre' =&gt; $this-&gt;Genre-&gt;title??'Desconocido'];\n    }\n}\n</code></pre> Este resource far\u00e0 que quan l'utilitze hem retornar\u00e0 els camps que he possat en la funci\u00f3 toArray i no tots els camps. El puc utilitzar per tornar camps de relacions o canviar el nom dels camps. En quan al swagger, noteu que torne un array de Movies dins d'un camp data.</p> <p>Per \u00faltim el controlador de movies queda de la seg\u00fcent manera.</p> <pre><code>  /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    /**\n     * @OA\\Get(\n     *      path=\"/api/movies\",\n     *      operationId=\"getMoviesList\",\n     *      tags={\"Movies\"},\n     *      summary=\"Get list of movies\",\n     *      description=\"Returns list of movies\",\n     *      @OA\\Response(\n     *          response=200,\n     *          description=\"Successful operation\",\n     *          @OA\\JsonContent(ref=\"#/components/schemas/MovieResource\")\n     *       ),\n     *      @OA\\Response(\n     *          response=401,\n     *          description=\"Unauthenticated\",\n     *      ),\n     *      @OA\\Response(\n     *          response=403,\n     *          description=\"Forbidden\"\n     *      )\n     *     )\n     */\n    public function index()\n    {\n\n        return MovieResource::collection(Movie::get());\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    /**\n     * @OA\\Post(\n     *      path=\"/api/movies\",\n     *      operationId=\"movieProject\",\n     *      tags={\"Movies\"},\n     *      summary=\"Store new movie\",\n     *      description=\"Returns movie data\",\n     *      security={ {\"apiAuth\": {} }},\n     *      @OA\\RequestBody(\n     *          required=true,\n     *          @OA\\JsonContent(ref=\"#/components/schemas/MoviePost\")\n     *      ),\n     *      @OA\\Response(\n     *          response=201,\n     *          description=\"Successful operation\",\n     *          @OA\\JsonContent(ref=\"#/components/schemas/Movie\")\n     *       ),\n     *      @OA\\Response(\n     *          response=400,\n     *          description=\"Bad Request\"\n     *      ),\n     *      @OA\\Response(\n     *          response=401,\n     *          description=\"Unauthenticated\",\n     *           @OA\\JsonContent(\n     *              @OA\\Property(\n     *                  property=\"error\",\n     *                  type=\"string\",\n     *                  example=\"Usuario no autenticado\"))\n     *      ),\n     *      @OA\\Response(\n     *          response=403,\n     *          description=\"Forbidden\"\n     *      )\n     * )\n     */\n    public function store(MoviePost $request)\n    {\n        $movie = new Movie();\n        $movie-&gt;title = $request-&gt;title;\n        $movie-&gt;year = $request-&gt;year;\n        $movie-&gt;director = $request-&gt;director;\n        $movie-&gt;poster = $request-&gt;poster;\n        $movie-&gt;synopsis = $request-&gt;synopsis;\n        $movie-&gt;save();\n        response()-&gt;json($movie, 201);\n    }\n</code></pre> <p>Mireu que per al post utilitze la seguretat que ja havia definit.  Ara veureu una icona de bloqueig prop de la ruta.  Quan feu clic sobre aix\u00f2, podreu afegir l'autenticaci\u00f3 de Bearer.</p> <p></p> <p>Us encomane a que vejau el video on est\u00e0 tot explicat perqu\u00e8 amb els apunt soles queda una mica dif\u00edcil d'entendre.</p> <p>Documentaci\u00f3 de swagger-php</p>"},{"location":"Docker.html","title":"Docker","text":""},{"location":"Docker.html#installacio-de-docker","title":"Instal\u00b7laci\u00f3 de Docker","text":"<p>La instal\u00b7laci\u00f3 de docker dependr\u00e0 del sistema operatiu que estem utilitzant. Ac\u00ed anem a vore la que efecturan els que utilitzen linux, amb el sistema operatiu linux-mint o ubuntu , que \u00e9s el que ve instal\u00b7lat en les imatges suministrades. Per a mac o windows s'haur\u00e0 de mirar la p\u00e0gina web de docker</p> <p>Ens donem privilegis</p> <pre><code>sudo su\n</code></pre> <p>Utilitzant els repositoris de docker l'instal\u00b7lem:</p> <pre><code>echo \"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable\" | tee /etc/apt/sources.list.d/docker.list\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\n\napt update\n\napt install docker-ce docker-ce-cli containerd.io pigz\n</code></pre> <p>Donem permisos a l'usuari afegint-lo al grup de docker</p> <p><pre><code>usermod -aG docker $USER\n</code></pre> On $USER \u00e9s el teu usuari.</p> <p>Tamb\u00e9 haurem d'instal\u00b7lar el docker-compose</p> <pre><code>curl -L \"https://github.com/docker/compose/releases/download/1.26.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\nchmod +x /usr/local/bin/docker-compose\n</code></pre> <p>I provem</p> <pre><code>docker --version\n</code></pre> <p>Faltar\u00e0 engegar el servei de docker per a poder executar contenidors</p> <pre><code>sudo systemctl start docker.service\n</code></pre> <p>Posada en marxa d'un repositori en el IDE</p> <ul> <li>Es clona el repositori en un directori</li> <li>Es canvia el .env.example a .env</li> <li>Es canvia la variable BASE_DIRECTORY del .env al directori utilitzat</li> <li>Es posa en marxa els contenidors amb sh start.sh</li> <li>La primera vola s'executa el composer amb sh composer.sh</li> </ul> <p>Nota: Al principi de curs es canviar\u00e0 el /etc/hosts per afegir la linea</p> <p>127.0.0.1 batoi2021.my</p>"},{"location":"Proves.html","title":"Proves","text":""},{"location":"Proves.html#proves","title":"Proves","text":"<p>Per a executa proves la ferramenta m\u00e9s utilitzada en php \u00e9s phpunit.</p> <pre><code>composer require --dev phpunit/phpunit\n</code></pre> <p>L'element base del phpunit es el cas de prova, una classe que ha d'heretar de TestCase de la llibreria. Dins d'un cas de prova hi ha varias proves. Per a provar una classe de nom Usuari es crear\u00e0 una classe de nom UsuariTest. Esta classe contindr\u00e0 una s\u00e8rie de m\u00e8todes amb les proves que es volen realitzar. Estos m\u00e8todes han de ser publics, encara que les classe podr\u00e0 contindre altres m\u00e8todes auxiliars per tal de realitzar les proves. Per a indicar que el m\u00e8tode \u00e9s una prova hi ha dues opcions:</p> <ul> <li>Que el nombre comen\u00e7e per test</li> </ul> <pre><code>public function testCanCreateUsuari()\n</code></pre> <ul> <li>Utilitzar un bloc de comentaris espec\u00edfics amb la notaci\u00f3 test  </li> </ul> <pre><code>/**\n/* #test\n*/\npublic function testCanCreateUsuari()\n</code></pre> <p>Dins d'estos m\u00e8todes, la majoria de les comprovacions es realitzen utilitzant asserts, m\u00e8todes definits en la classe TestCase, que comprova si es complixen o no algunes condicions. Si alguna de les assercions no s'acomplixen es considera que la prova ha fallat.</p> <p>Per exemple podem provar la classe seg\u00fcent:</p> <pre><code>&lt;?php\n   class Matematicas{\n    /* funcion factorial */\n        public static function factorialEx($num){\n            if ($num &lt; 0) {\n                throw new InvalidArgumentException(\"N\ufffdmero negativo\");\n            }   \n            $resul = 1;\n            for($i=2; $i &lt;= $num; $i++){\n                $resul = $resul * $i;\n            }\n            return $resul;\n        }\n   }\n</code></pre> <p>amb la seg\u00fcent classe:</p> <pre><code>&lt;?php\n    require \"vendor/autoload.php\";\n    require \"Matematicas.php\";\n    use PHPUnit\\Framework\\TestCase;\n    class MatematicasTest extends TestCase{         \n        public  function testCero(){\n            $this-&gt;assertEquals(1, Matematicas::factorialEx(0));                        \n        }       \n        /**\n        * @test\n        * @expectedException InvalidArgumentException\n        */\n        public static function Excepcion(){\n            //equivalente a la anotaci\u00f3n  @expectedException\n            //$this-&gt;expectException(InvalidArgumentException::class);\n            return Matematicas::factorialEx(-1);            \n\n        }\n    }   \n</code></pre> <p>on el primer m\u00e8tode comprova que calcula be el factorial de 0, i el segon m\u00e8tode comprova que si el par\u00e0metre \u00e9s negatiu es llan\u00e7a una exempci\u00f3.</p> <p>Per a executar la prova cal executar phpunit des de la l\u00ednea de comanaments</p> <pre><code> /vendor/bin/phpunit MatematicasTest.php\n</code></pre> <p>M\u00e9s exemples: Podem provar les funcions que ja hem fet i que tenim al myHelpers:</p> <pre><code>&lt;?php\n/**\n * Created by PhpStorm.\n * User: igomis\n * Date: 2019-10-17\n * Time: 22:59\n */\n\nrequire dirname(__FILE__) . \"/../vendor/autoload.php\";\n$whoops = new \\Whoops\\Run;\n$whoops-&gt;pushHandler(new \\Whoops\\Handler\\PrettyPageHandler);\n$whoops-&gt;register();\n\nuse PHPUnit\\Framework\\TestCase;\n\nclass FunctionsTest extends TestCase\n{\n    public function test_calculadora()\n    {\n        $this-&gt;assertEquals(13,suma(6,7));\n        $this-&gt;assertEquals(-1,resta(6,7));\n        $this-&gt;assertEquals(42,multiplicacion(6,7));\n        $this-&gt;assertEquals('4 + 6 = 10',calculadora('+',4,6));\n    }\n}\n</code></pre> <p>o les classes Form i SIInput per a generar formulari</p> <pre><code>&lt;?php\n/**\n * Created by PhpStorm.\n * User: igomis\n * Date: 2019-10-17\n * Time: 22:59\n */\n\nrequire dirname(__FILE__) . \"/../vendor/autoload.php\";\n$whoops = new \\Whoops\\Run;\n$whoops-&gt;pushHandler(new \\Whoops\\Handler\\PrettyPageHandler);\n$whoops-&gt;register();\n\nuse Ejercicios\\Form;\nuse Ejercicios\\SIInput;\nuse PHPUnit\\Framework\\TestCase;\n\n\nclass FormTest extends TestCase\n{\n\n    public function test__construct()\n    {\n        $form = new Form([new SIInput('Usuari','usuario'),new SIInput('Password','password','password')]);\n        $this-&gt;assertIsArray($form-&gt;getComponents());\n        $this-&gt;assertCount(2,$form-&gt;getComponents());\n    }\n\n    public function testRender()\n    {\n        $form = new Form([new SIInput('Usuari','usuario'),new SIInput('Password','password','password')]);\n        $this-&gt;assertStringContainsString('password',$form-&gt;render());\n    }\n}\n</code></pre> <p><pre><code>&lt;?php\n/**\n * Created by PhpStorm.\n * User: igomis\n * Date: 2019-10-17\n * Time: 22:59\n */\n\nrequire dirname(__FILE__) . \"/../vendor/autoload.php\";\n$whoops = new \\Whoops\\Run;\n$whoops-&gt;pushHandler(new \\Whoops\\Handler\\PrettyPageHandler);\n$whoops-&gt;register();\n\nuse Ejercicios\\SIInput;\nuse PHPUnit\\Framework\\TestCase;\n\n\n\nclass SIInputTest extends TestCase\n{\n    public function test_works_textArea()\n    {\n        $input = new SIInput('Usuari','usuario','textarea');\n        $this-&gt;assertStringContainsString('textarea',$input-&gt;render());\n    }\n    public function test_works_textInput()\n    {\n        $input = new SIInput('Usuari','usuario');\n        $this-&gt;assertStringContainsString('text',$input-&gt;render());\n    }\n\n    public function test_works_textPass()\n    {\n        $input = new SIInput('Usuari','usuario','password');\n        $this-&gt;assertStringContainsString('password',$input-&gt;render());\n    }\n}\n</code></pre> Com veiem cada test cont\u00e9 una instaciaci\u00f3 de l'element que es vol provar i una comprobaci\u00f2 del resultat.</p> <p>Per a m\u00e9s informacio phpunit</p>"},{"location":"prova.html","title":"Aplicaciones web din\u00e1micas: PHP y Javascript.","text":""},{"location":"prova.html#1-programacion-del-cliente-web","title":"1.- Programaci\u00f3n del cliente web.","text":"<p>Cuando comenzaste con el presente m\u00f3dulo, uno de los primeros conceptos que aprendiste es a diferenciar entre la ejecuci\u00f3n de c\u00f3digo en el servidor web y la ejecuci\u00f3n de c\u00f3digo en el navegador o cliente web.</p> <p>Todo lo que has aprendido hasta el momento se ha centrado en la ejecuci\u00f3n de c\u00f3digo en el servidor web utilizando el lenguaje <code>PHP</code>. La otra parte importante de una aplicaci\u00f3n web, la programaci\u00f3n de c\u00f3digo que se ejecute en el navegador, no forma parte de los contenidos de este m\u00f3dulo. Tiene su propio m\u00f3dulo dedicado, Desarrollo Web en Entorno Cliente.</p> <p>Muchas de las aplicaciones web que existen en la actualidad tienen esos dos componentes: una parte de la aplicaci\u00f3n, generalmente la que contiene la l\u00f3gica de negocio, se ejecuta en el servidor; y otra parte de la aplicaci\u00f3n, de menor peso, se ejecuta en el cliente. Existen incluso cierto tipo de aplicaciones web, como \"Google Docs\", en las que gran parte de las funcionalidades que ofrecen se implementan utilizando programaci\u00f3n del cliente web.</p> <p>En la presente unidad vas a aprender c\u00f3mo integrar estos dos componentes de una misma aplicaci\u00f3n web: el c\u00f3digo <code>PHP</code> que se ejecutar\u00e1 en el servidor, con el c\u00f3digo que se enviar\u00e1 al cliente para que \u00e9ste lo ejecute.</p> <p>La programaci\u00f3n de guiones para su ejecuci\u00f3n en un cliente web es similar a lo que ya conoces sobre <code>PHP</code>, salvo que en este caso el c\u00f3digo completo del gui\u00f3n llega al navegador junto con las etiquetas <code>HTML</code>, y es \u00e9ste el encargado de procesarlo.</p> <p>As\u00ed como el c\u00f3digo <code>PHP</code> se marcaba utilizando los delimitadores \"<code>&lt;?PHP</code> <code>?&gt;\"</code>, en <code>HTML</code> existe una etiqueta que se utiliza para integrar el c\u00f3digo ejecutable por el navegador junto al resto de etiquetas. Se trata de la etiqueta <code>&lt;script&gt;</code> , que puede indicar tanto la localizaci\u00f3n del c\u00f3digo en un fichero externo, como simplemente delimitar unas l\u00edneas de c\u00f3digo dentro del propio fichero <code>HTML</code>.</p> <pre><code>// Inclusi\u00f3n de c\u00f3digo en el documento HTML\n&lt;script type=\"text/javascript\"&gt;\n// C\u00f3digo que ejecuta el navegador\n&lt;/script&gt;\n// Inclusi\u00f3n de c\u00f3digo en un fichero externo\n&lt;script type=\"text/javascript\" src=\"codigo.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Cuando el c\u00f3digo se incluye en el propio documento <code>HTML</code>, se suele encerrar en una secci\u00f3n <code>CDATA</code> para no encontrar errores de validaci\u00f3n en documentos <code>XHTML</code>. Estos errores aparecer\u00edan si dentro del c\u00f3digo del guion hubiera alg\u00fan car\u00e1cter especial como <code>\"&lt;</code>\" o \"<code>&gt;\"</code>.</p> <p>Sin embargo, al utilizar una secci\u00f3n <code>CDATA</code>, puede suceder que cuando se procese la p\u00e1gina como documento <code>HTML</code>, alg\u00fan navegador no reconozca \u00e9stas secciones. Es por este motivo que el texto <code>CDATA</code> que identifica estas secciones suele tambi\u00e9n ponerse dentro de un comentario (por ejemplo, utilizando <code>//</code> o <code>/* */</code>).</p> <pre><code>&lt;script type=\"text/javascript\"&gt;\n/* &lt;![CDATA[ */\n// C\u00f3digo que ejecuta el navegador\n/* ]]&gt; */\n&lt;/script&gt;\n</code></pre> <p>En un documento, una secci\u00f3n CDATA es aquella perteneciente a un documento que es marcado para que el analizador sint\u00e1ctico lo interprete como una cadena de caracteres y no como contenido etiquetado.</p>"},{"location":"prova.html#11-paginas-web-dinamicas","title":"1.1.- P\u00e1ginas web din\u00e1micas.","text":"<p>La inclusi\u00f3n de c\u00f3digo en p\u00e1ginas web para su ejecuci\u00f3n por parte del navegador tiene ciertas limitaciones:</p> <ul> <li>Cuando ejecutas c\u00f3digo <code>PHP</code> en un servidor, es normalmente el programador el que tiene el control sobre el entorno de ejecuci\u00f3n. Al cliente llegan \u00fanicamente etiquetas en lenguaje <code>HTML</code> o <code>XHTML</code>. Sin embargo, cuando programas c\u00f3digo para que se ejecute en un cliente web, no tienes siquiera la certeza de que el navegador del usuario soporte la ejecuci\u00f3n del c\u00f3digo que recibe. Existen ciertos sistemas, como dispositivos m\u00f3viles o navegadores integrados en hardware espec\u00edfico, que no permiten la ejecuci\u00f3n de c\u00f3digo de cliente.</li> <li>El c\u00f3digo que se ejecuta en el navegador est\u00e1 normalmente limitado a ser ejecutado en un entorno controlado, que no permite, por ejemplo, la lectura o escritura de ficheros en el ordenador del usuario. De esta forma se restringen los efectos negativos que pueda causar un guion y se favorece la confianza del usuario en este tipo de c\u00f3digo.</li> </ul> <p>Pese a estas limitaciones, la ejecuci\u00f3n de c\u00f3digo en el navegador encaja perfectamente con cierto tipo de tareas como:</p> <ul> <li>Comprobar y/o procesar los datos que introduce el usuario en los formularios, como paso previo a su env\u00edo al servidor web.</li> <li>Gestionar diferentes marcos y/o ventanas del navegador.</li> <li>Modificar de forma din\u00e1mica los elementos que componen la p\u00e1gina web, ajustando sus propiedades o estilos en respuesta a la interacci\u00f3n del usuario.</li> </ul> <p>El c\u00f3digo <code>JavaScript</code> de una p\u00e1gina se puede ejecutar en respuesta a eventos generados por el navegador. Por ejemplo, utilizando el evento <code>onsubmit</code> podemos llamar a una funci\u00f3n <code>validar_email</code> para validar una direcci\u00f3n de correo introducida por el usuario cuando se intenta enviar el formulario:</p> <pre><code>&lt;form action=\"usuario.php\" method=\"get\" name=\"datos_usuario\"  onsubmit=\"return validar_email()\"&gt;\n&lt;input type=\"text\" id=\"email\" /&gt;\n&lt;/form&gt;\n</code></pre> <p>Para la funci\u00f3n que realiza la validaci\u00f3n b\u00e1sica de una direcci\u00f3n de <code>email</code> puedes utilizar, por ejemplo, el siguiente c\u00f3digo:</p> <pre><code>function validar_email() {\n    valor = document.getElementById(\"email\").value;\n    pos_arroba = valor.indexOf(\"@\");\n    pos_punto = valor.lastIndexOf(\".\");\n    if (pos_arroba &lt; 1 || pos_punto &lt; pos_arroba+2 || pos_punto+2&gt;=valor.length) {\n        alert('Direcci\u00f3n de correo no v\u00e1lida.');\n        return false;\n    }\n    return true;\n}\n</code></pre> <p>Las p\u00e1ginas web que se aprovechan de las capacidades de ejecuci\u00f3n de c\u00f3digo en el cliente para cambiar su apariencia, o su funcionamiento, se conocen como p\u00e1ginas web din\u00e1micas.</p> <p>Se llama <code>HTML din\u00e1mico</code> (<code>DHTML</code>) al conjunto de t\u00e9cnicas que emplean <code>HTML</code>, el modelo de objetos del documento web (<code>[DOM](#tb6933733-f350-b4b9-b414-5f005ca03efb \"DOM | \"))</code>, hojas de estilo CSS y lenguaje ejecutado en el navegador para crear sitios webs din\u00e1micos.</p> <p>DOM es esencialmente una interfaz de plataforma que proporciona un conjunto est\u00e1ndar de objetos para representar documentos HTML, XHTML y XML.</p>"},{"location":"prova.html#12-el-lenguaje-javascript","title":"1.2.- El lenguaje JavaScript.","text":"<p>El lenguaje de guiones que se utiliza mayoritariamente hoy en d\u00eda para la programaci\u00f3n de clientes web es <code>JavaScript</code>. Su sintaxis est\u00e1 basada en la del lenguaje <code>C</code>, parecida a la que conocemos del lenguaje <code>PHP</code>. Aunque su utilizaci\u00f3n principal es incorporarlo a p\u00e1ginas web, tambi\u00e9n puedes encontrar <code>JavaScript</code> en otros lugares como en documentos <code>PDF, o para definir la funcionalidad de extensiones de escritorio o de algunas aplicaciones `widgets`).</code></p> <p>Si bien, la gran mayor\u00eda de navegadores web soportan c\u00f3digo en lenguaje <code>JavaScript</code>, debes tener en cuenta que:</p> <ul> <li>La ejecuci\u00f3n de <code>JavaScript</code> en el navegador puede haber sido deshabilitada por el usuario.</li> <li>La implementaci\u00f3n de <code>JavaScript</code> puede variar de un navegador a otro. Lo mismo sucede con el interface de programaci\u00f3n que usa <code>JavaScript</code> para acceder a la estructura de las p\u00e1ginas web: el <code>DOM</code>. Por este motivo, es conveniente que verifiques la funcionalidad del c\u00f3digo en diversos navegadores antes de publicarlo como parte de tu sitio web.</li> </ul> <p>Se conoce como motor <code>JavaScript</code> a la parte del navegador encargada de interpretar y ejecutar el c\u00f3digo <code>JavaScript</code> que forma parte de las p\u00e1ginas web. Los motores <code>JavaScript</code> que se incluyen en los navegadores han experimentado una importante mejora de rendimiento en los \u00faltimos tiempos. Existen pruebas espec\u00edficas destinadas a medir la velocidad de ejecuci\u00f3n de distintos motores <code>JavaScript</code>.</p> <p>Velocidad de ejecuci\u00f3n de distintos motores JavaScript.</p> <p>Aunque no vamos a aprender en esta unidad a programar en <code>JavaScript</code>, deber\u00edas saber c\u00f3mo depurar el c\u00f3digo que vamos a utilizar. Es conveniente que manejes un depurador para cada navegador que utilices.</p> <p>En versiones actuales de Firefox las herramientas de desarrollo ya vienen integradas en el \u00edtem de men\u00fa \"Desarrollador Web\".</p>"},{"location":"prova.html#13-comunicacion-asincrona-con-el-servidor-web-ajax","title":"1.3.- Comunicaci\u00f3n as\u00edncrona con el servidor web: AJAX.","text":"<p>Una de las principales causas de la evoluci\u00f3n de <code>JavaScript</code> es, sin duda, la tecnolog\u00eda <code>AJAX</code>. Como ya vimos en la primera unidad, el t\u00e9rmino <code>AJAX</code> hace referencia a la posibilidad de una p\u00e1gina web de establecer una comunicaci\u00f3n con un servidor web y recibir una respuesta sin necesidad de que el navegador recargue la p\u00e1gina.</p> <p><code>AJAX</code> utiliza el objeto <code>XMLHttpRequest</code>, creado originariamente por <code>Microsoft</code> como parte de su librer\u00eda <code>MSXML</code>, y que hoy en d\u00eda se ha incorporado de forma nativa a todos los navegadores actuales.</p> <p>Pese al nombre del objeto, y a que la letra X de las siglas AJAX hace referencia a XML, la informaci\u00f3n que se transmite de forma as\u00edncrona entre el navegador y el servidor web no es necesario que se encuentre en formato XML.</p> <p>Entre las tareas que puedes llevar a cabo gracias a AJAX est\u00e1n:</p> <ul> <li>Actualizar el contenido de una p\u00e1gina web sin necesidad de recargarla.</li> <li>Pedir y recibir informaci\u00f3n desde un servidor web manteniendo la p\u00e1gina cargada en el navegador.</li> <li>Enviar informaci\u00f3n de la p\u00e1gina a un servidor web en segundo plano.</li> </ul> <p>Dependiendo del navegador del usuario, y de si utiliza una versi\u00f3n antigua o moderna, tendr\u00e1s que usar un m\u00e9todo u otro para crear el objeto <code>XMLHttpRequest</code>:</p> <pre><code>// Distintas formas para crear el objeto \n//  XMLHttpRequest seg\u00fan el navegador\nxmlhttp = new ActiveXObject(\"Msxml2.XMLHTTP\");\nxmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\nxmlhttp = new XMLHttpRequest();\n</code></pre> <p>Afortunadamente, muchas de las librer\u00edas <code>JavaScript</code> de las que habl\u00e1bamos antes soportan tambi\u00e9n <code>AJAX</code> , y utilizan un c\u00f3digo adaptado seg\u00fan el navegador del usuario. Si utilizas una de estas librer\u00edas podr\u00e1s ahorrarte muchos quebraderos de cabeza al programar. Por ejemplo, si utilizas <code>jQuery</code> podr\u00edas utilizar <code>AJAX</code> para enviar en segundo plano el email validado en el ejemplo anterior. Simplemente tendr\u00edas que incluir en el <code>HTML</code> la librer\u00eda <code>jQuery</code>.</p> <pre><code>//Versi\u00f3n 3.5.0 jQuery CDN jQuery\n&lt;script src=\"https://code.jquery.com/jquery-3.5.0.min.js\"\n integrity=\"sha256xNzN2a4ltkB44Mc/Jz3pT4iU1cmeR0FkXs4pru/JxaQ=\"crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n</code></pre> <p>Y tras el c\u00f3digo de validaci\u00f3n, debes ejecutar la funci\u00f3n <code>AJAX</code> incluida en la librer\u00eda <code>jQuery:</code></p> <pre><code>function validar_email() {\n    valor = document.getElementById(\"email\").value;\n    // Aqu\u00ed ir\u00eda el c\u00f3digo de validaci\u00f3n\n    $.ajax({\n        type: \"POST\", url: \"email.php\", data: \"email=\" + valor,\n        statusCode: {\n        404: function() { alert('P\u00e1gina no encontrada'); }\n        },\n        success: function(result) { alert( \"Resultado: \" + result ); }\n    });\n    return false;\n}\n</code></pre> <p>La funci\u00f3n anterior env\u00eda la direcci\u00f3n de email introducida mediante <code>POST</code> a la p\u00e1gina <code>\"email.php\"</code>, y muestra un mensaje con el resultado obtenido.</p>"},{"location":"prova.html#2-php-y-javascript","title":"2.- PHP y JavaScript.","text":"<p>Si sabes programar aplicaciones que se ejecuten en un servidor web (con un lenguaje como <code>PHP</code>) y en el navegador del usuario (con <code>JavaScript/jQuery</code>), tienes en tu mano las herramientas necesarias para construir aplicaciones web completas. Sin embargo, es necesario que antes de comenzar tengas claras las funcionalidades que soporta cada una de estas tecnolog\u00edas de desarrollo, y c\u00f3mo puedes hacer para utilizar ambas a la vez.</p> <p>Llev\u00e1ndolo a los extremos, podr\u00edas hacer aplicaciones en <code>PHP</code> que utilicen programaci\u00f3n del cliente simplemente para tareas sencillas como verificar campos en los formularios antes de enviarlos. O, por el contrario, ser\u00eda tambi\u00e9n posible programar aplicaciones completas que se ejecuten en el navegador del usuario, dejando el lenguaje del servidor para proporcionar ciertas funcionalidades como almacenamiento en bases de datos.</p> <p>Una alternativa no es necesariamente mejor que la otra. Es necesario analizar de forma independiente la l\u00f3gica de cada aplicaci\u00f3n, de manera que no se malgasten los recursos del servidor realizando tareas que podr\u00edan trasladarse al cliente web. En ocasiones tambi\u00e9n es necesario comprobar los tiempos de carga de las p\u00e1ginas y el tama\u00f1o de las mismas. Puede ser preferible utilizar <code>AJAX</code> para, por ejemplo, enviar nuevos registros al servidor, si el esfuerzo que invertimos redunda en un interfaz de usuario m\u00e1s \u00e1gil y usable. En cualquier caso, la consistencia y robustez de la aplicaci\u00f3n no debe verse afectada.</p> <p>Si decides unir en una aplicaci\u00f3n programaci\u00f3n del cliente web con programaci\u00f3n del servidor web, habr\u00e1 ocasiones en que necesites comunicar ambos lenguajes. En el ejemplo anterior ya has comprobado c\u00f3mo puedes hacer para pasar un valor o una variable <code>JavaScript</code> desde el navegador web a un gui\u00f3n en <code>PHP</code>: envi\u00e1ndolo como par\u00e1metro <code>POST</code> o <code>GET</code> en una petici\u00f3n de nueva p\u00e1gina, bien sea al cargarla en el navegador o utilizando <code>AJAX</code> en una comunicaci\u00f3n as\u00edncrona:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Desarrollo Web&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        &lt;?php\n            // Creamos en la p\u00e1gina un c\u00f3digo JavaScript que\n            //   utiliza la variable PHP \"$email\"\n            $email = \"alumno@educacion.es\";\n            echo 'window.open(\"email.php?email='.urlencode($email).'\");';\n        ?&gt;\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>En ambos casos deber\u00e1s asegurarte de que las cadenas que insertes en las direcciones <code>URL</code> no incluyan caracteres inv\u00e1lidos. Para evitarlo, en <code>PHP</code> puedes usar la funci\u00f3n <code>\"urlencode\"</code>, y en <code>JavaScript</code>: <code>\"encodeURIComponent\"</code>.</p>"},{"location":"prova.html#21-aplicaciones-web-con-php-y-javascript","title":"2.1.- Aplicaciones web con PHP y JavaScript.","text":"<p>Con lo que has visto hasta el momento, seguramente, ya te has hecho una idea de qu\u00e9 tareas son las que con m\u00e1s frecuencia hacen uso de <code>JavaScript</code>. Y si hay una que destaca sobre el resto es, sin duda, la validaci\u00f3n de formularios <code>HTML</code>, que vamos a utilizar en los ejemplos que se desarrollan a lo largo de la presente unidad.</p> <p>Como ya sabes, el mecanismo que utilizan las aplicaciones web para permitir al usuario la entrada de informaci\u00f3n es el formulario . Los datos que se introducen en un formulario web se env\u00edan al servidor utilizando bien el m\u00e9todo <code>POST</code>, bien el m\u00e9todo <code>GET</code>. Muchos de los campos de los formularios tienen, normalmente, restricciones sobre el contenido que se debe rellenar. La validaci\u00f3n de un formulario web consiste en comprobar que el contenido introducido en todos los componentes del mismo cumpla estas restricciones.</p> <p>Si no utilizas c\u00f3digo ejecutable en el navegador, la \u00fanica forma de validar un formulario consiste en enviarlo al servidor web para comprobar si existen errores en los datos. En caso de que as\u00ed sea, habr\u00e1 que volver a enviar el formulario al navegador del usuario mostrando las advertencias oportunas.</p> <p>Obviamente, si utilizas <code>JavaScript</code> en tus aplicaciones, la validaci\u00f3n se puede realizar en el cliente web. De esta forma el proceso es mucho m\u00e1s r\u00e1pido. No es necesario enviar la informaci\u00f3n al servidor hasta que se haya comprobado que no existen errores de validaci\u00f3n.</p> <p>Sin embargo, aunque parecen claras las ventajas de la validaci\u00f3n de formularios en el cliente web, hay ocasiones en las que \u00e9sta no es posible. Ya vimos que no siempre podr\u00e1s asegurar que el navegador que utiliza el usuario tiene capacidad para ejecutar c\u00f3digo <code>JavaScript</code>, o incluso puede suceder que se haya deshabilitado por motivos de seguridad.</p> <p>En los casos que no sea posible asegurar la capacidad de ejecuci\u00f3n de c\u00f3digo de los clientes, la soluci\u00f3n \u00f3ptima ser\u00eda utilizar un escenario dual: dise\u00f1ar las aplicaciones suponiendo que es posible ejecutar <code>JavaScript</code> en los clientes, y al mismo tiempo prever la posibilidad de que no sea as\u00ed. Por ejemplo, en el caso de la validaci\u00f3n del formulario, podr\u00edas crear el c\u00f3digo <code>JavaScript</code> de validaci\u00f3n y, si en alg\u00fan cliente este c\u00f3digo no se puede ejecutar, preparar un c\u00f3digo <code>PHP</code> similar que realice la validaci\u00f3n en el servidor.</p> <p>Por ejemplo, supongamos que queremos validar los datos que se introducen en el siguiente formulario web:</p> <p></p> <p>Captura de pantalla Firefox (Elaboraci\u00f3n propia.)</p> <p>Si realizas la validaci\u00f3n en <code>PHP</code>, podr\u00edas generar junto con la p\u00e1gina web el texto con las advertencias de validaci\u00f3n. Y si el formulario lo quieres validar tambi\u00e9n utilizando <code>JavaScript</code>, tendr\u00e1s que crear los mismos textos o similares. Una posibilidad para no repetir el c\u00f3digo que introduce esos textos en el cliente y en el servidor, es introducir los textos de validaci\u00f3n en las etiquetas <code>HTML</code> de la p\u00e1gina web, y utilizar estilos para mostrarlos, o no, seg\u00fan sea oportuno.</p> <p>Por ejemplo, para realizar la validaci\u00f3n del formulario web anterior, puedes crear los siguientes textos en <code>HTML</code> (asociados al nombre, las contrase\u00f1as y la direcci\u00f3n de correo respectivamente):</p> <pre><code>&lt;span class='error'&gt;Debe tener m\u00e1s de 3 caracteres.&lt;/span&gt;\n&lt;span class='error'&gt;Debe ser mayor de 5 caracteres o no coinciden.&lt;/span&gt;\n&lt;span class='error'&gt;La direcci\u00f3n de email no es v\u00e1lida.&lt;/span&gt;\n</code></pre> <p>El c\u00f3digo <code>HTML</code> y <code>JavaScript</code> deber\u00e1 ocultar cada uno de los textos cuando la validaci\u00f3n de su elemento respectivo sea correcta. Por ejemplo, si el nombre tiene m\u00e1s de tres letras, validar\u00e1 correctamente y no se deber\u00e1 mostrar el primer mensaje.</p>"},{"location":"prova.html#211-aplicaciones-web-con-php-y-javascript-i","title":"2.1.1.- Aplicaciones web con PHP y JavaScript (I).","text":"<p>Para realizar la validaci\u00f3n del formulario en el servidor web utilizando <code>PHP</code>, necesitar\u00e1s utilizar las siguientes funciones o similares:</p> <pre><code>&lt;?php\nfunction validarNombre($nombre){\n    return !(strlen($nombre)&lt;4);\n\n}\nfunction validarEmail($email){\n    return preg_match(\"/^[a-z0-9]+([_\\\\.-][a-z0-9]+)*@([a-z0-9]+([\\.-][a-z0-9]+)*)+\\\\.[a-z]{2,}$/i\", $email);\n}\nfunction validarPasswords($pass1, $pass2) {\n    return ($pass1 == $pass2) &amp;&amp; (strlen($pass1) &gt; 5);\n}\n</code></pre> <p>F\u00edjate en el uso de la funci\u00f3n <code>\"preg_match()\"</code> y de expresiones regulares (<code>regexp</code>) para validar la direcci\u00f3n de correo.</p> <p>Funci\u00f3n <code>preg_match</code></p> <p>Ten en cuenta que las barras invertidas (<code>\"\\\"</code>) tienen un significado especial dentro de una cadena de <code>PHP</code> (sirven para escapar el siguiente car\u00e1cter, por ejemplo por si queremos mostrar unas comillas); por ese motivo, la doble barra \"<code>\\\\\"</code> se convierte en una barra simple <code>\"\\\"</code> cuando se interpreta la expresi\u00f3n regular.</p> <p>Son una secuencia de caracteres que conforma un patr\u00f3n de b\u00fasqueda.</p>"},{"location":"prova.html#debes-conocer","title":"Debes conocer","text":"<p>En ocasiones es importante saber construir expresiones regulares en <code>PHP</code> para realizar comparaci\u00f3n de cadenas de texto con patrones. Tienes m\u00e1s informaci\u00f3n en el siguiente enlace.</p> <p>Expresiones regulares en PHP.</p> <p>Con las funciones anteriores, puedes crear c\u00f3digo en <code>PHP</code> que oculte los mensajes de validaci\u00f3n cuando no sean necesarios:</p> <pre><code>&lt;span id='errUsu' for='usu' \n    class='&lt;?php echo (!isset($_POST['enviar']) || validarNombre($_POST['usu'])) ? \"d-none\" : \"input-group form-group text-danger\" ?&gt;'&gt;\nDebe tener m\u00e1s de tres caracteres.\n&lt;/span&gt;\n&lt;span id='errPass' for='pass2' \n    class='&lt;?php echo (!isset($_POST['enviar']) || validarPasswords($_POST['pass1'], $_POST['pass2'])) ? \"d-none\" : \"input-group form-group text-danger\" ?&gt;'&gt;\n    Deben tener m\u00e1s de 5 caracteres o ser iguales.\n&lt;/span&gt;\n&lt;span id='errMail' for='mail' \n    class='&lt;?php echo (!isset($_POST['enviar']) || validarEmail($_POST['mail'])) ? \"d-none\" : \"input-group form-group text-danger\" ?&gt;'&gt;\n    La direcci\u00f3n de email NO es v\u00e1lida.\n&lt;/span&gt;\n</code></pre> <p>El c\u00f3digo anterior oculta los textos de validaci\u00f3n que no sea necesario mostrar. En <code>Bootstrap</code>, la clase: <code>\"d-none\"</code> equivale a <code>\"display:none\"</code> en <code>CSS.</code></p> <p>F\u00edjate que se utiliza el operador ternario de comparaci\u00f3n en \u00e9l la expresi\u00f3n <code>\"(expr1) ? (expr2) : (expr3)\"</code> eval\u00faa a <code>\"expr2\"</code> si <code>\"expr1\"</code> se eval\u00faa como <code>\"TRUE\"</code> y a <code>\"expr3\"</code> si <code>\"expr1\"</code> se eval\u00faa como <code>\"FALSE\"</code>.</p> <p></p> <p>Recorte captura de pantalla de Firefox (Elaboraci\u00f3n propia.)</p> <p>Revisa el c\u00f3digo de validaci\u00f3n <code>PHP</code> resultante. Descargar c\u00f3digo de ejemplo: C\u00f3digo (zip - 1,88 KB)</p>"},{"location":"prova.html#212-aplicaciones-web-con-php-y-javascript-ii","title":"2.1.2.- Aplicaciones web con PHP y JavaScript (II).","text":"<p>Partiendo de la p\u00e1gina <code>PHP</code> anterior, que ya incluye c\u00f3digo para validar el formulario web en el servidor, vas a ver c\u00f3mo puedes hacer para incorporarle c\u00f3digo en <code>JavaScript</code> que realice la misma validaci\u00f3n en el cliente. De esta forma, si el navegador del usuario soporta <code>JavaScript</code>, se reducir\u00e1 el procesamiento del servidor y la transferencia de informaci\u00f3n entre \u00e9ste y el cliente.</p> <p>Crear\u00e1s todo el c\u00f3digo necesario en un archivo externo que llamaremos <code>\"validar.js\"</code>. Como vamos a utilizar la librer\u00eda <code>jQuery</code>, tendr\u00e1s que a\u00f1adir las dos l\u00edneas siguientes a la p\u00e1gina anterior:</p> <pre><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script src='validar.js'&gt;&lt;/script&gt;\n</code></pre> <p>En el enlace siguiente puedes encontrar los enlaces para bajarte el <code>CDN</code> m\u00e1s reciente para <code>jQuery</code>: <code>Jquery</code>.</p> <p>En el c\u00f3digo <code>JavaScript</code> habr\u00e1 que definir unas funciones de validaci\u00f3n similares a las programadas anteriormente en <code>PHP</code>:</p> <pre><code>function validarNombre() {\n    var usu = $(\"#usu\");\n    var errUsu = $(\"#errUsu\");\n    if (usu.val().length &lt; 4) {\n        errUsu.removeClass(\"d-none\").addClass(\"input-group form-group text-danger\");\n        return false;\n    }\n    errUsu.last().addClass(\"d-none\");\n    return true;\n\n}\nfunction validarPass() {\n    var pass1 = $(\"#pass1\");\n    var pass2 = $(\"#pass2\");\n    var errPass = $(\"#errPass\");\n    if (pass1.val().length &lt; 6 || pass1.val() != pass2.val()) {\n        errPass.removeClass(\"d-none\").addClass(\"input-group form-group text-danger\");\n        return false;\n    }\n    errPass.last().addClass(\"d-none\");\n    return true;\n\n}\nfunction validarMail() {\n    var mail = $(\"#mail\")\n    var errMail = $(\"#errMail\");\n    if (!mail.val().match(\"^[a-zA-Z0-9]+[a-zA-Z0-9_-]+@[a-zA-Z0-9]+[a-zA-Z0-9.-]+[a-zA-Z0-9]+.[a-z]{2,4}$\")) {\n        errMail.removeClass(\"d-none\").addClass(\"input-group form-group text-danger\");\n        return false;\n    }\n    errMail.last().addClass(\"d-none\");\n    return true;\n}\nfunction validar() {\n    return validarNombre() &amp; validarMail() &amp; validarPass();\n}\n</code></pre> <p>En <code>JavaScript</code> usamos la funci\u00f3n <code>\"match\"</code> para validar las direcciones de <code>email</code>. Las expresiones regulares que admite esta funci\u00f3n no son exactamente iguales, pero si parecidas, a las que viste anteriormente para la funci\u00f3n <code>\"preg_match\"</code> de <code>PHP</code>.</p> <p>Las funciones usan los m\u00e9todos de <code>jQuery</code> <code>addClass()</code> y <code>removeClass()</code> para incorporar, y quitar, respectivamente, los textos de validaci\u00f3n a la clase oculto, lo mismo que hac\u00eda el c\u00f3digo <code>PHP</code> anterior. Para seleccionar los elementos a ocultar, puedes utilizar tambi\u00e9n <code>jQuery</code>. Por ejemplo, para seleccionar el elemento de la p\u00e1gina web con identificador <code>\"usu\"</code>, se pone:</p> <pre><code>var usu=$(\"#usu\");\n</code></pre> <p>Podemos capturar el evento <code>submit</code> del formulario forzando a que se valide con la funci\u00f3n de <code>JavaScript</code>. Si la validaci\u00f3n no es correcta <code>event.preventDefault()</code> evitar\u00e1 que se haga el <code>submit</code> del mismo.</p> <pre><code>$(\"#registro\").submit(function(event){\n    if(!validar()) event.preventDefault();\n});\n</code></pre> <p>En el c\u00f3digo final del ejemplo se ha quitado la validaci\u00f3n <code>PHP</code> (en el servidor) para que se vea m\u00e1s legible</p> <p>C\u00f3digo final de Ejemplo. (zip - 2,27 KB)\u00a0</p> <p>Si trabajas con <code>BootStrap</code> en su p\u00e1gina te puedes descargar una plantilla de ejemplo donde ya viene integrado <code>Bootstrap</code> y <code>jQuery</code> .Puedes ver la plantilla en el enlace siguiente: Plantilla Ejemplo</p>"},{"location":"prova.html#3-utilizacion-de-ajax-con-php","title":"3.- Utilizaci\u00f3n de AJAX con PHP.","text":""},{"location":"prova.html#caso-practico","title":"Caso pr\u00e1ctico","text":"<p>Como ya sabes, la tecnolog\u00eda <code>AJAX</code> se utiliza desde el cliente para permitir comunicaciones as\u00edncronas con el servidor web, sin necesidad de recargar la p\u00e1gina que se muestra en el navegador. Se basa en la utilizaci\u00f3n de c\u00f3digo en lenguaje <code>JavaScript</code>. Por tanto, te estar\u00e1s preguntando, \u00bfqu\u00e9 tiene que ver la tecnolog\u00eda <code>AJAX</code> con el lenguaje <code>PHP</code>?</p> <p>Acabamos de ver c\u00f3mo se pueden crear aplicaciones web que utilicen de forma simult\u00e1nea la programaci\u00f3n del cliente web (con <code>JavaScript</code>) y la programaci\u00f3n del servidor web (con <code>PHP</code>). En el procedimiento seguido en el ejemplo anterior, ambas tecnolog\u00edas coexist\u00edan en una misma p\u00e1gina, pero su programaci\u00f3n era independiente. El c\u00f3digo <code>PHP</code> se ejecutaba en el servidor, y en la misma p\u00e1gina se inclu\u00edan tambi\u00e9n guiones en lenguaje <code>JavaScript</code> que se ejecutan en el navegador. En nuestro ejemplo solamente exist\u00eda una relaci\u00f3n: si el navegador permit\u00eda la ejecuci\u00f3n de c\u00f3digo <code>JavaScript</code>, se deshabilitaba el env\u00edo del formulario y la validaci\u00f3n se realizaba en el cliente. En este caso no se llegaba a enviar la p\u00e1gina al servidor y no se ejecutaba por tanto el c\u00f3digo <code>PHP</code> de validaci\u00f3n.</p> <p>Si vas a usar aplicaciones que utilicen ambos lenguajes, es preferible tener un mecanismo mejor para integrarlos. Afortunadamente existen librer\u00edas para <code>PHP</code> que te permiten aprovechar las capacidades de <code>JavaScript</code> utilizando casi exclusivamente c\u00f3digo en lenguaje <code>PHP</code>. Estas librer\u00edas definen una serie de objetos que puedes utilizar en el c\u00f3digo de servidor, y que generan de forma autom\u00e1tica c\u00f3digo <code>JavaScript</code> en las p\u00e1ginas web que se env\u00edan al cliente.</p> <p>La mayor\u00eda de estas librer\u00edas a\u00f1aden a las aplicaciones web funcionalidades de la tecnolog\u00eda <code>AJAX</code>. Esto es: permiten crear p\u00e1ginas <code>PHP</code> que, tras ejecutarse en el servidor, producen p\u00e1ginas web que incorporan c\u00f3digo <code>JavaScript</code> con funcionalidades <code>AJAX</code>. El mecanismo de funcionamiento lo puedes observar en el siguiente diagrama.</p> <p></p> <p>Editor DIA (Elaboraci\u00f3n propia)</p> <p>Muchas de estas librer\u00edas suelen apoyarse en librer\u00edas <code>JavaScript</code> como <code>jQuery</code> para la ejecuci\u00f3n de c\u00f3digo en el cliente. En Internet puedes encontrar informaci\u00f3n sobre librer\u00edas <code>PHP</code> con soporte para <code>AJAX</code>.</p> <p>A continuaci\u00f3n vas a aprender a utilizar dos de estas librer\u00edas: Xajax y jQuery4PHP.</p>"},{"location":"prova.html#31-xajax","title":"3.1.- Xajax.","text":"<p><code>Xajax</code> es una librer\u00eda <code>PHP</code> de c\u00f3digo abierto que permite generar aplicaciones web con tecnolog\u00eda <code>AJAX</code>. Facilita la utilizaci\u00f3n desde el cliente de funciones existentes en el servidor. Al utilizar los objetos <code>AJAX</code> en el c\u00f3digo <code>PHP</code>, las p\u00e1ginas <code>HTML</code> que se obtienen incorporan el c\u00f3digo <code>JavaScript</code> necesario para realizar las llamadas al servidor mediante <code>AJAX</code>. En la p\u00e1gina web del proyecto tienes informaci\u00f3n disponible sobre su utilizaci\u00f3n.</p> <p>P\u00e1gina en GitHub del proyecto</p> <p>Para poder utilizar <code>AJAX</code>, desc\u00e1rgate la \u00faltima versi\u00f3n de la librer\u00eda desde la secci\u00f3n de descargas de su p\u00e1gina web. De las carpetas que contienen los ficheros comprimidos, necesitas el contenido de <code>\"xajax_core</code>\" y <code>\"xajax_js\"</code>. C\u00f3pialas a una ruta de tu servidor web en la que sean accesibles por tus aplicaciones web. Descargar <code>ZIP</code></p> <p>En las p\u00e1ginas <code>PHP</code> en que quieras utilizar <code>AJAX</code>, deber\u00e1s incluir la librer\u00eda escribiendo el siguiente c\u00f3digo:</p> <pre><code>require_once(\"xajax_core/xajax.inc.php\");\n</code></pre> <p>Aseg\u00farate de que la ruta a la librer\u00eda sea la correcta. Lo siguiente es crear un objeto de la clase <code>xajax</code>, indicando como par\u00e1metro el script <code>PHP</code> que contiene las funciones a las que se podr\u00e1n realizar llamadas mediante <code>AJAX</code>. Puedes incluir estas funciones en una p\u00e1gina aparte o en la misma p\u00e1gina <code>PHP</code>, y en este caso no ser\u00e1 necesario indicar ning\u00fan par\u00e1metro:</p> <pre><code>$xajax = new xajax();\n</code></pre> <p><code>AJAX</code> necesita incluir en la p\u00e1gina web que se env\u00eda al navegador su propio c\u00f3digo <code>JavaScript</code>. Para ello, tienes que incluir en tu c\u00f3digo <code>PHP</code> la siguiente llamada al m\u00e9todo <code>printJavaScript</code> del objeto <code>$xajax</code>:</p> <pre><code>$xajax-&gt;printJavascript();\n</code></pre> <p>En caso necesario, tambi\u00e9n deber\u00e1s configurar la ruta de acceso a la carpeta <code>xajax_js</code> que contiene el c\u00f3digo <code>JavaScript</code> de la librer\u00eda (usa tu propia ruta como segundo par\u00e1metro). Esta carpeta se est\u00e1 incluida en el proyecto:</p> <pre><code>$xajax-&gt;configure('javascript URI','./libs/');;\n</code></pre> <p>Existen otras opciones de configuraci\u00f3n de Xajax. Por ejemplo, cuando las cosas no funcionan como deber\u00edan, es muy interesante la opci\u00f3n que activa los mensajes de depuraci\u00f3n:</p> <pre><code>$xajax-&gt;configure('debug',true);\n</code></pre> <p></p> <p>Captura de pantalla Firefox (Elaboraci\u00f3n propia.)</p> <p>Y por \u00faltimo, tienes que utilizar el m\u00e9todo <code>\"register()\"</code> para registrar cada una de las funciones <code>PHP</code> del servidor que estar\u00e1n disponibles para ser ejecutadas de forma as\u00edncrona desde el navegador:</p> <pre><code>$xajax-&gt;register(XAJAX_FUNCTION,\"funcion1\");\n$xajax-&gt;register(XAJAX_FUNCTION,\"funcion2\");\n. . .\n</code></pre> <p>En el script <code>PHP</code> en que definas las funciones (si no es la misma p\u00e1gina que la anterior), tienes que incluir la librer\u00eda, crear el objeto y registrar las funciones de la misma forma que hiciste antes:</p> <pre><code>require_once(\"xajax_core/xajax.inc.php\");\n$xajax = new xajax();\n$xajax-&gt;register(XAJAX_FUNCTION,\"funcion1\");\n$xajax-&gt;register(XAJAX_FUNCTION,\"funcion2\");\n</code></pre> <p>Al registrar una funci\u00f3n, web crea autom\u00e1ticamente una funci\u00f3n <code>JavaScript</code> en el documento <code>HTML</code> con su mismo nombre prefijado por \"<code>xajax_</code>\". En el caso anterior, se crear\u00e1n las funciones <code>\"xajax_funcion1\"</code> y <code>\"xajax_funcion2\"</code>.</p> <p>Adem\u00e1s deber\u00e1s utilizar el m\u00e9todo <code>\"processRequest()\"</code>, que es el encargado de procesar las llamadas que reciba la p\u00e1gina.</p> <pre><code>$xajax-&gt;processRequest();\n</code></pre> <p>Es importante tener en cuenta que la llamada a <code>processRequest</code> debe realizarse antes de que el guion <code>PHP</code> genere ning\u00fan tipo de salida.</p> <p>En cada una de las funciones que definas, podr\u00e1s instanciar y utilizar un objeto de la clase <code>xajaxResponse</code> para devolver al navegador los comandos resultado del procesamiento:</p> <pre><code>function funcion1($a){\n    $respuesta = new xajaxResponse();\n    . . .\n    . . .\n    return $respuesta;\n}\n</code></pre>"},{"location":"prova.html#311-xajax-i","title":"3.1.1.- Xajax (I).","text":"<p>Vamos a ver un ejemplo de programaci\u00f3n que utilice la librer\u00eda <code>Xajax</code>. Partiendo del formulario web que utilizaste anteriormente, veremos el c\u00f3digo <code>Xajax</code> necesario para utilizar <code>AJAX</code> en su validaci\u00f3n. La idea es crear una funci\u00f3n <code>PHP</code>, que llamaremos \"<code>validarFormulario()\"</code>, que reciba los datos del formulario y realice su validaci\u00f3n. La p\u00e1gina web, al pulsar el bot\u00f3n de enviar del formulario, utilizar\u00e1 <code>AJAX</code> para llamar a esta funci\u00f3n y mostrar los errores de validaci\u00f3n que devuelva.</p> <p></p> <p>Captura de pantalla FIrefox (Elaboraci\u00f3n propia)</p> <p>En este ejemplo, todo el c\u00f3digo va a compartir la misma p\u00e1gina, incluyendo las funciones que se ejecutar\u00e1n mediante <code>AJAX</code>. El primer paso es incluir la librer\u00eda <code>Xajax</code>, y definir la funci\u00f3n de validaci\u00f3n, que aprovechar\u00e1 el c\u00f3digo de validaci\u00f3n <code>PHP</code> que creaste antes:</p> <pre><code>&lt;?php\n//1.- Incluimos las librerias Xajax\nrequire_once \"xajax/xajax_core/xajax.inc.php\";\n//2.- Creamos las funciones de validaci\u00f3n que ser\u00e1n lammadas desde JS\nfunction validarNombre($nombre){\n    if (strlen($nombre) &lt; 4) return false;\n    return true;\n}\nfunction validarEmail($email){\n    return preg_match(\"/^[a-z0-9]+([_\\\\.-][a-z0-9]+)*@([a-z0-9]+([\\.-][a-z0-9]+)*)+\\\\.[a-z]{2,}$/i\", $email);\n}\nfunction validarPasswords($pass1, $pass2){\n    return ($pass1 == $pass2 &amp;&amp; strlen($pass1) &gt; 5);\n}\nfunction validarFormulario($valores){\n    $respuesta = new xajaxResponse();\n    $error = false;\n    if (!validarNombre($valores['usu'])) {\n        $respuesta-&gt;assign(\"errUsu\", \"innerHTML\", \"El nombre debe tener m\u00e1s de 3 caracteres.\");\n        $error = true;\n    } else $respuesta-&gt;clear(\"errUsu\", \"innerHTML\");\n    if (!validarPasswords($valores['pass1'], $valores['pass2'])) {\n        $respuesta-&gt;assign(\"errPass\", \"innerHTML\", \"La contrase\u00f1a debe ser mayor de 5 caracteres o no coinciden.\");\n        $error = true;\n    } else $respuesta-&gt;clear(\"errPass\", \"innerHTML\");\n    if (!validarEmail($valores['mail'])) {\n        $respuesta-&gt;assign(\"errMail\", \"innerHTML\", \"La direcci\u00f3n de email no es v\u00e1lida.\");\n        $error = true;\n    } else $respuesta-&gt;clear(\"errMail\", \"innerHTML\");\n    if (!$error) $respuesta-&gt;alert(\"Todo correcto.\");\n\n    $respuesta-&gt;assign(\"enviar\", \"value\", \"Enviar\");\n    $respuesta-&gt;assign(\"enviar\", \"disabled\", false);\n\n    return $respuesta;\n}\n</code></pre> <p>Como ves, si el nombre no valida, se utiliza el m\u00e9todo <code>assign</code> de <code>\"xajaxResponse()\"</code> para asignar al elemento de <code>\"id=errUsu\"</code> (un <code>span</code> que ya est\u00e1 creado) el mensaje de error correspondiente. Si el nombre es v\u00e1lido, se vac\u00eda el contenido de ese elemento utilizando <code>\"clear()\"</code> (por si se estuviera mostrando alg\u00fan mensaje de error anterior). Este procedimiento tendr\u00e1s que realizarlo para los tres elementos que debes validar en el formulario.</p> <p>Si no se produce ning\u00fan error de validaci\u00f3n, se muestra un mensaje de informaci\u00f3n de que todo est\u00e1 correcto. Adem\u00e1s, se utiliza <code>\"assign\"</code> para volver a habilitar el bot\u00f3n de env\u00edo del formulario, y restaurar su etiqueta a <code>Enviar</code> (ahora vemos en qu\u00e9 otro lugar se cambia).</p> <p>Como ya viste anteriormente, antes de crear el contenido <code>HTML</code> de la p\u00e1gina, deber\u00e1s incluir las siguientes sentencias <code>PHP</code>:</p> <pre><code>$xajax = new xajax();\n$xajax-&gt;register(XAJAX_FUNCTION,\"validarFormulario\");\n$xajax-&gt;configure('javascript URI, 'xajax/');\n$xajax-&gt;configure(\"debug\", true); //si queremos debug\n$xajax-&gt;processRequest();\n</code></pre>"},{"location":"prova.html#312-xajax-ii","title":"3.1.2.- Xajax (II).","text":"<p>Para ejecutar el c\u00f3digo de validaci\u00f3n cuando se env\u00ede el formulario deber\u00e1s crear una funci\u00f3n <code>JavaScript</code> y asignarla al evento <code>\"onsubmit\"</code> del formulario.</p> <pre><code>&lt;form id='miForm' action=\"javascript:void(null);\" onsubmit=\"enviarFormulario();\"&gt;\n</code></pre> <p>La funci\u00f3n <code>JavaScript</code> <code>\"enviarFormulario()\"</code> utilizar\u00e1 la funci\u00f3n <code>\"xajax_validarFormulario()\"</code> que ha sido creada autom\u00e1ticamente por <code>Xajax</code> al registrar la funci\u00f3n correspondiente. Adem\u00e1s se encargar\u00e1 de deshabilitar el bot\u00f3n de env\u00edo y de cambiar el texto que muestra:</p> <pre><code>xajax.$('enviar').disabled=true;\nxajax.$('enviar').value=\"Un momento...\";\nxajax_validarFormulario (xajax.getFormValues(\"miForm\"));\n</code></pre> <p>Este m\u00e9todo de llamar a una funci\u00f3n registrada se conoce como as\u00edncrono. Una vez realizada la llamada a la funci\u00f3n, el procesamiento del formulario contin\u00faa sin esperar a recibir una respuesta. Es por este motivo que se deshabilita el bot\u00f3n de enviar el formulario. Cuando se recibe la respuesta de la funci\u00f3n, se producen en el formulario los cambios que se indican en la misma.</p> <p>Existe en <code>Xajax</code> otro m\u00e9todo de realizar llamadas s\u00edncronas a una funci\u00f3n registrada: el m\u00e9todo: \"<code>xajax.request()\"``.</code></p> <pre><code>respuesta = xajax.request({xjxfun:\"validarFormulario\"}, {mode:'synchronous', parameters: [\"valor1\", \"valor2\", \u2026]})\n</code></pre> <p>La funci\u00f3n <code>PHP</code> a la que se realiza la llamada, debe recibir tantos par\u00e1metros como se pasan. Para indicar el valor que se devuelve, puede usar el m\u00e9todo <code>\"setReturnValue()\"</code> de la clase <code>xajaxResponse</code>.</p> <pre><code>$respuesta = new xajaxResponse();\n. . .\n$respuesta-&gt;setReturnValue(\"valorDevuelto\");\nreturn $respuesta;\n</code></pre> <p>F\u00edjate que para realizar estas acciones se utiliza el objeto <code>JavaScript</code>: <code>xajax</code>. Su m\u00e9todo <code>\"getFormValues()\"</code> se encarga de obtener los datos de un formulario</p> <p>Para acceder a los elementos de una p\u00e1gina <code>HTML</code> mediante <code>JavaScript</code> mediante su atributo <code>\"id\"</code>, se puede usar:</p> <pre><code>objUsuario = document.getElementById(\"usuario\");\n</code></pre> <p>Y si quieres conocer su valor:</p> <pre><code>valorUsuario = objUsuario.value;\n</code></pre> <p></p> <p>Captura Firefox (Elaboraci\u00f3n Propia.)</p> <p>Si utilizas La herramientas de desarrollador de Firefox puedes comprobar que los par\u00e1metros se env\u00edan mediante POST.</p> <p>Es importante que tengas clara la estructura en clases de la librer\u00eda <code>Xajax</code>, y sepas diferenciar entre las clases <code>PHP</code> y las clases <code>JavaScript</code> de la misma. Las principales clases son las que has visto en el ejemplo anterior: <code>xajax</code> y <code>xajaxResponse</code> en cuanto a clases <code>PHP</code>, y <code>xajax</code> en cuanto a <code>JavaScript</code>.</p>"},{"location":"prova.html#313-xajax-iii","title":"3.1.3.- Xajax (III).","text":"<p>Esta funci\u00f3n, que se encargar\u00e1 de validar el formulario, puedes crearla en el mismo fichero <code>PHP</code> o en un fichero aparte. Deber\u00e1s incluir tambi\u00e9n el c\u00f3digo necesario para <code>Xajax</code>:</p> <pre><code>&lt;head&gt;\n    . . .\n&lt;?php\n    // Le indicamos a Xajax que incluya el c\u00f3digo JavaScript necesario\n    $xajax-&gt;printJavascript();\n?&gt;\n    &lt;script type=\"text/javascript\" src=\"validar.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre> <p>Puedes descargar y comprobar el c\u00f3digo completo de la p\u00e1gina.</p> <p>C\u00f3digo completo de la p\u00e1gina (zip - 0,14 MB)</p> <p>Aseg\u00farate de incluir la librer\u00eda y ajustar las rutas en el c\u00f3digo. Si tienes problemas, puedes utilizar las herramientas de desarrollador web de Firefox para comprobar que los cambios que realiza <code>Xajax</code> en el <code>HTML</code> son los adecuados.</p>"},{"location":"prova.html#recomendacion","title":"Recomendaci\u00f3n","text":"<p>Cuando trabajas con <code>Xajax</code> en la carpeta <code>\"xajax_js\"</code> se crea una carpeta llamada <code>\"deferred\"</code> con archivos <code>Javascript</code> que <code>Xajax</code> necesita, aseg\u00farate que <code>Apache</code> tenga permisos de escritura en esta carpeta. (se recomienda crear t\u00fa la carpeta \"<code>deferred</code>\" dentro de \"<code>\"xajax_js\"</code>\" y darle permisos\u00a0 <code>777</code> por ejemplo).</p>"},{"location":"prova.html#ejercicio-resuelto","title":"Ejercicio resuelto","text":"<p>Partiendo de la base de datos \"<code>proyecto</code>\" que ya utilizamos en unidades anteriores, utiliza <code>Xajax</code> para cambiar el mecanismo de login. Se trata de crear una funci\u00f3n en <code>PHP</code> de nombre <code>\"vUsuario\"</code>, que reciba como par\u00e1metros un nombre y contrase\u00f1a, y que compruebe estas credenciales con la base de datos y devuelva <code>false</code> sin no son correctas o <code>true</code> sin son v\u00e1lidas. En este caso, deber\u00e1 encargarse, tambi\u00e9n, de almacenar el nombre del usuario en una variable de sesi\u00f3n. Si la validaci\u00f3n es v\u00e1lida cargaremos la p\u00e1gina <code>\"listado.php\"</code> con un listado de los productos disponibles (a esta \u00faltima p\u00e1gina no podremos acceder si no tenemos la variable de sesi\u00f3n inicializada). Esta p\u00e1gina tendr\u00e1 un bot\u00f3n para cerrar sesi\u00f3n.</p> <p>var feedbackquesFeedback0b47text = \"Mostrar retroalimentaci\u00f3n\";</p>"},{"location":"prova.html#retroalimentacion","title":"Retroalimentaci\u00f3n","text":"<p>Deber\u00e1s utilizar <code>xajax.request</code> para realizar una llamada s\u00edncrona a la funci\u00f3n. Revisa el c\u00f3digo que se propone como soluci\u00f3n al ejercicio.</p> <p>Descargar una soluci\u00f3n propuesta al ejercicio. (zip - 0,20 MB)</p>"},{"location":"prova.html#32-jquery4php","title":"3.2.- JQuery4PHP.","text":"<p>Omar Yepez (GNU/GPL)</p> <p>La otra librer\u00eda con la que vas a trabajar se llama <code>jQuery4PHP</code>. Su objetivo es proporcionar un interface de programaci\u00f3n en <code>PHP</code> que aproveche las capacidades de la librer\u00eda de <code>JavaScript jQuery</code>. Es de c\u00f3digo abierto, disponible bajo licencias <code>MIT</code> y <code>GPLv2</code>, y funciona \u00fanicamente con las \u00faltimas versiones de <code>PHP</code> (a partir de la versi\u00f3n 5).</p> <p><code>[jQuery4PHP](http://jquery4php.sourceforge.net/ \"Acceder a p\u00e1gina web de la librer\u00eda jQuery4PHP (Se abre en una ventana nueva)\")</code></p> <p>Para poder utilizarla en tus p\u00e1ginas puedes descargarte la \u00faltima versi\u00f3n o bien instalarla con <code>Composer</code> (recomendado):</p> <ul> <li>P\u00e1gina de descargas.</li> <li>Librer\u00eda en <code>Packagist</code>.</li> </ul> <p>En las p\u00e1ginas <code>PHP</code> en que quieras utilizar <code>jQuery4PHP</code>, deber\u00e1s incluir la librer\u00eda escribiendo el siguiente c\u00f3digo:</p> <p>Si has hecho la instalaci\u00f3n normal:</p> <pre><code>&lt;?php\n    require_once(\"YepSua/Labs/RIA/jQuery4PHP/YsJQueryAutoloader.php\");\n    YsJQueryAutoloader::register();\n</code></pre> <p>Con <code>Composer</code> y <code>autoload</code>:</p> <pre><code>&lt;?php\nrequire '../vendor/autoload.php';\nYsJQueryAutoloader::register();\n</code></pre> <p>Aseg\u00farate de que la ruta a la librer\u00eda y del <code>autoload</code> sea la correcta a t\u00fa configuraci\u00f3n.</p> <p>El c\u00f3digo anterior ejecuta un m\u00e9todo est\u00e1tico de la clase <code>YsJQueryAutoloader</code> que se encarga de incluir todos los ficheros necesarios para la librer\u00eda en el c\u00f3digo de tu p\u00e1gina.</p> <p>Para acceder a las capacidades de <code>jQuery4PHP</code>, deber\u00e1s utilizar en tu c\u00f3digo <code>PHP</code> la clase <code>YsJQuery</code>.</p> <p>La librer\u00eda <code>jQuery4PHP</code> se apoya completamente en el c\u00f3digo <code>JavaScript</code> de la librer\u00eda <code>jQuery</code>. Por tanto, al escribir el c\u00f3digo <code>HTML</code> de la p\u00e1gina deber\u00e1s asegurarte de que se incluye dicha librer\u00eda, poniendo una l\u00ednea como la siguiente:</p> <pre><code>&lt;head&gt;\n// Utilizamos la versi\u00f3n de jQuery disponible en las CDN de jQuery\n&lt;script src=\"https://code.jquery.com/jquery-3.5.0.min.js\"\n    integrity=\"sha256xNzN2a4ltkB44Mc/Jz3pT4iU1cmeR0FkXs4pru/JxaQ=\"\n    crossorigin=\"anonymous\"&gt;\n&lt;/script&gt;\n. . .\n&lt;/head&gt;\n</code></pre> <p>Asegurate de trabajar con la versi\u00f3n adecuada. Las puedes conultar en el enlace siguiente: <code>jQuery</code></p> <p>En la documentaci\u00f3n de la librer\u00eda, y en los ejemplos que vas a programar a continuaci\u00f3n, se utiliza una sintaxis peculiar de programaci\u00f3n propia de <code>PHP</code>. Por ejemplo, comprueba el siguiente c\u00f3digo:</p> <pre><code>&lt;?php\n    $jq = YsJQuery::newInstance();\n    $jq-&gt;onClick();\n    $jq-&gt;in('#enviar');\n    $jq-&gt;execute('alert(\"Has pulsado el bot\u00f3n.\")');\n    $jq-&gt;write();\n?&gt;\n</code></pre> <p>Como ves, se crea un nuevo objeto a partir del m\u00e9todo est\u00e1tico <code>newInstance</code>, y a continuaci\u00f3n se ejecutan ciertos m\u00e9todos implementados en la clase <code>YsJQuery</code>. Estos m\u00e9todos definen c\u00f3digo <code>JavaScript</code> asociado al evento <code>onClick</code> del bot\u00f3n con <code>id='enviar'</code>. El c\u00f3digo que se ejecutar\u00e1 cuando se pulse el bot\u00f3n se incluye dentro del m\u00e9todo <code>execute</code>, y muestra un mensaje en pantalla. El \u00faltimo m\u00e9todo (<code>write</code>) es el encargado de generar el c\u00f3digo <code>JavaScript</code> en la p\u00e1gina.</p> <p>Ese mismo c\u00f3digo se puede escribir de la forma siguiente, que es la que utilizaremos a continuaci\u00f3n.</p> <pre><code>&lt;?php\necho \n    YsJQuery::newInstance()\n      -&gt;onClick()\n      -&gt;in('#enviar')\n      -&gt;execute('alert(\"Has pulsado el bot\u00f3n.\")')\n?&gt;\n</code></pre> <p>F\u00edjate que no se asigna nombre al objeto que se crea, pues no es necesario nombrarlo si los m\u00e9todos se ejecutan justo a continuaci\u00f3n de su instanciaci\u00f3n. Adem\u00e1s, se ha sustituido la llamada al m\u00e9todo <code>write</code> por un comando <code>echo</code> al comienzo.</p>"},{"location":"prova.html#321-jquery4php-i","title":"3.2.1.- JQuery4PHP (I).","text":"<p>Captura de Firefox (Elaboraci\u00f3n propia)</p> <p>Para comenzar a ver la librer\u00eda, utilizaremos una versi\u00f3n simplificada del formulario de introducci\u00f3n de datos con el que has estado trabajando. El objetivo es el mismo, validar los datos introducidos por el usuario; pero en lugar de mostrar los errores de validaci\u00f3n integrados en la p\u00e1gina web, vas a emplear la funci\u00f3n <code>\"alert()\"</code> de <code>JavaScript</code>.</p> <p>La p\u00e1gina <code>\"login.php\"</code> es similar a la que has utilizado anteriormente, a\u00f1adi\u00e9ndole c\u00f3digo para:</p> <ul> <li> <p>Incluir y registrar la librer\u00eda:</p> <pre><code>require '../vendor/autoload.php';\nYsJQueryAutoloader::register();\n</code></pre> </li> <li> <p>Incluir tambi\u00e9n la librer\u00eda de <code>JavaScript: jQuery</code>:</p> <pre><code>&lt;script \n    src=\"https://code.jquery.com/jquery-3.5.0.min.js\" \n    integrity=\"sha256-xNzN2a4ltkB44Mc/Jz3pT4iU1cmeR0FkXs4pru/JxaQ=\"\n    crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n</code></pre> <p>Adem\u00e1s, hay que capturar el evento <code>onClick</code> del formulario, e indicarle que env\u00ede los datos del mismo a una p\u00e1gina <code>PHP</code> de validaci\u00f3n.</p> <pre><code>&lt;?php\necho\nYsJQuery::newInstance()\n    -&gt;onClick()\n    -&gt;in(\"#enviar\")\n    -&gt;execute(\n        YsJQuery::getJSON(\n            \"validar.php\",\n            YsJQuery::toArray()-&gt;in('#miForm input'),\n            new YsJsFunction('\n                    if(msg.errUsu) alert(msg.errUsu);\n                    if(msg.errPass) alert(msg.errPass);\n                    if(msg.errMail) alert(msg.errMail);', 'msg'\n            )\n        )\n    );\n?&gt;\n</code></pre> <p>En el c\u00f3digo anterior, primero se asocia al evento <code>onClick</code> del bot\u00f3n <code>enviar</code> al c\u00f3digo que se encuentra en la llamada a <code>execute</code>. Este c\u00f3digo llama al fichero <code>\"validar.php\"</code>, enviando como par\u00e1metros los datos del formulario (los que se han introducido en etiquetas de tipo <code>input</code>) convertidos a array y, una vez recibida la respuesta, ejecuta una funci\u00f3n <code>JavaScript</code>. En esta funci\u00f3n se usa la funci\u00f3n <code>alert</code> de <code>JavaScript</code> para mostrar los errores de validaci\u00f3n obtenidos.</p> <p>F\u00edjate que para comunicarse con el servidor, se utiliza el m\u00e9todo <code>getJSON</code>. Este m\u00e9todo utiliza la notaci\u00f3n <code>JSON</code> para transmitir la informaci\u00f3n con el servidor.</p> </li> </ul> <p>Acr\u00f3nimo de JavaScript Object Notation, \u00abnotaci\u00f3n de objeto de JavaScript\u00bb .Es un formato de texto sencillo para el intercambio de datos. Se trata de un subconjunto de la notaci\u00f3n literal de objetos de JavaScript, aunque, debido a su amplia adopci\u00f3n como alternativa a XML, se considera un formato independiente del lenguaje.</p>"},{"location":"prova.html#autoevaluacion","title":"Autoevaluaci\u00f3n","text":""},{"location":"prova.html#pregunta","title":"Pregunta","text":"<p>\u00bfCu\u00e1l es la funci\u00f3n del m\u00e9todo <code>write</code> de la clase <code>YsJQuery</code>?</p>"},{"location":"prova.html#respuestas","title":"Respuestas","text":"<p>Opci\u00f3n 1</p> <p>Generar el c\u00f3digo <code>JavaScript</code> necesario para que la p\u00e1gina lleve a cabo las funciones que se han definido.</p> <p>Opci\u00f3n 2</p> <p>Mostrar un texto en la p\u00e1gina web generada, de forma similar al <code>echo</code> o <code>print</code> de <code>PHP</code>.</p>"},{"location":"prova.html#retroalimentacion_1","title":"Retroalimentaci\u00f3n","text":"<p>Efectivamente. Recuerda que no es necesario llamar a este m\u00e9todo si empleas una construcci\u00f3n comenzando por <code>echo</code>, como en los ejemplos anteriores.</p> <p>Revisa lo que has aprendido sobre la librer\u00eda <code>jQuery4PHP</code>.</p>"},{"location":"prova.html#solucion","title":"Soluci\u00f3n","text":"<ol> <li>Opci\u00f3n correcta (Retroalimentaci\u00f3n)</li> <li>Incorrecto (Retroalimentaci\u00f3n)</li> </ol>"},{"location":"prova.html#322-jquery4php-ii","title":"3.2.2.- JQuery4PHP (II).","text":"<p>Al ejecutar la p\u00e1gina <code>PHP</code> que has programado, puedes observar que se genera el siguiente c\u00f3digo <code>JavaScript</code> en la misma cuando se env\u00eda al navegador:</p> <pre><code>&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n/* &lt;![CDATA[ */\n    jQuery('#enviar').click(function(){\n            jQuery.getJSON('validar.php',jQuery('#miForm input').toArray(),function(msg){\n            if(msg.errUsu) alert(msg.errUsu);\n            if(msg.errPass) alert(msg.errPass);\n            if(msg.errMail) alert(msg.errMail);\n            })\n    })             \n/* ]]&gt; */\n&lt;/script&gt;\n</code></pre> <p>Como ves, todo el c\u00f3digo creado utilizando la librer\u00eda <code>jQuery4PHP</code> se traduce en llamadas a la librer\u00eda <code>jQuery</code> de <code>JavaScript</code>.</p> <p>En la p\u00e1gina <code>PHP</code> de validaci\u00f3n, <code>\"validar.php\"</code>, puedes utilizar las mismas funciones de ejemplos anteriores y definir una nueva de nombre <code>validarFormulario</code>:</p> <pre><code>function validarFormulario($valores)\n{\n    $respuesta = array();\n    if (!validarNombre($valores['usu']))\n        $respuesta['errUsu'] = \"El nombre debe tener m\u00e1s de 3 caracteres.\";\n\n    if (!validarPasswords($valores['pass1'], $valores['pass2']))\n        $respuesta['errPass'] = \"La contrase\u00f1a debe ser mayor de 5 caracteres o no coinciden.\";\n\n    if (!validarEmail($valores['mail']))\n        $respuesta['errMail'] = \"La direcci\u00f3n de email no es v\u00e1lida.\";\n\n    return $respuesta;\n}\necho json_encode(validarFormulario($_REQUEST));\n</code></pre> <p></p> <p>Captura de Firefox (Elaboraci\u00f3n propia)</p> <p>Utilizaremos la funci\u00f3n <code>\"json_encode\"</code> de <code>PHP</code> para devolver los errores de validaci\u00f3n con notaci\u00f3n <code>JSON</code>. Revisa el c\u00f3digo obtenido y comprueba su funcionamiento.</p> <p>C\u00f3digo obtenido (zip - 0,32 MB)</p>"},{"location":"prova.html#323-jquery4php-iii","title":"3.2.3.- JQuery4PHP (III).","text":"<p>original image pixabay (CC0)</p> <p>Una de las caracter\u00edsticas que cabe destacar de <code>jQuery4PHP</code> es su extensibilidad. Existen varias extensiones que se integran con la librer\u00eda y permiten realizar de forma sencilla tareas adicionales a las que soporta el n\u00facleo de la misma.</p> <p>Por ejemplo, si en la p\u00e1gina anterior quisi\u00e9ramos integrar en etiquetas los mensajes de validaci\u00f3n, el c\u00f3digo necesario ser\u00eda m\u00e1s complejo. De hecho, ya has visto que para mostrar los mensajes de alerta has tenido que utilizar c\u00f3digo <code>JavaScript</code> mezclado con el c\u00f3digo PHP.</p> <p>Vamos a ver c\u00f3mo podemos utilizar la extensi\u00f3n: <code>\"JqValidate\"</code> para realizar de forma mucho m\u00e1s sencilla y eficaz la validaci\u00f3n del formulario anterior.</p> <ul> <li>Enlace a <code>jQuery Validation Plugin</code></li> <li><code>Enlace a Extensi\u00f3n JqValidate.</code></li> </ul> <p>Para poder usar esta extensi\u00f3n en tus p\u00e1ginas has de:</p> <ul> <li> <p>Indicar a la librer\u00eda <code>jQuery4PHP</code> que vas a usar la extensi\u00f3n:</p> <pre><code>YsJQuery::usePlugin(YsJQueryConstant::PLUGIN_JQVALIDATE);\n</code></pre> </li> <li> <p>Incluir el c\u00f3digo <code>JavaScript</code> necesario por la extensi\u00f3n, que en este caso concreto se corresponde con la extensi\u00f3n <code>\"Validate</code>\" de <code>jQuery</code>:</p> <pre><code>&lt;script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/jquery-validation@1.19.1/dist/jquery.validate.min.js\"&gt;&lt;/script&gt;\n</code></pre> </li> <li> <p>Cargar los mensajes de validaci\u00f3n en idioma espa\u00f1ol (de no hacerlo, se mostrar\u00e1n en ingl\u00e9s):</p> <pre><code>echo YsJQueryAssets::loadScripts('jq4php-showcase/showcase/jquery4php-assets/js/plugins/bassistance/validate/localization/messages_es.js')-&gt;execute();\n</code></pre> </li> </ul> <p>Como siempre, revisa las rutas y \u00faltimas versiones de las librer\u00edas del c\u00f3digo anterior para ajustarlas a las tuyas.</p>"},{"location":"prova.html#324-jquery4php-iv","title":"3.2.4.- JQuery4PHP (IV).","text":"<p>Jakub Jankiewicz (jcubic) (CC BY)</p> <p>Al utilizar la extensi\u00f3n <code>JqValidate</code> para validar los datos introducidos en un formulario, el c\u00f3digo de validaci\u00f3n que se usar\u00e1 utiliza la extensi\u00f3n <code>jQuery.Validate</code>. No ser\u00e1 necesario que programes los algoritmos de validaci\u00f3n, sino que indiques qu\u00e9 reglas se deber\u00e1n aplicar a cada uno de los campos del formulario. Esto se hace utilizando el m\u00e9todo <code>_rules</code>.</p> <p>Para indicar las reglas, se pasa como par\u00e1metro un array, que contendr\u00e1 tantos elementos como campos a validar. Para cada uno de estos campos se crea un nuevo array, que contendr\u00e1 las reglas de dicho campo. Cada una de las reglas se compone en base a los distintos m\u00e9todos de validaci\u00f3n que incorpora la extensi\u00f3n de JavaScript <code>jQuery.Validate</code>.</p> <p>M\u00e9todos de validaci\u00f3n</p> <p>El c\u00f3digo <code>PHP</code> necesario para validar nuestro formulario ser\u00e1:</p> <pre><code>&lt;?php\n    echo YsJQuery::newInstance()\n             -&gt;onClick()\n             -&gt;in(\"#enviar\")\n             -&gt;execute(\n                YsJQValidate::build()-&gt;in('#miForm')\n                    -&gt;_rules(\n                        [\n                            'usu' =&gt; ['required' =&gt; true, 'minlength' =&gt; 4],\n                            'mail' =&gt; ['required' =&gt; true, 'email' =&gt; true],\n                            'pass2' =&gt; ['required' =&gt; true, 'minlength' =&gt; 6, 'equalTo' =&gt; '#pass1']\n                        ]\n                    )\n            );\n?&gt;\n</code></pre> <p>F\u00edjate que la asociaci\u00f3n del c\u00f3digo con el evento <code>onClick</code> del bot\u00f3n se sigue haciendo como antes.</p> <p>Si revisas el c\u00f3digo <code>JavaScript</code> que se genera en la p\u00e1gina <code>HTML</code>, observar\u00e1s lo siguiente:</p> <pre><code>/* &lt;![CDATA[ */\n    jQuery('#enviar').click(function(){\n        jQuery('#miForm').validate(\n        {\"rules\": {\n                \"usu\": {\"required\": true,\"minlength\": 4},\n                \"mail\": {\"required\": true,\"email\": true},\n                \"pass1\": {\"required\": true,\"minlength\": 6,\"equalTo\": \"#pass2\"}\n                }\n        })})             \n/* ]]&gt; */\n</code></pre> <p>Como ves, todo se sigue traduciendo en llamadas a la librer\u00eda <code>jQuery</code> de <code>JavaScript</code>. Adem\u00e1s, una de las grandes ventajas de este m\u00e9todo es que una vez definidas las reglas de validaci\u00f3n en <code>PHP</code>, todo el c\u00f3digo que se ejecuta para verificarlas es <code>JavaScript</code>. Si el navegador soporta la ejecuci\u00f3n de c\u00f3digo en lenguaje <code>JavaScript</code>, no es necesario establecer ning\u00fan tipo de tr\u00e1fico de validaci\u00f3n con el servidor web.</p> <p>Revisa el c\u00f3digo obtenido y comprueba su funcionamiento. Solo est\u00e1 el fichero <code>\"login.php\"</code> se entiende que has instalado como en el ejemplo anterior las librer\u00edas necesarias, manualmente o con <code>Composer</code>.</p> <p>C\u00f3digo obtenido (zip - 1,72 KB)</p>"},{"location":"prova.html#autoevaluacion_1","title":"Autoevaluaci\u00f3n","text":""},{"location":"prova.html#pregunta_1","title":"Pregunta","text":"<p>Al emplear la extensi\u00f3n <code>JqValidate</code> de <code>jQuery4PHP</code>, \u00bfqu\u00e9 c\u00f3digo <code>JavaScript</code> deber\u00e1s incluir en tus p\u00e1ginas?</p>"},{"location":"prova.html#respuestas_1","title":"Respuestas","text":"<p>Opci\u00f3n 1</p> <p>El correspondiente a la librer\u00eda <code>jQuery</code> y a su extensi\u00f3n <code>Validate</code>.</p> <p>Opci\u00f3n 2</p> <p>\u00danicamente el correspondiente a la librer\u00eda <code>jQuery</code>.</p>"},{"location":"prova.html#retroalimentacion_2","title":"Retroalimentaci\u00f3n","text":"<p>Efectivamente. <code>JqValidate</code> utiliza en la parte cliente la extensi\u00f3n <code>Validate</code> de <code>jQuery</code>.</p> <p>Revisa lo que has aprendido sobre la librer\u00eda <code>jQuery4PHP</code>.</p>"},{"location":"prova.html#solucion_1","title":"Soluci\u00f3n","text":"<ol> <li>Opci\u00f3n correcta (Retroalimentaci\u00f3n)</li> <li>Incorrecto (Retroalimentaci\u00f3n)</li> </ol>"},{"location":"yyy7.1.Laravel_instalacio.html","title":"FRAMEWORK LARAVEL","text":""},{"location":"yyy7.1.Laravel_instalacio.html#installacio-laravelhomestead-en-entorns-de-desenvolupament","title":"Instal\u00b7laci\u00f3 laravel/homestead en entorns de desenvolupament","text":"<p>Homestead \u00e9s un entorn preparat, configurable que ens permet arrencar un entorn de desenvolupament complet r\u00e0pidament. Est\u00e0 disponible per a tots els sistemes per\u00f2 en windows hem de tenir en compte l'advert\u00e8ncia que ens fa la p\u00e0gina oficial:</p> <p>Si est\u00e0s utilitzant windows, pots necessitar habilitar virtualitzaci\u00f3 de maquinari (VT-x). Usualment pot estar habilitat via la vostra BIOS. Si est\u00e0s utilitzant Hyper-V damunt un sistema UEFI  a m\u00e9s pot necessitar desactivar Hyper-V en ordre d'accedir VT-x.</p> <p>L'instal.lacio la podeu consultar en la p\u00e0gina oficial de laravel.  Si tenim el VAGRANT instal.lat \u00e9s molt senzill fer-la c\u00f2rrer en el sistema de virtualitzaci\u00f3 que tenim al nostre equip. Si no, hem d'instalar-lo des de la p\u00e0gina oficial.  Una vegada instal\u00b7lat vagrant hem de seguir els seg\u00fcents pasos, des d'una terminal del sistema:</p> <pre><code>git clone https://github.com/laravel/homestead.git ~/Homestead  \ncd ~/Homestead  \n\n// Mac / Linux...\nbash init.sh\n\n// Windows...\ninit.bat\n</code></pre> <p>Ara hem de configurar el nostre equip per a sincronitzar-lo amb el homestead. Primer crearem un directori code on aniran el codi de les nostres apliacions web. Tindrem un directori per cada aplicaci\u00f3 web.    </p> <pre><code>cd  \nmkdir code  \n</code></pre>"},{"location":"yyy7.1.Laravel_instalacio.html#possada-en-funcionament-de-la-maquina-virtual","title":"Possada en funcionament de la m\u00e0quina virtual.","text":"<p>Abans d'arrancar la m\u00e0quina haurem de crear un  certificat d'usuari:</p> <pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre> <p>Per arrancar la m\u00e0quina virtual hem d'anar al directori Homestead i executar:   </p> <pre><code>cd Homestead\nvagrant up  \n</code></pre> <p>El que tardar\u00e0 un temps perqu\u00e8 s'ha de baixar la m\u00e0quina.</p> <p>I per connectar-se a una consola en la m\u00e0quina virtual <pre><code>vagrant ssh \n</code></pre></p> <p>I per apagar la m\u00e0quina </p> <pre><code>vagrant halt    \n</code></pre>"},{"location":"yyy7.1.Laravel_instalacio.html#base-de-dades","title":"Base de dades","text":"<p>El homestead incorpora el mysql en el port 33060 i el postgreSQL en el 54320.  El nom d'usuari i el password s\u00f3n homestead / secret per als dos.   </p> <p>Si volem instal.lar el phpmyadmin ho haurem de fer des de la consola de la m\u00e0quina virtual  </p> <pre><code>sudo apt-get update \nsudo apt-get install phpmyadmin \n</code></pre> <p>Despr\u00e9s haurem de crear un enlla\u00e7 s\u00edmbolic a un directori dins del directori code i crear un lloc web especific per accedir des del navegador   </p> <pre><code>sudo ln -s /usr/share/phpmyadmin/ /home/vagrant/code/phpmyadmin \nserve my.my /home/vagrant/code/phpmyadmin   \n</code></pre> <p>i afegir al /etc/host de la m\u00e0quina f\u00edsica el domini creat (ja est\u00e0 fet als ordinadors d'aula)</p> <pre><code>192.168.10.10   my.my\n</code></pre>"},{"location":"yyy7.1.Laravel_instalacio.html#installacio-de-valet-en-entorns-mac","title":"Instal.laci\u00f3 de Valet en entorns mac","text":"<p>Si tens un mac tamb\u00e9 pots probar amb esta opci\u00f3</p>"},{"location":"yyy7.1.Laravel_instalacio.html#installacio-amb-docker","title":"Instal.laci\u00f3 amb docker","text":"<p>Pode utilitzar tamb\u00e9 l'entorn docker amb Laradock.</p> <p>Si volen instal.lar soles un entorn de programaci\u00f3 els pasos serien els seg\u00fcents:</p> <ul> <li>En un directori (jo utilitzaria el del usuari)</li> </ul> <pre><code>git clone https://github.com/Laradock/laradock.git\n</code></pre> <ul> <li>Dins del directori laradock que haur\u00e0 creat</li> </ul> <pre><code>cp env-example .env\n</code></pre> <ul> <li>Descarregar els containers (tarda una estona)</li> </ul> <pre><code>docker-compose up -d nginx mysql phpmyadmin redis workspace \n</code></pre> <ul> <li>Ix del directori laradock i crea, descarrega un projecte. En el nostre cas ser\u00e0 (cadasc\u00fa amb el seu repositori)</li> </ul> <pre><code>git clone https://github.com/BatoiDawDWES2021/bloglaravel-nomUsuari.git\n</code></pre> <ul> <li>Entra en el directori laradock i modifica el .env per afegir el directori que has creat (est\u00e0 en la primera linea):</li> </ul> <pre><code>APP_CODE_PATH_HOST=../bloglaravel-nomUsuari/\n</code></pre> <ul> <li>Tamb\u00e9 marca que cal canviar en el .env per la base de dades.</li> </ul> <p>Update your project configuration to use the database host</p> <p>Open your PHP project\u2019s .env file or whichever configuration file you are reading from, and set the database host DB_HOST to mysql:</p> <p>DB_HOST=mysql You need to use the Laradock\u2019s default DB credentials which can be found in the .env file (ex: MYSQL_USER=). Or you can change them and rebuild the container.</p> <ul> <li>Posada en funcionament (a\u00e7\u00f2 \u00e9s el que caldr\u00e0 fer cada dia)</li> </ul> <pre><code>docker-compose up -d nginx mysql     \n</code></pre> <ul> <li>Entrar en la m\u00e0quina per a executar operacions</li> </ul> <pre><code>docker-compose exec workspace bash\n</code></pre> <ul> <li>Una vegada dins de la m\u00e0quina caldr\u00e0 executar el composer (soles quan caviem alguna cosa)</li> </ul> <pre><code>composer install\n</code></pre> <ul> <li>Despr\u00e9s podrem vore el nostre projecte funcionar amb </li> </ul> <p>http://localhost</p> <ul> <li>Mireu que no hi haja un altre servidor web funcionant al mateix temps</li> </ul>"},{"location":"zzz7.0.Laravel_crud.html","title":"FRAMEWORK LARAVEL","text":""},{"location":"zzz7.0.Laravel_crud.html#crud","title":"CRUD","text":""},{"location":"zzz7.0.Laravel_crud.html#index","title":"Index","text":"<p>Video</p>"},{"location":"zzz7.0.Laravel_crud.html#create","title":"Create","text":"<p>Video</p>"},{"location":"zzz7.0.Laravel_crud.html#show","title":"Show","text":"<p>Video</p>"},{"location":"zzz7.0.Laravel_crud.html#update-i-delete","title":"Update i Delete","text":"<p>Video</p>"},{"location":"zzz7.0.Laravel_crud.html#index_1","title":"Index","text":"<p>Video</p>"},{"location":"Antics/2.0.Activitat.html","title":"2.0.Activitat","text":""},{"location":"Antics/2.0.Activitat.html#activitat-1-introduccio","title":"Activitat 1. Introducci\u00f3","text":"<ul> <li>Escriu un programa (operacions.php) que accepte per queryString les variables $x i $y. Mostra per pantalla els valor de l'array $_GET, la suma, resta, multiplicaci\u00f3 i divisi\u00f3.</li> <li>Mostra el valor de l'array $_GET[]</li> <li>Fes un p\u00e0gina que diga 'bon dia','bona vesprada' o 'bona nit' depenent de la variable de hora del sistema </li> </ul> <p><pre><code>$hora = date(\"G\"); \n</code></pre> * A l'exercisi anterior afegis-li que mostre el dia de la setmana amb el format: 'Hui \u00e9s dilluns' (mira l'enlla\u00e7 https://www.php.net/manual/es/function.date.php per con\u00e8ixer les opcions per mostrar una data). * Mostra per pantalla una piramide feta amb asteriscs de base 9 * Mostra-la bu\u00efda. * Mostra-la invertida.</p>"},{"location":"Antics/2.1.Activitat.html","title":"2.1.Activitat","text":""},{"location":"Antics/2.1.Activitat.html#activitat-curs-accelerat-php","title":"Activitat Curs accelerat php.","text":"<ul> <li>cadenes.php i resol els seg\u00fcents exercicis:</li> <li>Mostra el valor d'un par\u00e0metre anomenat nom rebut per querystring eliminant els car\u00e0cters '/' del principi i el final si els hi haguera (funci\u00f3 trim). Si no es passa un par\u00e0metre nom s'utilitzar\u00e0 el teu nom de pila.</li> <li>Mostra la longitud del par\u00e0metre nom (funci\u00f3 strlen)</li> <li>Mostra el nom en maj\u00fascules (funci\u00f3 strtoupper)</li> <li>Mostra el nom en min\u00fascules (funci\u00f3 strtolower)</li> <li>Mostra el nom substituint les lletres \u2018o\u2019 pel n\u00famero zero (siga maj\u00fascula o min\u00fascula) (funci\u00f3 str_ireplace).</li> <li>Passa un segon par\u00e0metre per querystring anomenat prefix (per a passar m\u00e9s d'un par\u00e0metre per la querystring has de separar-los utilitzant el car\u00e0cter &amp;). Despr\u00e9s indica si el nom comen\u00e7a pel prefix passat o no (funci\u00f3 strpos), es distingir\u00e0 entre maj\u00fascules i min\u00fascules. Si no es passa el prefix no es realitzar\u00e0 aquesta operaci\u00f3.</li> <li>Mostra el nombre de vegades que apareix la lletra a (maj\u00fascula o min\u00fascula) en el par\u00e0metre nom (funcions substr_count + (strtoupper o strtolower)).</li> <li>Mostra la posici\u00f3 de la primera a existent en el nom (siga maj\u00fascula o min\u00fascula). Si no hi ha cap mostrar\u00e0 un text indicant-ho (funci\u00f3 stripos).</li> <li>La funci\u00f3 parse_url ens permet extraure diferents parts d'una url. A partir d'una variable que continga una url, per exemple: $url = 'http://username:password@hostname:9090/path?arg=value'; Utilitza la funci\u00f3 parse_url per a extraure i mostrar per pantalla les seg\u00fcents parts de la variable url de l'exemple:</li> <li>El querystring de la url (en l'exemple arg=value)</li> <li>El protocol utilitzat (en l'exemple http).</li> <li>El nom d'usuari (en l'exemple username).</li> <li>El path de la url (en l'exemple /path)</li> </ul> <p>Has de lliurar el fitxer cadenes.php</p>"},{"location":"Antics/2.2.Activitat.html","title":"2.2.Activitat","text":""},{"location":"Antics/2.2.Activitat.html#activitat-2-funcions-darrays","title":"Activitat 2. Funcions d'arrays","text":"<p>El llenguatge PHP disposa d'una gran quantitat de funcions de tractament d'arrays. No t\u00e9 massa sentit enumerar totes les funcions una a una, en lloc d'a\u00e7\u00f2 farem alguns exercicis.</p> <p>Crea un fitxer php anomenat arrays.php i resol els seg\u00fcents exercicis:</p> <ul> <li>Crea un array anomenat noms que continga diversos noms</li> <li>Mostra el nombre d'elements que t\u00e9 l'array (funci\u00f3 count)</li> <li>Crea una cadena que continga els noms existents en l'array separats per un espai i mostra-la (funci\u00f3 de strings implode)</li> <li>Mostra l'array ordenat alfab\u00e8ticament (funci\u00f3 asort)</li> <li>Mostra l'array en l'ordre invers al que es va crear (funci\u00f3 array_reverse)</li> <li>Mostra la posici\u00f3 que t\u00e9 el teu nom en l'array (funci\u00f3 array_search)</li> <li>Crea un array d'alumnes on cada element siga un altre array que continga el dni, nom i edat de l'alumne.</li> <li>Mostra per pantalla 10 paraules en angl\u00e9s i la seua traducci\u00f3. Les paraules han d'estar distribuides en dos columnes. Utilitza l'etiqueta \\. Les paraules i les traduccions estar\u00e0n en un array associatiu. <li>Crea una taula html en la qual es mostren totes les dades dels alumnes. </li> <li>Utilitza la funci\u00f3 array_column per a obtenir un array indexat que continga \u00fanicament els noms dels alumnes i mostra-ho per pantalla.</li> <li>Crea un array amb 10 numeros i utilitza la funci\u00f3 array_sum per a obtenir la suma dels 10.</li> <p>Has de lliurar el fitxer arrays.php</p>"},{"location":"Antics/2.3.Activitat.html","title":"2.3.Activitat","text":""},{"location":"Antics/2.3.Activitat.html#activitat-3-funcions","title":"Activitat 3. Funcions","text":"<p>Crea un fitxer php cridat myHelpers.php (que haur\u00e0s d'enviar en el lliurament) que guardar\u00e0s al directori Helpers i on estaran les funcions i un fitxer funcions.php al directori public i resol els seg\u00fcents exercicis (utilitza declaraci\u00f3 de tipus):</p> <ul> <li>Volem crear una funci\u00f3 anomenada insert que ens genere una sent\u00e8ncia insert into en sql. Per a a\u00e7\u00f2 la funci\u00f3 rebr\u00e0 dos par\u00e0metres: El nom de la taula i un array associatiu que contindr\u00e0 els noms i valors dels camps de la taula. La sent\u00e8ncia resultant tindr\u00e0 la seg\u00fcent forma:</li> <li>\"insert into nom_taula (noms camps separats per comes) values (valors separats per comes amb comilles)\". De moment no farem gens amb els valors dels camps. Ajuda: utilitza les funcions sprintf, implode i array_keys.</li> <li>Repeteix l'exercici anterior amb els seg\u00fcents canvis: La cadena resultant es passar\u00e0 per refer\u00e8ncia. Passarem la cadena de la seg\u00fcent forma:</li> <li> <p>\"insert into taula (camps) values (valors)\". Dins de la funci\u00f3 substituirem el seg\u00fcent: El text taula pel nom de la taula. El text camps pels noms dels camps separats per comes. El text valores pels valors separats per comes i amb comilles.</p> </li> <li> <p>Volem crear una funci\u00f3 que mostre el resultat d'una operaci\u00f3 amb dos operands.</p> </li> <li>Es mostrar\u00e0 per pantalla el primer operant, el s\u00edmbol de l'operaci\u00f3, el segon operant, el s\u00edmbol = i el resultat de l'operaci\u00f3. L'operaci\u00f3 podria ser: suma, resta, multiplicaci\u00f3, etc. Exemple d'eixida: 5 + 3 = 8</li> <li>La idea \u00e9s que la funci\u00f3 reba com a par\u00e0metre una funci\u00f3 que s'encarregue de realitzar l'operaci\u00f3, el s\u00edmbol a imprimir i els dos operands, de manera que puguem cridar diferents vegades a la mateixa funci\u00f3 canviant la funci\u00f3 an\u00f2nima i el s\u00edmbol per a diferents operacions.</li> </ul>"},{"location":"Antics/2.5.Activitat.html","title":"2.5.Activitat","text":""},{"location":"Antics/2.5.Activitat.html#activitat-25-recuperacio","title":"Activitat 2.5. Recuperaci\u00f3","text":"<ul> <li> <p>Desarrolla un script que muestre una cinta horizontal con degradado de color rojo (Desde negro rgb(0,0,0) hasta rojo(255,0,0) en saltos de 8. Cada color ha de ser un enlace al mismo script, que mostrar\u00e1 una tabla con el componente rojo seleccionando variando el color verde y el azul de forma similar a como se hizo con el rojo. Cada color de la tabla ser\u00e1 un enlace al mismo script, que mostrar\u00e1 un cuadro m\u00e1s grande con el color seleccionado. (2p)</p> <p>Por tanto: Si se ejecuta color.php sin par\u00e1metros, muestra la cinta de variaci\u00f3n del rojo Si se ejecuta color.php?r=120 muestra la cinta del rojo y una tabla variando el verde y el azul, con el rojo fijo a 120 Si se ejecuta color.php?r=120&amp;v=210&amp;a=90 se muestra la cinta, la tabla y un cuadrado relleno con color 120,210,90</p> </li> </ul> <pre><code>        &lt;style&gt;\n            .cuadro{width:20px;height:20px;float:left}\n            .cuadrosel{width:100px;height:50px;position:absolute;left:700px;top:20px;padding:5px}\n            .select{border:solid 2px}\n            .salto{clear:left}\n        &lt;/style&gt;\n</code></pre> <p></p> <ul> <li> <p>Desarrolla un script PHP de alta de usuarios en una web, que solicite: (2p)</p> <pre><code>nombre de usuario\nEdad\nemail\nSexo\nObservaciones\nContrase\u00f1a deseada (campo tipo password)\nUn checkbox de \"Acepto las condiciones .....\"\n</code></pre> <p>Al enviar los datos se validan, y si son correctos se muestra el mensaje \"Datos correctos. Usuario dado de alta\". Si no lo son, se muestra de nuevo el formulario con los valores introducidos para corregirlos y los mensajes de error. Las validaciones a hacer son: </p> <pre><code>El nombre de usuario es requerido\nLa edad es num\u00e9rica entre 1 y 100\nLa contrase\u00f1a ha de tener al menos 6 caracteres\u00a0\nEl email ha de ser correcto (vale con comprobar que lleva una @)\nSe ha marcado la casilla de aceptaci\u00f3n de condiciones\n</code></pre> </li> <li> <p>Desarrolla un script PHP que solicite: (2p)         * El importe bruto de una factura         * El % de IVA con un desplegable de los tipos vigentes         * El % de descuento a aplicar         * Si se aplica o no el recargo de equivalencia (con un checkbox)</p> <p>Al enviar los datos, muestra el c\u00e1lculo del total de la siguente forma:</p> <pre><code>Importe Bruto 1000,00 \n10% Dto -100,00 \n21% IVA 189,00\n4% Rec.Equiv 36,00\nTotal Factura 1125,00\n</code></pre> <p>Si una linea tiene importe 0 no debe mostrarse (no hay descuento, por ejemplo) Hay que validar :</p> <pre><code>El importe bruto es requerido y es n\u00famerico\nEl % de descuento, si lo hay, es num\u00e9rico entre 0 y 99\n</code></pre> </li> </ul>"},{"location":"Antics/3.1.Activitat.html","title":"3.1.Activitat","text":""},{"location":"Antics/3.1.Activitat.html#activitat-31-objectes","title":"Activitat 3.1. Objectes","text":"<ul> <li>Escriu una funci\u00f3 per a calcular el factorial d'un n\u00famero i utilitza una exempci\u00f3 amb la classe error si l'argument \u00e9s negatiu.</li> <li> <p>Utilitza les exempcions per capturar un error en el exercisi 2.4.4. Pot ser a l'hora de guardar el fitxer o alguna dada que no siga correcta.</p> </li> <li> <p>Crea una clase factura:</p> <ul> <li>Contants: IVA</li> <li>Atributs: Import Base, data, impostos, import total, estat(pagada o pendent)</li> <li>Metodes: Imprime. </li> </ul> </li> <li> <p>Confecciona una clase Menu. Permet afegir opcions al menu. Mostrar el men\u00fa de forma horitzontal o vertical (segons el m\u00e8tode al que cridem)</p> </li> <li> <p>Volem gestionar la venda d'entrades (no numerades) de Expocoches Campanetes que t\u00e9 zones, la sala principal amb 1000 entrades disponibles, la zona de compra-venda amb 200 entrades disponibles i la zona vip amb 25 entrades disponibles. Cal controlar que existeixen entrades abans de vendre-les. Defineix les classe Zona amb els seus atributs i m\u00e8todes corresponents i crea un programa que permeta vendre les entrades. En la pantalla principal ha d'apar\u00e9ixer informaci\u00f3 sobre les entrades disponibles i un formulari per a vendre entrades. Hem d'indicar per a quina zona volem les entrades i la quantitat d'elles. L\u00f2gicament, el programa ha de controlar que no es puguen vendre m\u00e9s entrades del compte.</p> </li> <li> <p>Exercisi Addicional Objectes</p> <ul> <li> <p>Anem a crear una s\u00e8rie de classes i interf\u00edcies per a generar camps de formulari que servisquen per a seleccionar un element d'entre una llista d'elements donats, \u00e9s a dir, per a generar elements de tipus select i r\u00e0dio. L'exercici ho realitzarem dins d'un directori anomenat activitat32.</p> </li> <li> <p>Per a generar un d'aquests camps necessitarem les seg\u00fcents dades:</p> <ul> <li>El t\u00edtol del camp, que posarem en un label abans del mateix.</li> <li>El nom del camp, que posarem en l'atribut name.</li> <li>Un array amb els valors dels elements i els textos que es mostraran. El array contindr\u00e0 els valors en les claus i els textos en els elements del array.</li> <li>Un sencer que indique quin \u00e9s l'element seleccionat per defecte.</li> </ul> </li> <li> <p>Crearem un interface anomenat ISelectorIndividual que tindr\u00e0 dos m\u00e8todes:</p> <ul> <li>Un constructor que reba tots aquests par\u00e0metres</li> <li>Un m\u00e8tode render que no rebr\u00e0 par\u00e0metres i que ens servir\u00e0 per a generar l'element de formulari en q\u00fcesti\u00f3.</li> </ul> </li> <li>Crearem una classe abstracta SelectorIndividual que implemente el interface anterior:<ul> <li>El constructor s'implementar\u00e0 en aquesta classe abstracta, per tant, contindr\u00e0 les dades membres per a emmagatzemar els par\u00e0metres del constructor.</li> <li>La funci\u00f3 render ser\u00e0 abstracta</li> </ul> </li> <li>Crearem dues classes SIRadioOpcion i SISelect que heretaran de la classe SelectorIndividual i implementaran la funci\u00f3 render, una per a generar la llista de r\u00e0dio botons i l'altra per a generar el select</li> <li> <p>Finalment, crearem un index.php que utilitze aquestes dues classes per a generar un formulari que continga els seg\u00fcents camps:</p> <ul> <li>Ciutat: desplegable que contindr\u00e0 els elements Alacant, Val\u00e8ncia i Castell\u00f3.</li> <li>Nivell idioma: desplegable que contindr\u00e0 els elements Alt, Mitj\u00e0 i Baix.</li> <li>Sexe: radio botons amb els elements Dona, Home</li> <li>Estat: Radio botons amb els elements enc\u00e8s i apagat.</li> </ul> </li> <li> <p>En pr\u00e9mer enviar en el formulari s'han de mostrar els valors seleccionats en els elements.</p> </li> </ul> </li> </ul> <p>Has de lliurar el directori objectes comprimit</p>"},{"location":"Antics/3.2.Activitat.html","title":"3.2.Activitat","text":""},{"location":"Antics/3.2.Activitat.html#activitat-2-sessions-i-seguretat","title":"Activitat 2. Sessions i seguretat","text":"<ul> <li>Escriu un programa que calcule la mitjana de una s\u00e8rie de numeros introdu\u00efts per tecla (formulari amb una sola casella). A priori el programa no sap quants n\u00fameros s'introduiran. L'usuari indicar\u00e0 que ha acabat quan pose un n\u00famero negatiu. Utilitza sessions.</li> <li>Establix un control d'acc\u00e8s mitjan\u00e7ant usuari i contrasenya per al problema anterior. L'aplicaci\u00f3 no ens deixar\u00e0 continuar fins que no iniciem sessi\u00f3. S'haur\u00e0 de mostrar l'usuari logejat a l'exercisi anterior.</li> <li> <p>Tria un dels dos:</p> <ul> <li> <p>Realitza un programa que trie a l'atzar 5 paraules d'un minidiccionari angl\u00e8s-valenci\u00e0. El programa demanar\u00e0 que l'usuari tecleje la traducci\u00f3 al valenci\u00e0 de cada una de les paraules (de una en una) i comprovar\u00e0 si s\u00f3n correctes. Al final el programa haur\u00e0 de mostrar cuantes respostes s\u00f3n v\u00e0lides i quantes err\u00f2nees. </p> </li> <li> <p>Crea una tenda on-line senzilla amb un cat\u00e0leg de productes (4 o 5) i un carret de la compra. De cada producte es deu con\u00e8ixer al meyns la descripci\u00f3, el preu i una imatge que els identifique. Al costat de cada producte del cat\u00e0leg haur\u00e0 d'aper\u00e8ixer un bot\u00f3 comprar que permetr\u00e0 afegir-lo al carret de la compra.  Per cada producte que est\u00e0 al carret, hi haur\u00e0 un bot\u00f3 eliminar per si l'usuari s'arrepentix i vol llevar-lo. </p> <ul> <li>Tindre la classe producte (__construct(), render())</li> <li>Tindre la classe carret (__construct(), afegirElement(), eliminarElement(), estaProducteEnElCarret()), BuidarCarret()</li> <li>No cal identificaci\u00f3 d'usuari</li> <li>Hi haura un bot\u00f3 per buidar el carret.</li> <li>No cal mostrar el carret.</li> </ul> </li> </ul> </li> </ul> <p></p> <ul> <li>Exercisi addcional<ul> <li>Fes que hi haja un opci\u00f3 per tal d'introdu\u00efr paraules al diccionari.</li> <li>Fes que d'un producte es puguen introdu\u00efr m\u00e9s d'un i fes una pantalla per a vore el carret.   </li> </ul> </li> </ul>"},{"location":"Antics/3.3.Activitat.html","title":"3.3.Activitat","text":""},{"location":"Antics/3.3.Activitat.html#activitat-33-acces-a-base-de-dades","title":"Activitat 3.3. Acc\u00e9s a base de dades","text":"<ol> <li> <p>Crearem una aplicaci\u00f3 que cont\u00e9 la l\u00f2gica t\u00edpica de treball amb aplicacions que requereixen validaci\u00f3: entrar en sessi\u00f3, executar l'aplicaci\u00f3 i eixir de sessi\u00f3. Inclourem tamb\u00e9 el registre d'usuaris. Utilitzarem acc\u00e9s a base de dades amb PDO</p> <p>a) LOGIN</p> <p>Per a la validaci\u00f3 d'usuari utilitzarem la taula usuaris de la base de dades de mostra test. La contrasenya emmagatzemada \u00e9s el resultat de la funci\u00f3 md5() de la contrasenya real. Crearem un script anomenat login.php, que s'encarrega de mostrar el formulari per a introduir usuari i contrasenya, i per a validar a l'usuari comprovant que existeix en el fitxer de claus i que la contrasenya \u00e9s correcta.</p> <p>Si l'usuari no \u00e9s correcte, es mostra un missatge d'error i es tornen a demanar les dades.</p> <p>Si l'usuari \u00e9s correcte, s'enlla\u00e7a autom\u00e0ticament amb el segon script: main.php, que seria l'encarregat d'executar l'aplicaci\u00f3 que desenvolupem:</p> <ul> <li>Si l'usuari no est\u00e0 validat, redirigeix a login.php</li> <li>Si ho est\u00e0, mostra el nom de l'usuari actiu, i un enlla\u00e7 per a eixir de sessi\u00f3, mitjan\u00e7ant logout.php</li> <li>Crearem un script,\u00a0logout.php, que s'encarrega de tancar la sessi\u00f3 i redirigir l'execuci\u00f3 a login.php</li> </ul> <p>b) REGISTRE D'USUARIS</p> <p>En la pantalla de login posarem un bot\u00f3 \"Registrar-se\" que em porta al script register.php.  Aquest mostra un formulari on se sol\u00b7liciten a l'usuari les seues dades (usuari,nom,email, contrasenya). S'ha de validar que siguen correctes i que no hi ha un altre usuari amb el mateix email o nom d'usuari. Si \u00e9s tot correcte, s'insereix en la base de dades i es torna a la pantalla de login. Si no \u00e9s correcte es mostra el formulari de nou amb els errors.</p> <p>c) RECORDAR CONTRASENYA</p> <p>En la pantalla de login afegim un bot\u00f3 : \"Recordar contrasenya\", que em porta al script \"remember.php\". Aquest sol\u00b7licita a l'usuari l'email, comprova que existeix com a usuari , li genera una contrasenya aleat\u00f2ria nova, modificant-la en la base de dades, i li envia un correu amb les dades de la seua nova manera d'accedir.</p> </li> <li> <p>Crea una aplicaci\u00f3 web que permeta fer llistat, alta, baixa i modificaci\u00f3 sobre la taula client de la base de dades test.</p> <ul> <li>Per a realitzar el llistat bastar\u00e0 un SELECT.</li> <li>L'alta es realitzar\u00e0 mitjan\u00e7ant un formulari on s'especificaran tots els camps del nou registre. Despr\u00e9s aqueixes dades s'enviaran a una p\u00e0gina que executar\u00e0 INSERT.</li> <li>Per a realitzar una baixa, es mostrar\u00e0 un bot\u00f3 que executar\u00e0 DELETE.</li> <li>La modificaci\u00f3 es realitza mitjan\u00e7ant UPDATE. En fer un alta, s'ha de comprovar que no existisca cap client amb el DNI introdu\u00eft en el formulari.</li> <li>L'opci\u00f3 d'esborrat ha de demanar confirmaci\u00f3.</li> <li>Quan es realitze la modificaci\u00f3 de les dades d'un client, els camps que no s'han canviat hauran de romandre inalterats en la base de dades.</li> </ul> </li> </ol> <p></p> <p>test.sql crud</p> <p>Exercisi Opcional</p> <ol> <li>Junta els dos exercicis anteriors en uno sol, de manera que al identificar-se es puga accedir a la pantalla per a vore els clients.</li> <li>Fes l'exercisi del clients utilitza la classe client, amb els m\u00e8todes:<ul> <li>static listAll()</li> <li>find($id)</li> <li>update($id,array $fields)</li> <li>create(array $fields)</li> <li>delete($id)   </li> </ul> </li> </ol>"},{"location":"Antics/3.4.Activitat.html","title":"3.4.Activitat","text":""},{"location":"Antics/3.4.Activitat.html#activitat-34-proves","title":"Activitat 3.4. Proves","text":"<ul> <li>Dissenya les seg\u00fcents proves per a la classe Menu que ja est\u00e0 feta en un exercisi anterior (canvia-la si \u00e9s necessari):<ul> <li>Que al introduir una opci\u00f3 en el menu, comprove que al mostrar el men\u00fa esta opci\u00f3 es mostre.</li> <li>Que al introduir l'opci\u00f3 anterior es comprova que l'enlla\u00e7 tamb\u00e9 estiga. </li> <li>Que quan es veu el men\u00fa de manera hortizontal no es veu de manera vertical i viceversa( hi haur\u00e0 una classe que els distingueix)</li> </ul> </li> <li>Dissenya proves per a la classe zona:<ul> <li>Que al introdu\u00efr m\u00e9s entrades de les disponibles es produ\u00efsca una exempci\u00f3.</li> <li>Que al vendre un nombre d'entrades determinat les entrades disponibles canvien correctament.</li> </ul> </li> <li>Fes un classe que passe els seg\u00fcents tests:</li> </ul> <pre><code>&lt;?php\n/**\n * Created by PhpStorm.\n * User: igomis\n * Date: 2019-10-17\n * Time: 22:59\n */\n\nrequire dirname(__FILE__) . \"/../vendor/autoload.php\";\n$whoops = new \\Whoops\\Run;\n$whoops-&gt;pushHandler(new \\Whoops\\Handler\\PrettyPageHandler);\n$whoops-&gt;register();\n\nuse Ejercicios\\Noticia;\nuse PHPUnit\\Framework\\TestCase;\n\n\nclass NoticiaTest extends TestCase\n{\n\n    public function test__construct()\n    {\n        $noticia = new Noticia('Texto Noticia','Fulano','fenix_2.jpg',1);\n        $this-&gt;assertStringContainsString('Texto Noticia',$noticia-&gt;getTexto());\n        $this-&gt;assertStringContainsString('Fulano',$noticia-&gt;getRedactor());\n        $this-&gt;assertStringContainsString('fenix_2.jpg',$noticia-&gt;getImg());\n        $this-&gt;assertEquals(200,$noticia-&gt;getWidthImg());\n        $this-&gt;assertEquals(200,$noticia-&gt;getHeightImg());\n        $this-&gt;assertEquals('urgent',$noticia-&gt;getPriority());\n\n        $noticia = new Noticia('Texto Noticia','Fulano',null,2);\n        $this-&gt;assertEquals(null,$noticia-&gt;getWidthImg());\n        $this-&gt;assertEquals('normal',$noticia-&gt;getPriority());\n\n        $noticia = new Noticia('Texto Noticia','Fulano','fenix_2.jpg',3,100,100);\n        $this-&gt;assertEquals(100,$noticia-&gt;getWidthImg());\n        $this-&gt;assertEquals('baixa',$noticia-&gt;getPriority());\n\n        $noticia = new Noticia('Texto Noticia','Fulano','fenix_2.jpg',4,100,100);\n        $this-&gt;assertEquals(100,$noticia-&gt;getHeightImg());\n        $this-&gt;assertEquals('arxiu',$noticia-&gt;getPriority());\n    }\n\n    public function testRender(){\n        $noticia = new Noticia('Texto Noticia','Fulano','fenix_2.jpg',1);\n        $salida = $noticia-&gt;render();\n        $this-&gt;assertStringContainsString(\"class='noticia urgent'\",$salida);\n        $this-&gt;assertStringContainsString(\"&lt;img src='images/fenix_2.jpg'\",$salida);\n        $this-&gt;assertStringContainsString(\"&lt;div class='firma'&gt;Fulano&lt;/div&gt;\",$salida);\n    }\n}\n</code></pre>"},{"location":"Antics/4.1.Activitat.html","title":"4.1.Activitat","text":""},{"location":"Antics/4.1.Activitat.html#activitat-41-completa-aplicacio","title":"Activitat 4.1 Completa aplicaci\u00f3","text":"<ul> <li> <p>Crea una classe shoppingCart que s'ocupe de totes les comandes. Crea les funcions necessaries per fer les operacions amb les comandes i canvia el programa per a que continue funcionant. Es suggereix que inclogues els m\u00e8todes per a gestionar l'afegir i llevar productes de la comanda, un m\u00e8tode per a processar la comanda i m\u00e8todes per a guardar i recuperar la comanda en les variables de sessi\u00f3.</p> </li> <li> <p>Possa exempcions a les consultes a la BD.</p> </li> <li> <p>Fes un manteniment de productes. O siga que es puguen afegir productes a la base de dades, dins de les categories. Este manteniment tan sol es podr\u00e0 accedir si l'usuari logejat \u00e9s l'usuari amb ID 1.</p> </li> </ul>"},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html","title":"Exemple d'aplicaci\u00f3 completa amb PHP","text":""},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html#definicio-del-projecte","title":"Definici\u00f3 del projecte","text":"<p>En l'an\u00e0lisi, es defineix la funcionalitat de l'aplicaci\u00f3 i les seues limitacions. S'indica les dades que es volen emmagatzemar i es realitze un esquema E/R per a la BBDD. Es definiran:</p> <ul> <li>Les pantalles que vor\u00e0 l'usuari</li> <li>El fitxers que formar\u00e0n l'aplicaci\u00f3 i com es pasaran els pr\u00e0metres entre ells.</li> <li>L'estructura de dades i com manipular-la.</li> <li>La base de dades.</li> </ul> <p>Finalment, en la implementaci\u00f3, s'escriuen el fitxers de l'aplicaci\u00f3. </p> <p>L'aplicaci\u00f3 ser\u00e0 la web de una distribuidora. Tindrem un magatzem central i tendes que fan comandes al magatzem.</p>"},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html#analisi-de-requeriments","title":"An\u00e0lisi de requeriments","text":"<p>Es requerix realitzar una aplicaci\u00f3 per al departament de comandes de la distribuidora d'una cadena de tendes xineses. Les tendes de la cadena utilitzaran l'aplicaci\u00f3 per realitzar comandes de productes. L'aplicaci\u00f3 ha de permetre: * Consultar les categories de productes. * Consultar els productes. * Afegir una o m\u00e9s unitats d'un producte a la comanda. * Consultar la comanda i eliminar productes. * Realitzar la comanda, actualitzan la base de dades i enviant correus de confirmaci\u00f3 a la tenda que fa la comanda i a la central.</p> <p>Per tal d'accedir a l'aplicaci\u00f3 cal autenticar-se.  De cada categoria es vol emmagatzemar el seu codi, nom, descripci\u00f3. Dels productes, el seu codi,nom, descripci\u00f3, quantitat en stock, la categoria a la que pertany,el preu i una imatge. Cada producte pertany a una categoria.</p> <p>De cada comanda interesa saber:</p> <ul> <li>La tenda que l'ha realitzat.</li> <li>Els productes que s'han demanat, incloent la quantitat.</li> <li>La data.</li> <li>El preu total</li> <li>Si s'ha rem\u00e9s.</li> </ul> <p>Les comandes s'introduiran a la base de dades com a no enviats i el departament de comandes les marcar\u00e0 com a envidades (l'aplicaci\u00f3 no s'encarrega d'aix\u00f2).</p> <p>De les tendes guardarem:</p> <ul> <li>El codi</li> <li>El correu electr\u00f2nic.</li> <li>La clau</li> <li>Pais, adre\u00e7a i codi postal.</li> </ul>"},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html#esquema-entitat-relacio","title":"Esquema Entitat Relaci\u00f3","text":""},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html#limitacions-de-laplicacio","title":"Limitacions de l'aplicaci\u00f3","text":"<ul> <li>No hi ha panel d'administraci\u00f3. Els usuaris, categories i productes s'han d'introduir directament a la BBDD</li> <li>No hi ha possibilitat d'autoregistre.</li> <li>No es control\u00b7la l'stock (de moment)</li> </ul>"},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html#disseny-de-laplicacio","title":"Disseny de l'aplicaci\u00f3","text":"<p>A partir de l'analisi anterior dissenyarem:</p> <ul> <li>La base de dades.</li> <li>El fluxe de pantalles per a realitzar una comanda.</li> <li>L'estructura de dades per a una comanda.</li> <li>Els fitxers de l'aplicaci\u00f3 i com es passen par\u00e0metres.</li> <li>El control d'acc\u00e9s.</li> </ul>"},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html#disseny-logic-de-la-bbdd","title":"Disseny l\u00f2gic de la BBDD","text":"<p>A partir de l'esquema anterior s'obtenen les seg\u00fcent taules:</p> <p>Base de dades Distribuidora</p> <p>Categories(id,name,description)</p> <p>Orders(id,date,send,idShop)</p> <p>OrderLines(idOrder,idProduct,amount)</p> <p>Products(id,name,description,stock,idCategory,price,image)</p> <p>Shops(id,email,password,adress,PostalCode,country)</p> <p>Per a passar al disseny f\u00edsic de la BBDD cal decidir els tipus de dades de les columnes. Aix\u00ed marcarem els correus com a unics i les claus com a autoincrementables. </p> <pre><code>--\n-- Base de dades: `Distribution`\n--\nCREATE DATABASE IF NOT EXISTS `Distribution` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\nUSE `Distribution`;\n\n-- --------------------------------------------------------\n\n--\n-- Estructura de la taula `Categories`\n--\n\nCREATE TABLE `Categories` (\n  `id` int(11) NOT NULL,\n  `name` varchar(45) DEFAULT NULL,\n  `description` varchar(45) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n--\n-- Bolcant dades de la taula `Categories`\n--\n\nINSERT INTO `Categories` (`id`, `name`, `description`) VALUES\n(1, 'Begudes', 'Tot tipus de begudes'),\n(2, 'Menjar', 'Productes comestibles'),\n(3, 'Bateries', 'Tot tipus de bateries'),\n(4, 'Joguets', 'Tot tipus de jogets');\n\n-- --------------------------------------------------------\n\n--\n-- Estructura de la taula `OrderLines`\n--\n\nCREATE TABLE `OrderLines` (\n  `idOrder` int(11) NOT NULL,\n  `idProduct` int(11) NOT NULL,\n  `amount` int(11) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- --------------------------------------------------------\n\n--\n-- Estructura de la taula `Orders`\n--\n\nCREATE TABLE `Orders` (\n  `id` int(11) NOT NULL,\n  `date` date DEFAULT NULL,\n  `send` binary(1) DEFAULT NULL,\n  `idShop` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- --------------------------------------------------------\n\n--\n-- Estructura de la taula `Products`\n--\n\nCREATE TABLE `Products` (\n  `id` int(11) NOT NULL,\n  `name` varchar(45) DEFAULT NULL,\n  `description` varchar(45) DEFAULT NULL,\n  `stock` int(11) DEFAULT NULL,\n  `idCategory` int(11) NOT NULL,\n  `price` float NOT NULL,\n  `image` varchar(60) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n--\n-- Bolcant dades de la taula `Products`\n--\n\nINSERT INTO `Products` (`id`, `name`, `description`, `stock`, `idCategory`, `price`, `image`) VALUES\n(3, 'rollito', 'Rollito de primavera', 99, 2, 6, ''),\n(4, 'aigua', 'Ampolla d\\'aigua', 1000, 1, 0.45, ''),\n(5, 'pistola', 'Pistola d\\'aigua', 200, 4, 3.5, ''),\n(6, 'cafe licor', '1L', 95, 1, 5.99, ''),\n(7, 'Pilas AAA', 'piles xicotetes', 1000, 3, 3.4, ''),\n(8, 'Quicos', 'Paquete 50gr', 1000, 2, 0.6, '');\n\n-- --------------------------------------------------------\n\n--\n-- Estructura de la taula `Shops`\n--\n\nCREATE TABLE `Shops` (\n  `id` int(11) NOT NULL,\n  `mailAdress` varchar(45) DEFAULT NULL,\n  `password` varchar(45) DEFAULT NULL,\n  `adress` varchar(90) DEFAULT NULL,\n  `postalCode` varchar(5) DEFAULT NULL,\n  `country` varchar(45) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n--\n-- Bolcant dades de la taula `Shops`\n--\n\nINSERT INTO `Shops` (`id`, `mailAdress`, `password`, `adress`, `postalCode`, `country`) VALUES\n(1, 'alcoi@tenda.es', '1234', 'Mossen Torregorsa, 2', '03802', 'Espanya'),\n(2, 'barcelona@tenda.es', '1234', 'Balmes,340', '46023', 'Catalunya');\n\n--\n-- Indexos per taules bolcades\n--\n\n--\n-- Index de la taula `Categories`\n--\nALTER TABLE `Categories`\n  ADD PRIMARY KEY (`id`);\n\n--\n-- Index de la taula `OrderLines`\n--\nALTER TABLE `OrderLines`\n  ADD PRIMARY KEY (`idOrder`,`idProduct`),\n  ADD KEY `fk_Comanda_has_Producte_Producte1_idx` (`idProduct`),\n  ADD KEY `fk_Comanda_has_Producte_Comanda1_idx` (`idOrder`);\n\n--\n-- Index de la taula `Orders`\n--\nALTER TABLE `Orders`\n  ADD PRIMARY KEY (`id`),\n  ADD KEY `fk_Comanda_Tenda1_idx` (`idShop`);\n\n--\n-- Index de la taula `Products`\n--\nALTER TABLE `Products`\n  ADD PRIMARY KEY (`id`,`idCategory`),\n  ADD KEY `fk_Producte_categoria1_idx` (`idCategory`);\n\n--\n-- Index de la taula `Shops`\n--\nALTER TABLE `Shops`\n  ADD PRIMARY KEY (`id`);\n\n--\n-- AUTO_INCREMENT per les taules bolcades\n--\n\n--\n-- AUTO_INCREMENT per la taula `Categories`\n--\nALTER TABLE `Categories`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;\n--\n-- AUTO_INCREMENT per la taula `Orders`\n--\nALTER TABLE `Orders`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;\n--\n-- AUTO_INCREMENT per la taula `Products`\n--\nALTER TABLE `Products`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;\n--\n-- AUTO_INCREMENT per la taula `Shops`\n--\nALTER TABLE `Shops`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;\n--\n-- Restriccions per taules bolcades\n--\n\n--\n-- Restriccions per la taula `OrderLines`\n--\nALTER TABLE `OrderLines`\n  ADD CONSTRAINT `fk_Comanda_has_Producte_Comanda1` FOREIGN KEY (`idOrder`) REFERENCES `Orders` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,\n  ADD CONSTRAINT `fk_Comanda_has_Producte_Producte1` FOREIGN KEY (`idProduct`) REFERENCES `Products` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;\n\n--\n-- Restriccions per la taula `Orders`\n--\nALTER TABLE `Orders`\n  ADD CONSTRAINT `fk_Comanda_Tenda1` FOREIGN KEY (`idShop`) REFERENCES `Shops` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;\n\n--\n-- Restriccions per la taula `Products`\n--\nALTER TABLE `Products`\n  ADD CONSTRAINT `fk_Producte_categoria1` FOREIGN KEY (`idCategory`) REFERENCES `Categories` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;\n</code></pre> <p>Partim tamb\u00e9 d'un fitxer distribuidora.css que s'inclou</p>"},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html#diagrama-de-fluxe-de-pantalles","title":"Diagrama de fluxe de pantalles","text":"<p>L'objectiu es representar les pantalles per les que pasa l'usuari al realitzar una operaci\u00f3. El seg\u00fcent diagrama pot ser una possible soluci\u00f3 a aquest cas:</p>"},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html#la-comanda-order","title":"La comanda (order)","text":"<p>L'estructura de dades utilitzada per a una comanda \u00e9s un dels punts m\u00e9s importants de l'aplicaci\u00f3. per a emmagatzemar-la utilitzarem una variable de sessi\u00f3.</p> <p>La comanda ser\u00e0 un array associatiatiu en els que les claus dels elements representen el codi del producte, y el valor, el n\u00famero de unitats demanades.</p> <p>L'array comen\u00e7a bu\u00efd. Quan s'afeguix un producte a la comanda, cal comprovar si ja hi ha en el array un element amb eixa clau. Si no l'afegueix. Si hi ha un element amb eixe codi, s'afegueixen les unitats al valor actual de l'element.</p> <p>De la mateixa manera, a l'eliminar productes de la comanda, cal cercar l'element corresponent i restar-li les unitats.</p>"},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html#control-dacces-login","title":"Control d'acc\u00e9s (login)","text":"<p>Quan es realitza un login amb \u00e8xit, es crea una nova sessi\u00f3 i dos variables de sessi\u00f3:</p> <ul> <li>Un array amb dos camps. <ul> <li>Un per a guardar el ID de la tenda i el seu correu.</li> <li>La variable per a la comanda.</li> </ul> </li> </ul> <p>La resta de fitxers de l'aplicaci\u00f3 comencen unint-se a la sessi\u00f3 i comprovant que la primera d'estes variables existeix. En cas contrari, no pot accedir i es redirigueix a la p\u00e0gina de login.</p>"},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html#fitxers-de-laplicacio","title":"Fitxers de l'aplicaci\u00f3","text":"<p>El seg\u00fcent pas es decidir que fitxers formar\u00e0n part de l'aplicaci\u00f3 i com es comuniquen entre si.</p> Ruta Descripci\u00f3 Par\u00e0metres Adre\u00e7ar-se a login.php Formulari de login $_GET['redirigit'] $_POST['usuari'] $_POST['clau'] categorias.php logoff.php Tanca la sessi\u00f3 login.php categories.php Mostra la llista de categories amb vincles a products.php?category=codigo products.php?category=codigo header.php cap\u00e7alera footer.php peu de pagina amb enlla\u00e7os products.php mostra els productes de la categoria, permet afegir a la comanda $_GET['category'] order.php mostra la comanda, permet llevar productes o confirmar-la processOrder.php Insereix la comanda en la BBDD, envia correus de confirmaci\u00f3 i mostra missatges d'exit o error deleteOrder.php Esborra la comanda categories.php bd.php classe per fer la connexio amb la BBDD mail.php classe per a enviar correus myHelpers.php fitxer amb funcions per fer consultes a la base de dades i relaciones amb les sessions"},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html#implementacio","title":"Implementaci\u00f3","text":""},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html#configuracio-del-lloc-web","title":"configuraci\u00f3 del lloc web","text":"<p>Una vegada completat el disseny de l'aplicaci\u00f3, es pot comen\u00e7ar en l'implementaci\u00f3.    Anem a crear un directori dins de Code que s'anomene Distribuidora.   Entre a la m\u00e0quina homestead i al directori /home/vagrant/Code/Distribuidora:</p> <ul> <li>Creem el lloc web al ngnix</li> </ul> <pre><code>serve distribuidora.my /home/vagrant/Code/Distribuidora/public\n</code></pre> <ul> <li>Ara instal.lem les depend\u00e8ncies que ens far\u00e0n falta mitjan\u00e7ant composer:</li> </ul> <pre><code>  composer require phpmailer/phpmailer\n  composer require --dev phpunit/phpunit\n  composer require filp/whoops\n</code></pre> <p>Anem a crear els seg\u00fcents directoris:</p> <ul> <li>class per a guardar les classes.</li> <li>public on aniran els fitxers de l'aplicatiu.</li> <li>public/css per a guardar els fitxers de css.</li> <li>public/img per guadar les imatges (cesta.png).</li> <li>Helpers on guardem els fitxers de funcions comunes.</li> <li>config on hi han fitxers de configuraci\u00f3</li> </ul> <p>Modifiquem el fitxer composer.json per a incloure el fitxer de funcions que s'anomenar\u00e0 myHelpers.php i estar\u00e0 dins de la carpeta Helpers. Aix\u00ec qualsevol funci\u00f3 que estiga dins d'eixe fitxer ser\u00e0 visible des de qualsevol fitxer que carregue el /vendor/autoload.php.    Al mateix temps farem que les classes penjen del namespace /App i que estiguen en el directori class i aix\u00ed poder importar-les on calguen.  Aix\u00ed afegim el seg\u00fcent codi:</p> <pre><code> \"autoload\": {\n       \"psr-4\":{\n           \"App\\\\\" : \"class/\"\n       },\n       \"files\": [\n           \"Helpers/myHelpers.php\"\n       ]\n   } \n</code></pre> <p>Partint del disseny anterior es van implementant tots els fitxers:</p> <p>config/database.php</p> <pre><code>&lt;?php\nreturn [\n    'ip' =&gt; '192.168.10.10',\n    'nom' =&gt; 'Distribution',\n    'usuari' =&gt; 'homestead',\n    'clau' =&gt; 'secret'\n];\n</code></pre> <p>config/load.php</p> <pre><code>&lt;?php\nrequire dirname(__FILE__) . \"/../vendor/autoload.php\";\n$whoops = new \\Whoops\\Run;\n$whoops-&gt;pushHandler(new \\Whoops\\Handler\\PrettyPageHandler);\n$whoops-&gt;register();\n</code></pre> <p>clases/bd.php  </p> <pre><code>&lt;?php\nnamespace App;\n\nclass bd extends \\PDO\n{\n\n    public function __construct()\n    {\n        $res = $this-&gt;leer_config();\n        try {\n            return parent::__construct($res[0], $res[1], $res[2]);\n        }catch (\\PDOException $e){\n            echo \"Error amb la connexi\u00f3 a la base de dades: \".$e-&gt;getMessage();\n            exit();\n        }\n\n    }\n\n    private function leer_config(){\n        $config = require '../config/database.php';\n        if (!$config){\n            throw new InvalidArgumentException(\"Revise fichero de configuraci\u00f3n\");\n        }\n        $resul = [];\n        $resul[] = sprintf(\"mysql:dbname=%s;host=%s\", $config['nom'], $config['ip']);\n        $resul[] = $config['usuari'];\n        $resul[] = $config['clau'];\n        return $resul;\n    }\n\n}\n</code></pre> <p>clases/mail.php</p> <pre><code>&lt;?php\n/**\n * Created by PhpStorm.\n * User: igomis\n * Date: 2019-07-17\n * Time: 18:50\n */\nnamespace App;\n\nuse PHPMailer\\PHPMailer\\PHPMailer;\n\nclass mail\n{\n    private $order;\n    private $id;\n    private $email;\n\n    /**\n     * mail constructor.\n     * @param $order\n     * @param $idShop\n     * @param $email\n     */\n    public function __construct($order, $id, $email)\n    {\n        $this-&gt;order = $order;\n        $this-&gt;id = $id;\n        $this-&gt;email = $email;\n    }\n\n\n    public function send(){\n        return $this-&gt;sendMails(\"$this-&gt;email, igomis@cipfpbatoi.es\", \"Pedido $this-&gt;id confirmado\");\n    }\n\n    private function doMsgHTML(){\n        $products = loadProducts(array_keys($this-&gt;order));\n        $text = \"&lt;h1&gt;Pedido n\u00ba $this-&gt;id &lt;/h1&gt;&lt;h2&gt;Restaurante: $this-&gt;email &lt;/h2&gt;\";\n        $text .= \"Detalle del pedido:\";\n        $text .= \"&lt;table&gt;\"; //abrir la tabla\n        $text .= \"&lt;tr&gt;&lt;th&gt;Id&lt;/th&gt;&lt;th&gt;Nom&lt;/th&gt;&lt;th&gt;Descripci\u00f3&lt;/th&gt;&lt;th&gt;Unitats&lt;/th&gt;&lt;/tr&gt;\";\n\n        foreach($products as $product)\n            $text .= \"&lt;tr&gt;&lt;td&gt;$product-&gt;id&lt;/td&gt;&lt;td&gt;$product-&gt;name&lt;/td&gt;&lt;td&gt;$product-&gt;description&lt;/td&gt;&lt;td&gt;\".$this-&gt;order[$product-&gt;id].\"&lt;/td&gt;&lt;td&gt;&lt;/tr&gt;\";\n\n        $text .= \"&lt;/table&gt;\";\n        return $text;\n    }\n\n    private function sendMails($emailsList,  $subject = \"\"){\n        $mail = new PHPMailer();\n        $mail-&gt;IsSMTP();\n        $mail-&gt;SMTPDebug  = 0;  // cambiar a 1 o 2 para ver errores\n        $mail-&gt;SMTPAuth   = true;\n        $mail-&gt;SMTPSecure = \"tls\";\n        $mail-&gt;Host       = \"smtp.gmail.com\";\n        $mail-&gt;Port       = 587;\n        $mail-&gt;Username   = \"cipfpbatoi2daw@gmail.com\";  //usuario de gmail\n        $mail-&gt;Password   = \"2dawDWES\"; //contrase\u00f1a de gmail\n        $mail-&gt;SetFrom('noreply@empresafalsa.com', 'Sistema de pedidos');\n        $mail-&gt;Subject    = $subject;\n        $mail-&gt;MsgHTML($this-&gt;doMsgHTML());\n\n        foreach(explode(\",\", $emailsList) as $email){\n            $mail-&gt;AddAddress($email, $email);\n        }\n        if(!$mail-&gt;Send()) {\n            return $mail-&gt;ErrorInfo;\n        } else {\n            return TRUE;\n        }\n    }\n}\n</code></pre> <p>Helpers/myHelpers.php</p> <pre><code>&lt;?php\n\n\nuse App\\bd;\n\nfunction checkLogin($email, $pass){\n    $bd = new bd();\n    $sth = $bd-&gt;prepare(\"SELECT id, mailAdress FROM Shops WHERE mailAdress LIKE :email AND password LIKE :pass\");\n    $resul = $sth-&gt;execute(['email' =&gt; $email,'pass' =&gt; $pass]);\n    if($resul){\n        return $sth-&gt;fetch(PDO::FETCH_OBJ);\n    }else{\n        return FALSE;\n    }\n}\nfunction loadCategories(){\n    $bd = new bd();\n    $sth = $bd-&gt;prepare(\"select * from Categories\");\n    $resul = $sth-&gt;execute();\n    if (!$resul) return [];\n    return $sth-&gt;fetchAll(PDO::FETCH_OBJ);\n}\nfunction loadCategory($id){\n    $bd = new bd();\n    $sth = $bd-&gt;prepare( \"select * from Categories where id = :id\");\n    $resul = $sth-&gt;execute(['id'=&gt;$id]);\n    if (!$resul) return [];\n    return $sth-&gt;fetch(PDO::FETCH_OBJ);\n}\nfunction loadProductsCategory($id){\n    $bd = new bd();\n    $sth= $bd-&gt;prepare(\"select * from Products where idCategory  = :id\");\n    $resul = $sth-&gt;execute(['id'=&gt;$id]);\n    if (!$resul) return [];\n    return $sth-&gt;fetchAll(PDO::FETCH_OBJ);\n}\n\n\n// recibe un array de c\u00f3digos de productos\n// devuelve un cursor con los datos de esos productos\nfunction loadProduct($id){\n    $bd = new bd();\n    $sth= $bd-&gt;prepare(\"select * from Products where id  = :id\");\n    $resul = $sth-&gt;execute(['id'=&gt;$id]);\n    if (!$resul) return [];\n    return $sth-&gt;fetch(PDO::FETCH_OBJ);\n}\n\n// recibe un array de c\u00f3digos de productos\n// devuelve un cursor con los datos de esos productos\nfunction loadProducts(Array $ids){\n    $bd = new bd();\n    $setProducts = implode(\",\", $ids);\n    $resul = $bd-&gt;query( \"select * from Products where id in($setProducts)\");\n    if (!$resul) return FALSE;\n    return $resul-&gt;fetchAll(PDO::FETCH_OBJ);\n}\n\nfunction addOrder($order, $idShop){\n    $bd = new bd();\n    $bd-&gt;beginTransaction();    \n\n    $sth = $bd-&gt;prepare(\"insert into Orders(date, send, idShop) values (:hora,:send,:idShop)\");\n    $resul = $sth-&gt;execute(['hora'=&gt;date(\"Y-m-d H:i:s\", time()),'send'=&gt;0,'idShop'=&gt;$idShop]);\n\n    if (!$resul) return FALSE;\n\n    // coger el id del nuevo pedido para las filas detalle\n    $idOrder = $bd-&gt;lastInsertId();\n    // insertar las filas en pedidoproductos\n\n    foreach($order as $id=&gt;$amount){\n        $sth =  $bd-&gt;prepare(\"insert into OrderLines(idOrder, idProduct, amount) values( :idOrder, :idProduct, :amount)\");\n        $resul = $sth-&gt;execute(['idOrder'=&gt;$idOrder,'idProduct'=&gt;$id,'amount'=&gt;$amount]);\n        if (!$resul) {\n            $bd-&gt;rollback();\n            return FALSE;\n        }\n    }\n    $bd-&gt;commit();\n    return $idOrder;\n}\n\nfunction checkSession(){\n    session_start();\n    if(!isset($_SESSION['user'])){\n        header(\"Location: login.php?redirigido=true\");\n        exit();\n    }\n\n}\n\nfunction dd($var){\n    var_dump($var);\n    exit();\n}\n</code></pre> <p>public/login.php</p> <pre><code>&lt;?php\nrequire dirname(__FILE__) . \"/../config/load.php\";\n\n\n/*formulario de login habitual\nsi va bien abre sesi\u00f3n, guarda el nombre de usuario y redirige a principal.php \nsi va mal, mensaje de error */\n\nif(isset($_GET[\"redirigido\"])) $error = 'Haga login para continuar';\nelse $error = '';\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {  \n\n    $usu = checkLogin($_POST['usuario'], $_POST['clave']);\n\n    if($usu===false){\n        $error = 'Revise usuario y contrase\u00f1a';\n        $usuario = $_POST['user'];\n    }else{\n        session_start();\n        // $usu tiene campos correo y codRes, correo \n        $_SESSION['user'] = $usu;\n        $_SESSION['order'] = [];\n        header(\"Location: categories.php\");\n        return;\n    }   \n}\n?&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Formulario de login&lt;/title&gt;\n        &lt;meta charset = \"UTF-8\"&gt;\n        &lt;link href=\"/css/distribuidora.css\" rel=\"stylesheet\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;div id='login'&gt;\n        &lt;form action = \"&lt;?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]);?&gt;\" method = \"POST\"&gt;\n            &lt;fieldset&gt;\n                &lt;legend&gt;Login&lt;/legend&gt;\n                &lt;div&gt;\n                    &lt;span class='error'&gt;&lt;?= $error ?&gt;&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div class='campo'&gt;\n                    &lt;label for = \"usuario\"&gt;Usuari&lt;/label&gt;\n                    &lt;input value = \"&lt;?php if(isset($usuario))echo $usuario;?&gt;\" id = \"usuario\" name = \"usuario\" type = \"text\" maxlength=\"50\" /&gt;\n                &lt;/div&gt;\n                &lt;div class='campo'&gt;\n                    &lt;label for = \"clave\"&gt;Clau&lt;/label&gt;\n                    &lt;input id = \"clave\" name = \"clave\" type = \"password\"  maxlength=\"50\" /&gt;\n                &lt;/div&gt;\n                &lt;div class='campo' style='text-align: center'&gt;\n                    &lt;input type = \"submit\" class=\"boton\" name=\"enviar\" value=\"enviar\"&gt;\n                &lt;/div&gt;\n            &lt;/fieldset&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n&lt;body&gt;\n</code></pre> <p>public/logoff.php</p> <pre><code>&lt;?php\n    require dirname(__FILE__) . \"/../config/load.php\";\n    session_start();\n    $_SESSION = array();\n    session_destroy();  // eliminar la sesion\n    setcookie(session_name(), 123, time() - 1000); // eliminar la cookie\n    header(\"Location: login.php\");\n</code></pre> <p>public/header.php</p> <pre><code>&lt;?php\nrequire dirname(__FILE__) . \"/../config/load.php\";\ncheckSession();\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"&gt;\n        &lt;title&gt;Tarea 5: Listado de Productos con Plantillas&lt;/title&gt;\n        &lt;link href=\"/css/distribuidora.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n    &lt;/head&gt;\n    &lt;body class=\"pagproductos\"&gt;\n        &lt;div id=\"contenedor\"&gt;``` \n\npublic/footer.php\n\n```php \n            &lt;br class=\"divisor\" /&gt;\n            &lt;div id=\"pie\"&gt;\n                &lt;form action='categories.php' method='post'&gt;\n                    &lt;!-- Bot\u00f3n del mismo tipo que los dem\u00e1s --&gt;\n                    &lt;input type='submit' name='categories' class='boton' style='width:100%;' value='Tornar Categories' ?&gt;\n                &lt;/form&gt;\n                &lt;form action='logoff.php' method='post'&gt;\n                    &lt;!-- Bot\u00f3n del mismo tipo que los dem\u00e1s --&gt;\n                    &lt;input type='submit' name='desconectar' class='boton' style='width:100%;' value='Desconectar usuario &lt;?= $_SESSION['user']-&gt;mailAdress ?&gt;'/&gt;\n                &lt;/form&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>public/categories.php</p> <pre><code>&lt;?php require 'header.php';?&gt;\n&lt;div id=\"encabezado\"&gt;\n    &lt;h1&gt;Llistat de categories&lt;/h1&gt;\n&lt;/div&gt;\n&lt;?php\n    $categorias = loadCategories();\n    foreach($categorias as $cat){\n?&gt;\n     &lt;p&gt;&lt;a href='products.php?category=&lt;?= $cat-&gt;id ?&gt;'&gt;&lt;?= $cat-&gt;name ?&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;?php };\n    require 'footer.php'; ?&gt;\n</code></pre> <p>public/products.php</p> <p><pre><code>&lt;?php\n    require 'header.php';\n    $cat = loadCategory($_GET['category']);\n    $products = loadProductsCategory($_GET['category']);\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\"){\n        $id = $_POST['id'];\n        if(isset($_SESSION['order'][$id])){\n            $_SESSION['order'][$id] += (int)$_POST['amount'];\n        }else{\n            $_SESSION['order'][$id] = (int)$_POST['amount'];\n        }\n    }\n?&gt;\n    &lt;div id=\"encabezado\"&gt;\n        &lt;h1&gt;Productes categoria &lt;?= $cat-&gt;name ?&gt;&lt;/h1&gt;\n    &lt;/div&gt;\n    &lt;div id=\"cesta\" style=\"text-align:center\"&gt;\n        &lt;?php require_once \"order.php\" ?&gt;\n    &lt;/div&gt;\n    &lt;div id=\"productos\"&gt;\n        &lt;?php foreach($products as $product){ ?&gt;\n        &lt;p&gt;\n        &lt;form id='&lt;?= $product-&gt;id ?&gt;'  method='post'&gt;\n            &lt;label&gt;&lt;?= $product-&gt;name ?&gt; - &lt;?= $product-&gt;description  ?&gt;(&lt;?= $product-&gt;stock ?&gt;)&lt;/label&gt;\n            &lt;input name = 'id' type='hidden' value = '&lt;?= $product-&gt;id ?&gt;'&gt;\n            &lt;input name = 'amount' type='number' min = '1' value = '1'&gt;\n            &lt;input type = 'submit' value='Comprar'&gt;\n        &lt;/form&gt;\n        &lt;/p&gt;\n        &lt;?php }; ?&gt;\n    &lt;/div&gt;\n&lt;?php require 'footer.php'; ?&gt;\n</code></pre> public/order.php</p> <pre><code>&lt;h3&gt;&lt;img src='img/cesta.png' alt='Cesta' width='24' height='21'&gt;Comanda&lt;/h3&gt;\n&lt;hr /&gt;\n&lt;?php if (empty($_SESSION['order'])) echo \"&lt;p&gt;Bu\u00efda&lt;/p&gt;\";\n      else {\n          foreach($_SESSION['order'] as $key =&gt; $amount) {\n              $product = loadProduct($key);\n              echo \"&lt;p&gt; $product-&gt;name - $amount &lt;/p&gt;\";\n\n          }    ?&gt;\n              &lt;form id='vaciar' action='deleteOrder.php' method='post'&gt;\n                  &lt;input type='submit' name='empty' class='boton' value='Buidar'  /&gt;\n              &lt;/form&gt;\n              &lt;form id='comprar' action='processOrder.php' method='post'&gt;\n                  &lt;input type='submit' name='buy' class='boton' value='Processar'  /&gt;\n              &lt;/form&gt;\n&lt;?php } ?&gt;\n</code></pre> <p>public/deleteOrder.php</p> <pre><code>&lt;?php\nrequire dirname(__FILE__) . \"/../config/load.php\";\ncheckSession();\nif (isset($_POST['empty']))\n    unset($_SESSION['order']);\nheader(\"Location: categories.php\");\n</code></pre> <p>public/processOrder.php</p> <pre><code>&lt;?php\nuse App\\mail;\nrequire 'header.php';\n\n$error = '';\n$idOrder = addOrder($_SESSION['order'], $_SESSION['user']-&gt;id);\nif($idOrder === FALSE) $error = \"No s'ha pogut realitzar la comanda\";\nelse{\n\n    $mail = new mail($_SESSION['order'], $idOrder, $_SESSION['user']-&gt;mailAdress);\n    $resul =$mail-&gt;send();\n    if($resul !==TRUE) $error = \"Error al enviar correu a \". $_SESSION['user']-&gt;mailAdress;\n    $_SESSION['order'] = [];\n}\n?&gt;\n&lt;div id=\"encabezado\"&gt;\n    &lt;h1&gt;Processant Comanda &lt;?= $_SESSION['user']-&gt;id ?&gt;&lt;/h1&gt;\n    &lt;p&gt;&lt;?= empty($error)?'Comanda Processada amb \u00e8xit':$error; ?&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;?php require 'footer.php';?&gt;\n</code></pre> <p>Ha arribat el moment de completar la web amb uns exericisis: Exercisi 4.1 Aplicaci\u00f3</p> <p>Amb tot a\u00e7\u00f3 tendriem una primera versi\u00f3 de la web. Per\u00f2 tenim algunes defici\u00e8ncies importants:</p> <ul> <li>Hi ha codi html barrejat amb php. Soluci\u00f3 : crear vistes.</li> <li>Les funcions sql per consultar a la base de dades comencen a ser importants. Si afeguirem un manteniment de tendes, la cosa aniria a mes. Soluci\u00f3: separar la capa de la base de dades</li> </ul>"},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html#plantilles-per-a-vistes","title":"Plantilles per a vistes","text":"<p>Per a solucionar el problema de les vistes, podem instal.lar algun aplicatiu que fa\u00e7a de motor de plantilles. Este ens permetr\u00e0 separar el que \u00e9s el codi html del php, agrupant parts comunes i permetent que criden a la plantilla com si de una funci\u00f3 es tractes des de qualsevol lloc del nostre codi php. Aix\u00ed mateix les plantilles podran, a banda de mostrar el html, executar xicotetes parts de codi per visualitzar els resultats calculats abans. Motor de plantilles tenim entre altes swing,smarty,blade. Nosaltres anem a instal\u00b7lar el blade, que \u00e9s el que gasta laravel.</p> <pre><code>composer require jenssegers/blade\n</code></pre> <p>Afegim al config load el necessari per tal que funcionen les vistes:</p> <pre><code>use Jenssegers\\Blade\\Blade;\n$blade = new Blade('../views','../cache');\n</code></pre> <p>Creem els directoris views, on enmagatzenarem les vistes, i cache, cache per a les vistes creades.</p> <p>Ara hem d'anar extraient el codi html dels nostres fitxers php i possant-lo en la carpeta views.  Comen\u00e7arem pel login.php, que \u00e9s una p\u00e0gina independent a la resta. Dins de la carpeta views crearem un fitxer login.blade.php i posarem el codi html de l'anterior.</p> <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Formulario de login&lt;/title&gt;\n    &lt;meta charset = \"UTF-8\"&gt;\n    &lt;link href=\"/css/distribuidora.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id='login'&gt;\n    &lt;form action = \"{ { htmlspecialchars($_SERVER[\"PHP_SELF\"]) }}\" method = \"POST\"&gt;\n        &lt;fieldset&gt;\n            &lt;legend&gt;Login&lt;/legend&gt;\n            &lt;div&gt;\n                &lt;span class='error'&gt;{ { $error }}&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class='campo'&gt;\n                &lt;label for = \"usuario\"&gt;Usuari&lt;/label&gt;\n                &lt;input value = \"{ { $usuario }}\" id = \"usuario\" name = \"usuario\" type = \"text\" maxlength=\"50\" /&gt;\n            &lt;/div&gt;\n            &lt;div class='campo'&gt;\n                &lt;label for = \"clave\"&gt;Clau&lt;/label&gt;\n                &lt;input id = \"clave\" name = \"clave\" type = \"password\"  maxlength=\"50\" /&gt;\n            &lt;/div&gt;\n            &lt;div class='campo' style='text-align: center'&gt;\n                &lt;input type = \"submit\" class=\"boton\" name=\"enviar\" value=\"enviar\"&gt;\n            &lt;/div&gt;\n        &lt;/fieldset&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;body&gt;\n</code></pre> Com podeu vore hem substituit els echo de php per la doble clau, que en blade t\u00e9 la mateixa funci\u00f3 </p> <pre><code> &lt;span class='error'&gt;{ { $error }}&lt;/span&gt;\n</code></pre> <p>I ara anem a vore com queda el login.php</p> <p><pre><code>&lt;?php\nrequire dirname(__FILE__) . \"/../config/load.php\";\n\nif(isset($_GET[\"redirigido\"])) $error = 'Haga login para continuar';\nelse $error = '';\n$usuario = '';\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {  \n\n    $usu = checkLogin($_POST['usuario'], $_POST['clave']);\n\n    if($usu===false){\n        $error = 'Revise usuario y contrase\u00f1a';\n        $usuario = $_POST['usuario'];\n    }else{\n        session_start();\n        // $usu tiene campos correo y codRes, correo \n        $_SESSION['user'] = $usu;\n        $_SESSION['order'] = [];\n        header(\"Location: categories.php\");\n        return;\n    }   \n}\necho $blade-&gt;render('login',compact('usuario','error'));\n</code></pre> Com veieu queda igual per\u00f2 hi ha una cridada a la funci\u00f3 render de blade on pasem el nombre la vista(login) sense especificar l'extensi\u00f3 (ha d'estar en la carpeta views) i les variables que anem a utiltizar en la vista(usuario,error) i ho fem amb la funci\u00f3 de php compact que empaqueta en un array associatiu les variables entre cometes. Ara ha quedat separat el codi php del html completament i un dissenyador es podr\u00e0 ocupar de la presentaci\u00f3 sense por a tocar el codi de programaci\u00f3.</p> <p>Hem de decidir que fem amb les dos l\u00ednees que codi php al principi de la cap\u00e7alera</p> <pre><code>&lt;?php\nrequire dirname(__FILE__) . \"/../config/load.php\";\ncheckSession();\n?&gt;\n</code></pre> <p>La primera l'haurem de possar als fitxers i la segona la podriem possar al load per\u00f2 ham de tenir en compte que a la p\u00e0gina de login no s'ha d'estar loguejat per accedir-hi i tamb\u00e9 carrega el load. Aix\u00ed el load podria quedar:</p> <pre><code> &lt;?php\nuse Jenssegers\\Blade\\Blade;\nrequire dirname(__FILE__) . \"/../vendor/autoload.php\";\n$whoops = new \\Whoops\\Run;\n$whoops-&gt;pushHandler(new \\Whoops\\Handler\\PrettyPageHandler);\n$whoops-&gt;register();\n$blade = new Blade('../views','../cache');\nif ($_SERVER['PHP_SELF']!='/login.php') {\n    checkSession();\n}\n</code></pre> <p>Per a la resta de les p\u00e0gines crearem una plantilla amb les parts comunes a totes les p\u00e0gines como s\u00f3n la cap\u00e7alera i el footer.Copiem el codi html de la cap\u00e7alera i el peu a un fitxer que anomenaren main.blade.php i que ficarem dins d'una carpeta anomenada layout dins de views.Estos dos fitxers els podrem esborrar perqu\u00e8 ja no els utilitzarem.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"&gt;\n    &lt;title&gt;Tarea 5: Listado de Productos con Plantillas&lt;/title&gt;\n    &lt;link href=\"/css/distribuidora.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n&lt;/head&gt;\n&lt;body class=\"pagproductos\"&gt;\n    &lt;div id=\"contenedor\"&gt;\n        &lt;div id=\"encabezado\"&gt;\n            &lt;h1&gt;{ { $titleView }}&lt;/h1&gt;\n        &lt;/div&gt;\n        @yield('body')\n        &lt;br class=\"divisor\" /&gt;\n        &lt;div id=\"pie\"&gt;\n            @if ($_SESSION['user']-&gt;id == '1')\n                &lt;form action='addProduct.php' method='post'&gt;\n                    &lt;!-- Bot\u00f3n del mismo tipo que los dem\u00e1s --&gt;\n                    &lt;input type='submit' name='categories' class='boton' style='width:100%;' value='Afegir Producte'&gt;\n                &lt;/form&gt;\n            @endif\n            &lt;form action='categories.php' method='post'&gt;\n                &lt;!-- Bot\u00f3n del mismo tipo que los dem\u00e1s --&gt;\n                &lt;input type='submit' name='categories' class='boton' style='width:100%;' value='Tornar Categories'&gt;\n            &lt;/form&gt;\n            &lt;form action='logoff.php' method='post'&gt;\n                &lt;!-- Bot\u00f3n del mismo tipo que los dem\u00e1s --&gt;\n                &lt;input type='submit' name='desconectar' class='boton' style='width:100%;' value='Desconectar usuario { { $_SESSION['user']-&gt;mailAdress }}'/&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Com veieu per al title de la p\u00e0gina utilitzem una variable $titleView que haurem de passar en totes les cridades a la vista i utilitzem un yield de nom body que es com dir que all\u00ed possarem el codi que \u00e9s propi de cada p\u00e0gina que implemente esta plantilla. Podem tindre tants yields com calguen.</p> <p>Comencen per categories.php. Extraiem el codi html en view/categories.blade.php</p> <p><pre><code>@extends('layouts.main');\n@section('body')\n    &lt;div&gt;\n        @foreach ($categorias as $cat)\n            &lt;p&gt;&lt;a href='products.php?category={ {$cat-&gt;id}}'&gt;{ {$cat-&gt;name}}&lt;/a&gt;&lt;/p&gt;\n        @endforeach\n    &lt;/div&gt;\n@endsection\n</code></pre> Com veiu tenim una directiva @extends per a indicar que la vista \u00e9s una extensi\u00f3 del layout main que ja hem instanciat.</p> <p>I tamb\u00e9 tenim una directiva @section de nom body que ve s'incrustar\u00e0 en el @yield del mateix nom del layout main.</p> <p>Tamb\u00e9 tenim una directiva @foreach que ve a ser el foreach de php per\u00f2 en format blade.</p> <p>I hem de tenir clar que quan cridem a la vista li hauriem de passar la variable $categorias.</p> <p>Aix\u00ed el fitxer categories.php quedaria</p> <p><pre><code>&lt;?php\n    use App\\shoppingCart;\n    require '../config/load.php';\n    $categorias = loadCategories();\n    $titleView = \"Llistat de categories\";\n    echo $blade-&gt;render('categories',compact('categorias','titleView'));\n</code></pre> que \u00fanicament carrega les variables para la vista.</p> <p>Un poc m\u00e9s complicat \u00e9s el fitxer products.php que inclou order.php Separem de nou el codi html per crear view/products.php</p> <p><pre><code>@extends('layouts.main');\n@section('body')\n    &lt;div id=\"cesta\" style=\"text-align:center\"&gt;\n        @include('order')\n    &lt;/div&gt;\n    &lt;div id=\"productos\"&gt;\n        &lt;table class=\"table table-striped table-hover\"&gt;\n            &lt;tr&gt;&lt;th&gt;Nombre&lt;/th&gt;&lt;th&gt;Descripci\u00f3n&lt;/th&gt;&lt;th&gt;Stock&lt;/th&gt;&lt;th&gt;Comprar&lt;/th&gt;&lt;/tr&gt;\n            @foreach ($products as $product)\n            &lt;tr&gt;\n                &lt;td&gt;{ { $product-&gt;name }} &lt;/td&gt;\n                &lt;td&gt;{ { $product-&gt;description }}&lt;/td&gt;\n                &lt;td&gt;{ { $product-&gt;stock }}&lt;/td&gt;\n                &lt;td&gt;\n                    &lt;form method = 'POST'&gt;\n                        &lt;input type=\"hidden\" name=\"cod\" value=\"{ { $product-&gt;id }}\" /&gt;\n                        &lt;input name = 'unidades' type='number' min = '1' value = '1' /&gt;\n                        &lt;input type = 'submit' name='comprar' value='Comprar'&gt;\n                    &lt;/form&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            @endforeach\n        &lt;/table&gt;\n    &lt;/div&gt;\n@endsection\n</code></pre> Tenim les mateixes directives que l'anterior i adem\u00e9s la directiva @include('order') que ve a dir que ah\u00ed va una altra vista de nom order.blade.php que crearem del fitxer order.php</p> <pre><code>&lt;h3&gt;&lt;img src='img/cesta.png' alt='Cesta' width='24' height='21'&gt;Comanda&lt;/h3&gt;\n&lt;hr /&gt;\n@if (!empty($productosCar))\n    @foreach ($productosCar as $productoCar)\n        &lt;form  method = 'POST'&gt;\n            &lt;input type=\"text\" style=\"width: 5em\" disabled  value=\"{ {$productoCar-&gt;name}}\" /&gt;\n            &lt;input name = 'cod' type='hidden'  value = '{ {$productoCar-&gt;id}}'&gt;\n            &lt;input name = 'unidades' type='number' min = '1' value = \"{ { $_SESSION['order'][$productoCar-&gt;id] }}\" style=\"width: 3em\"&gt;\n            &lt;input type = 'submit' style=\"width: 2em\" name='actualizar' value='OK'&gt;\n            &lt;input type = 'submit' style=\"width: 2em\"  name='eliminar' value='X'&gt;\n        &lt;/form&gt;\n    @endforeach\n    &lt;form id='vaciar' action='deleteOrder.php' method='post'&gt;\n        &lt;input type='submit' name='empty' class='boton' value='Buidar'  /&gt;\n    &lt;/form&gt;\n    &lt;form id='comprar' action='processOrder.php' method='post'&gt;\n        &lt;input type='submit' name='buy' class='boton' value='Processar'  /&gt;\n    &lt;/form&gt;\n@else\n    &lt;p&gt;Buida&lt;/p&gt;\n@endif\n</code></pre> <p>D'ac\u00ed el que hem de tenir en compte \u00e9s que el fitxer products.php haur\u00e0 de carregar les variables que utilitzen les dos vistes, ja que en realitat \u00e9s la mateixa.</p> <p><pre><code>&lt;?php\n    use App\\shoppingCart;\n    require '../config/load.php';\n    $cat = loadCategory($_GET['category']);\n    $cart = new shoppingCart();\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n        if (isset($_POST['comprar']))\n            $cart-&gt;add($_POST['cod'],(int)$_POST['unidades']);\n        if (isset($_POST['actualizar'])){\n            $cart-&gt;set($_POST['cod'],(int)$_POST['unidades']);\n        }\n        if (isset($_POST['eliminar'])){\n            $cart-&gt;delete($_POST['cod']);\n        }\n    }\n\n    $titleView = \"Productes categoria $cat-&gt;name\";\n    $products = loadProductsCategory($cat-&gt;id);\n    $productosCar = $cart-&gt;loadProducts();\n    echo $blade-&gt;render('products',compact('products','titleView','productosCar'));\n</code></pre> Ens que el tractament dels botons i la cridada a la vista.</p> <p>Per fi ens queda processOrder.php que pr\u00e0cticament no canvia.</p> <pre><code>@extends('layouts.main');\n@section('body')\n    &lt;div&gt;\n        { { $message }}\n    &lt;/div&gt;\n@endsection\n</code></pre> <p><pre><code>&lt;?php\nuse App\\mail;\nuse App\\shoppingCart;\nrequire '../config/load.php';\n\n$cart = new shoppingCart();\n$resul = $cart-&gt;processOrder($_SESSION['user']-&gt;id);\n\nif($resul === true &amp;&amp; !$cart-&gt;isEmpty()){\n    $correo = $_SESSION['user']-&gt;mailAdress;\n    $message =  \"Comanda realitzada amb \u00e8xit. Se enviar\u00e0 un correu de confirmaci\u00f3 a: $correo \";\n    $mail = new mail($cart-&gt;getOrder(), $resul, $correo);\n    $resul = $mail-&gt;send();\n    if($resul !== TRUE){\n        $message =  \"Error a l'enviar: $resul &lt;br&gt;\";\n    };\n    $cart-&gt;empty();\n} else $message = \"No s'ha pogut processar la comanda: \".$resul;\n$titleView = \"Comanda processada\";\necho $blade-&gt;render('processOrder',compact('message','titleView'));\n</code></pre> Vos deixe el fitxer addProduct.php com a exercisi.</p>"},{"location":"Antics/4.Exemple_d%27aplicacio%CC%81_completa_amb_PHP.html#model-de-dades","title":"Model de dades","text":"<p>L'objectiu \u00e9s possar una capa de software entre l'usuari i la base de dades per aix\u00ed:</p> <ul> <li>Que l'usuari no ataque directament la base de dades.</li> <li>Alliberar al programador de la tascat de generar consultes sql.</li> <li>Fer el codi m\u00e9s llegible.</li> <li>Comprovar les dades sense utilitzar la BBDD.</li> </ul> <p>Cada taula en la BBDD ha de tindre una classe en l'aplicaci\u00f3 i all\u00ed \u00e9s on guardarem el codi per interactuar. A l'igual que amb el motor de plantilles podem optar per motors de dades comercials. (P.E: Eloquent, Doctrine..).Per\u00f2 anem a construir un d'anar per casa. </p> <p>El que volem \u00e9s una entidad que aprofitan l'her\u00e8ncia ens permeta programar el meyns possible en les classes depenents d'una taula de la BBDD. La classe abstracta  podria ser aix\u00ed:</p> <pre><code>&lt;?php\n\nnamespace App;\nuse \\PDO;\nuse App\\bd;\n\nabstract class EntidadBase\n{\n\n    protected static $table;\n    protected static $index;\n    protected $attributes = [];\n    protected $visible = [];\n\n\n    public function __construct($items=[])\n    {\n        if (is_array($items))\n            $this-&gt;attributes = array_intersect_key($items,$this-&gt;visible);\n        else\n            $this-&gt;find($items);\n    }\n\n    public function __get($name)\n    {\n        if (array_key_exists($name, $this-&gt;attributes)) {\n            return ($this-&gt;attributes[$name]);\n        }\n    }\n\n    public function __set($name, $value)\n    {\n        $this-&gt;attributes[$name] = $value;\n    }\n\n    public function __isset($name)\n    {\n        return isset($this-&gt;attributes[$name]);\n    }\n\n    public function find($id,$fetch_style=PDO::FETCH_ASSOC)\n    {\n        $this-&gt;attributes = self::getbyId($id,$fetch_style);\n    }\n\n    public function delete()\n    {\n        $id = $this-&gt;attributes[static::$index];\n        self::deletebyId($id);\n        $this-&gt;attributes = [];\n\n    }\n\n\n    public function save()\n    {\n        try {\n            $bd = new bd();\n            if (isset($this-&gt;attributes[static::$index]))\n                $stmt = $bd-&gt;prepare($this-&gt;updateString());\n            else\n                $stmt = $bd-&gt;prepare($this-&gt;insertString());\n            if(!$stmt-&gt;execute($this-&gt;attributes)) throw new \\Exception('Error:'.$stmt-&gt;errorInfo()[2]);\n            echo 'Element Inserit/modificat';\n        }catch (PDOException $e) {\n            echo 'Fall\u00f3 la consulta: ' . $e-&gt;getMessage();\n        }catch (\\Exception $e) {\n            echo $e-&gt;getMessage();\n        }\n\n    }\n\n    // Funcions de consultes gen\u00e8riques\n\n    public static function getAll()\n    {\n        $bd = new bd();\n        return $bd-&gt;query(\"SELECT * FROM \".static::$table)-&gt;fetchAll(PDO::FETCH_OBJ);\n    }\n\n    public static function getbyId($id,$fetch_style=PDO::FETCH_OBJ)\n    {\n        try {\n            $bd = new bd();\n            $stmt = $bd-&gt;prepare(\"SELECT * FROM \". static::$table .\" WHERE \".static::$index.\" = :id\");\n            if ($stmt-&gt;execute(['id'=&gt;$id])) return $stmt-&gt;fetch($fetch_style);\n\n            else throw new \\Exception(\"Element no trobat\");\n        } catch (PDOException $e) {\n            echo 'Fall\u00f3 la consulta: ' . $e-&gt;getMessage();\n        }catch (\\Exception $e) {\n            echo $e-&gt;getMessage();\n        }\n    }\n\n    public static function getbyColum($columna, $valor)\n    {\n        $bd = new bd();\n        return $bd-&gt;query(\"SELECT * FROM \". static::$table .\" WHERE $columna = '$valor'\")-&gt;fetchAll(PDO::FETCH_OBJ);\n    }\n\n    public static function deletebyId($id)\n    {\n        try {\n            $bd = new bd();\n            $stmt = $bd-&gt;prepare(\"DELETE FROM \".static::$table.\" WHERE \".static::$index. \" = :id\");\n\n            if(!$stmt-&gt;execute(['id'=&gt;$id])) throw new \\Exception('Error:'.$stmt-&gt;errorInfo()[2]);\n            echo 'Element Esborrat';\n\n        }catch (PDOException $e) {\n            echo 'Fall\u00f3 la consulta: ' . $e-&gt;getMessage();\n        }catch (\\Exception $e) {\n            echo $e-&gt;getMessage();\n        }\n    }\n\n    public static function deleteAll($id)\n    {\n        $bd = new bd();\n        return $bd-&gt;query(\"DELETE FROM \".static::$table);\n    }\n\n    public static function deleteByColum($columna, $valor)\n    {\n        $bd = new bd();\n        return $bd-&gt;query(\"DELETE FROM \".static::$table.\" WHERE $columna = '$valor'\");\n    }\n\n\n\n    private function insertString() : string\n    {\n        $columns = implode(', ', array_keys($this-&gt;attributes));\n\n        $values = \":\".implode(\",:\", array_keys($this-&gt;attributes));\n\n        return \"INSERT INTO \".static::$table.\"($columns) VALUES ($values)\";\n    }\n\n    private function updateString() : string\n    {\n\n        $sql = \"\";\n        foreach (array_keys($this-&gt;attributes) as $key )\n            $sql .= \"$key = :$key,\";\n\n        return \"UPDATE \". static::$table.\" SET \".trim($sql,',').\" WHERE \". static::$index. \" = :\".static::$index;\n    }\n}\n</code></pre> <p>On tenim unes funcions statiques per atacar directament a la BBDD i unes altres per a treballar amb un objecte que \u00e9s un registre en la taula.</p> <p>En les primeres tinc els m\u00e8todes: getAll(), getById(), getByColumn(),deleteById(),deleteAll(),deleteByColumn() i totes les que vulguera fer.</p> <p>En les segons, utilitze els m\u00e8todes m\u00e0gics per a gestionar els atributs de la taula i els m\u00e8todes find(), delete(), save() per a interactuar amb la BBDD.</p> <p>Una classe que hereta d'esta seria de la forma:</p> <pre><code>&lt;?php\nnamespace App;\n\nclass Product extends EntidadBase\n{\n\n    protected $visible = [\n            'id' =&gt; 'number',\n            'name' =&gt; 'text',\n            'description' =&gt; 'text',\n            'stock' =&gt; 'number',\n            'idCategory' =&gt; 'number',\n            'price' =&gt; 'number'\n    ];\n\n    protected static $table = \"Products\";\n    protected static $index =  \"id\";\n\n}\n</code></pre> <p>On b\u00e0sicament definisc els atributs per a identificar la taula(nom i camp index) i els camps de cada taula ( que podria aprofitar per a fer una validaci\u00f3)</p> <p>Per a treballar amb esta classe tenim les seg\u00fcents opcions:</p> <pre><code>$product = new Product() // Cree nou producte buid\n$product = new Product(12) // Cree nou producte amb les dades del registre amb id 12\n$product = new Product($_POST) // Cree nou producte amb les dades d'un formulari (amb de coincidir noms de camps de la taula amb noms de camps del formulari)\n$product-&gt;name = 'Pipas Gerfusa' // Canvie el camps name del producte\n$product-&gt;save() // Guarde producte en la BBDD, si existeix el modifica i si no el crea.\n$product-&gt;delete()  //Esborra producte de la BBD\n$product-&gt;find(12) // Busca el producte en la BBDD\n\nProduct::getAll() // torna tots els registres de la BBDD\nProduct::getById(12)  //torna el registre 12 de la BBDD\nProducte::getByColumn('name','Pipas Gerfusa')  //torna el registre de la BBDD \n\nProduct::deleteAll() // esborra tots els registres de la BBDD\nProduct::deleteById(12)  // esborra el registre 12 de la BBDD\nProducte::deleteByColumn('name','Pipas Gerfusa')  //esborra el registre de la BBDD \n</code></pre> <p>Totes estes funcions estan definides en l'EntitadBase, i podem definir m\u00e9s si ens calen.</p> <p>Per exemple en el fitxer addProduct.php tenim</p> <pre><code>&lt;?php\nuse App\\Product;\nrequire dirname(__FILE__) . \"/../config/load.php\";\nif (isset($_POST['submit']) &amp;&amp; $_POST['submit']=='Validar') {\n    $product = new Product($_POST);\n    $product-&gt;save();\n    header(\"Location:listProducts.php\");\n}\nelse {\n    $product = new Product();\n    if (isset($_GET['id'])){\n        $product-&gt;find($_GET['id']);\n    }\n    $titleView = \"Afegir producte\";\n    echo $blade-&gt;render('addProduct',compact('titleView','product'));\n}\n</code></pre> <p>Al principi creem un producte que omplim si el que anem a fer \u00e9s modificar i deixem buid si \u00e9s un nou registre i es mostra la vista. Quan tractem al formulari creem un nou producte a partir del formulari i el guardem a la base de dades per despr\u00e9s redirigir a la lista de Productes.</p> <p>Per a millorar l'aplicaci\u00f3 amb els criteris del model MVC en faltaria definir quines s\u00f3n les rutes v\u00e0lides de l'aplicaci\u00f3 i diriguir-les a una funci\u00f3 d'un controlador, que \u00e9s el que s'encarregaria de tractar amb el model i les vistes. Per\u00f2 anem a deixer-ho ac\u00ed i ho vorem quan vejan el framework.</p>"},{"location":"Antics/5.1.Activitat.html","title":"5.1.Activitat","text":""},{"location":"Antics/5.1.Activitat.html#activitat-51-desenvolupa-una-api","title":"Activitat 5.1 Desenvolupa una API.","text":"<ul> <li>Disenya una API que resolga peticions per a les taules del teu projecte.</li> <li>Fes alguna petici\u00f3 de les que no hem vist, per exemple: els productes de una categoria.</li> <li>Dissenya alguna p\u00e0gina que utilitze l'API per funcionar.</li> </ul>"},{"location":"Antics/5.5.Laravel.html","title":"FRAMEWORK LARAVEL","text":""},{"location":"Antics/5.5.Laravel.html#installacio-de-paquets","title":"Instal.laci\u00f3 de paquets","text":"<p>Els paquets s\u00f3n la manera prim\u00e0ria d'afegir funcionalitat a Laravel. Els paquets podrien ser qualsevol cosa d'una manera: des de un gran de treballar amb dates com Carbon, o un marc de testatge de BDD sencer com Behat.</p> <p>Naturalment, hi ha tipus diferents de paquets. Alguns paquets s\u00f3n independent del framework, treballen amb qualsevol marc de PHP. Qualssevol d'aquests paquets poden ser utilitzats amb Laravel afegint-los dins el vostre arxiu composer.json o amb composer require</p> <p>D'altra banda, altres paquets s\u00f3n per \u00fas amb Laravel. Aquests paquets poden tenir rutes, controladors, vistes, i la configuraci\u00f3 concretament per a Laravel. </p>"},{"location":"Antics/5.5.Laravel.html#exemple-stydenet-html-package","title":"Exemple: StydeNet Html package","text":"<p>Aquest paquet cont\u00e9 una col\u00b7lecci\u00f3 de classes de PHP per generar components d'HTML com\u00fa, com:</p> <ul> <li>Menus</li> <li>Missatges d'Alerta</li> <li>Col.leccions en formularis</li> <li>Camps de r\u00e0dios i checkboxes en formulari</li> </ul> <p>\u00c9s una extensi\u00f3 del paquet HTML de Laravel Colective i ser\u00e0 molt \u00fatil per generar formularis i HTML din\u00e0micament.</p> <ul> <li> <p>Per Instal\u00b7lar fes c\u00f3rrer el composer require \"styde/html=~1.6\" o afegint \"styde/html\": \"~1.6\" a l'arxiu composer.json.</p> </li> <li> <p>Despr\u00e9s, cal afegir el nou prove\u00efdor a la varietat de prove\u00efdors en config/app.php (Aquest pas no \u00e9s necessari si est\u00e0s utilitzant Laravel 5.5 o superior amb l'autodescobriment de prove\u00efdors)</p> <pre><code>'prove\u00efdors' =&gt; [\n    // ...\n    \\Styde\\Html\\HtmlServiceProvider::Classe,\n    // ...\n],\n</code></pre> </li> <li> <p>Tamb\u00e9, necessites registrar en el app/Http/Kernel.php el middleware \\Styde\\Html\\Alerta\\Middleware::class abans del middleware EncryptCookies . </p> <pre><code>// Per Laravel 5.7\nprotected $middlewareGroups = [\n    \\Styde\\Html\\Alert\\Middleware::class,\n    //...\n];\n</code></pre> </li> </ul> <p>Aquest middleware \u00e9s necessitat per fer els missatges d'alerta persistents entre sessions, despr\u00e9s de que cada petici\u00f3 \u00e9s completada.</p> <p>Ara tindr\u00e0s autom\u00e0ticament disponibles el seg\u00fcents components:</p> <pre><code>Alert =&gt; Styde\\Html\\Facades\\Alert\nField =&gt; Styde\\Html\\Facades\\Field\nMenu  =&gt; Styde\\Html\\Facades\\Menu\nForm  =&gt; Collective\\Html\\FormFacade\nHtml  =&gt; Collective\\Html\\HtmlFacade\n</code></pre> <p>Opcionalment, pots tamb\u00e9 executar php artisan vendor:publish --provider='Styde\\Html\\HtmlServiceProvider' per publicar l'arxiu de configuraci\u00f3 en config/html.php i revisar les seves opcions i valors.</p>"},{"location":"Antics/5.5.Laravel.html#validacio-de-formularis","title":"Validaci\u00f3 de formularis","text":"<p>Les peticions de formularis s\u00f3n classes que contenen la l\u00f2gica de la validaci\u00f3. Per a crear una classe del tipus form request, utilitze el comando d'Artisan make:request des de la seua consola:</p> <pre><code>php artisan make:request StoreMovie\n</code></pre> <p>La classe generada ser\u00e0 guardadad en el directori app/Http/Requests. Si el directori no existeix, ser\u00e0 creat autom\u00e0ticament. </p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass StoreMovie extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return false;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            //\n        ];\n    }\n}\n</code></pre> <p>Afegim unes poques regles de validaci\u00f3 al m\u00e8tode rules:</p> <pre><code>return [\n        'title' =&gt; 'required|max:255',\n        'year' =&gt; 'required|numeric',\n        'poster' =&gt; 'required'\n    ];\n</code></pre> <p>Pots consultar les regles permeses.</p> <p>Llavors, com s\u00f3n avaluades les regles de validaci\u00f3? Tot el que necessites fer \u00e9s especificar el tipus de la petici\u00f3 en el m\u00e8tode del controlador. La sol\u00b7licitud entrant del formulari \u00e9s validada abans que es cride al m\u00e8tode del controlador, la qual cosa significa que no necessita abarrotar el controlador amb la l\u00f2gica de validaci\u00f3:</p> <pre><code>public function postCreate(StoreMovie $request){\n        $movie = new Movie();\n        $movie-&gt;title = $request-&gt;title;\n        $movie-&gt;year = $request-&gt;year;\n        $movie-&gt;director = $request-&gt;director;\n        $movie-&gt;poster = $request-&gt;poster;\n        $movie-&gt;synopsis = $request-&gt;synopsis;\n        $movie-&gt;save();\n        return redirect('/catalog');\n}\n</code></pre> <p>Si la validaci\u00f3 falla, es generar\u00e0 autom\u00e0ticament una resposta de redirecci\u00f3 que envia a l'usuari de tornada a la seua anterior localitzaci\u00f3. Els errors tamb\u00e9 es mostraran \"temporalment\" en la sessi\u00f3 aix\u00ed que estan per a la seua visualitzaci\u00f3.  Si la petici\u00f3 era era una sol\u00b7licitud AJAX, es retornar\u00e0 a l'usuari una resposta HTTP amb un codi d'estat 422 incloent una representaci\u00f3 en format JSON dels errors de validaci\u00f3.</p>"},{"location":"Antics/5.5.Laravel.html#autoritzacio-de-les-peticions-de-formulari","title":"Autoritzaci\u00f3 de les peticions de formulari","text":"<p>Les classes form request tamb\u00e9 contenen un m\u00e8tode authorize. Dins d'aquest m\u00e8tode, pots comprovar si l'usuari autenticat t\u00e9 realment el perm\u00eds per a actualitzar un recurs determinat. </p> <p>Si el m\u00e8tode authorize retorna false, \u00e9s retorna autom\u00e0ticament una resposta HTTP amb un estat 403 i el m\u00e8tode del seu controlador no \u00e9s executat.</p> <p>Si el teu pla \u00e9s tenir una l\u00f2gica d'autoritzaci\u00f3 en una altra part de l'aplicaci\u00f3, simplement retorna true en el m\u00e8tode authorize.</p>"},{"location":"Antics/5.5.Laravel.html#mes-coses-sobre-models","title":"M\u00e9s coses sobre models","text":""},{"location":"Antics/5.5.Laravel.html#assignacio-massiva","title":"Assignaci\u00f3 Massiva","text":"<p>Tamb\u00e9 es pot utilitzar el m\u00e8tode create per a emmagatzemar un model en una \u00fanica l\u00ednia. Des del m\u00e8tode es retornar\u00e0 la inst\u00e0ncia del model inserit. No obstant a\u00e7\u00f2, abans d'a\u00e7\u00f2, cal especificar la propietat fillable o guarded del model, doncs tots els models Eloquent posseeixen protecci\u00f3 contra l'assignaci\u00f3 en massa.</p> <p>Una vulnerabilitat d'assignaci\u00f3 massiva t\u00e9 lloc quan un usuari passa un par\u00e0metre HTTP inesperat a trav\u00e9s de la sol\u00b7licitud, i aquest par\u00e0metre canvia una columna de la base de dades que no s'esperava. Per exemple, un usuari malintencionat podria enviar un par\u00e0metre is_admin a trav\u00e9s d'una petici\u00f3 HTTP, el qual es marejaria dins del m\u00e8tode create del model, permetent a l'usuari postular-se com un administrador.</p> <p>Aix\u00ed que, per a comen\u00e7ar, cal definir a quins atributs se'ls permet l'assignaci\u00f3 massiva. A\u00e7\u00f2 s'estableix en la propietat fillable del model. Per exemple, anem a permetre l'assignaci\u00f3 massiva sobre l'atribut name d'un model Flight:</p> <pre><code>&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['name'];\n}\n</code></pre>"},{"location":"Antics/5.5.Laravel.html#atributes-guarding","title":"Atributes Guarding","text":"<p>Mentre que $fillable serveix com una \"llista blanca\" d'atributs que poden ser assignats massivament, tamb\u00e9 es pot optar per $guarded. La propietat guarded cont\u00e9 un array d'atributs que no poden ser assignats de forma massiva.  La resta d'atributs que no es troben en el array si podran. Pel que, $guarded actua com una \"llista negra\". Per descomptat, s'ha d'establir $fillable o $guarded - mai tots dos. En l'exemple que segueix, tots els atributs excepte price comptaran amb assignaci\u00f3 massiva:</p> <pre><code>&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The attributes that aren't mass assignable.\n     *\n     * @var array\n     */\n    protected $guarded = ['price'];\n}\n</code></pre> <p>Si es desitja que tots els atributs es puguen assignar en massa, es pot definir la propietat $guarded com un array buit:</p> <pre><code>/*\n* The attributes that llauren't mass assignable.\n*\n* @var array\n/\nprotected $guarded = [];\n</code></pre>"},{"location":"Antics/5.5.Laravel.html#relacions-en-laravel","title":"Relacions en Laravel","text":"<p>Les taules de les bases de dades es relacionen sovint unes amb unes altres. Eloquent facilita la gesti\u00f3 i el treball amb aquestes relacions f\u00e0cilment suportant diversos tipus de relacions diferents:</p> <ul> <li>Un a un \u2013 One to one</li> <li>Un a molts \u2013 One to many</li> <li>Molts a molts \u2013 Many to many</li> <li>Molta a molts mitjan\u00e7ant - Has Many Through</li> </ul>"},{"location":"Antics/5.5.Laravel.html#definir-relacions","title":"Definir relacions","text":"<p>Les relacions entre models Eloquent es defineixen com a m\u00e8todes en les pr\u00f2pies classes. At\u00e8s que, com els propis models Eloquent, les relacions tamb\u00e9 serveixen com a poderosos query builders, la definici\u00f3 de relacions com a m\u00e8todes proporciona potents funcions d'encadenament i consulta de m\u00e8todes.</p>"},{"location":"Antics/5.5.Laravel.html#un-a-molts-one-to-many","title":"Un a molts \u2013 One to many","text":"<p>Una relaci\u00f3 \"un-a-molts\" s'usa per a definir relacions en les quals un model \u00fanic posseeix qualsevol quantitat d'altres models. Per exemple, un blog pot tenir un nombre infinit de comentaris. Com en altres relacions de Eloquent, les relacions un-a-molts es defineixen col\u00b7locant una funci\u00f3 en el model Eloquent:</p> <pre><code>    &lt;?php\n\n    namespace App;\n\n    use Illuminate\\Database\\Eloquent\\Model;\n\n    class Post extends Model\n    {\n        /**\n         * Get the comments for the blog post.\n         */\n        public function comments()\n        {\n            return $this-&gt;hasMany('App\\Comment','foreign_key', 'local_key');\n        }\n    }\n</code></pre> <p>Si la clau externa en el model Comment \u00e9s el nom del propi model i el sufix _id mitjan\u00e7ant la convenci\u00f3 \"snake_case\" (en el exemple post_id) el par\u00e0metre foreign_key \u00e9s podr\u00e0 obviar. Si la clau local \u00e9s id \u00e9s podr\u00e0 obviar.</p> <p>Una vegada que la relaci\u00f3 ha sigut definida, es pot accedir a la col\u00b7lecci\u00f3 de comentaris accedint a la propietat comments, i despr\u00e9s, es pot accedir als m\u00e8todes de la relaci\u00f3 com si foren propietats del model:</p> <pre><code>$comments = App\\Post::find(1)-&gt;comments;\n\nforeach ($comments as $comment) {\n    //\n}\n</code></pre> <p>Per descomptat, ja que totes les relacions serveixen com query builders, es poden agregar agregar restriccions addicionals als comentaris que van ser obtinguts amb la cridada al m\u00e8tode *comments i continuar la cadena de condicions en la consulta:</p> <pre><code>$comments = App\\Post::find(1)-&gt;comments()-&gt;*where('title', 'foo')-&gt;first();\n</code></pre>"},{"location":"Antics/5.5.Laravel.html#un-a-molts-invers","title":"Un a molts (invers)","text":"<p>Ara que podem accedir a tots els comentaris del post, anem a definir la relaci\u00f3 per a permetre que un comentari accedisca a la seua publicaci\u00f3 pare.  Per a definir l'invers d'una relaci\u00f3 hasMany, definir una funci\u00f3 de relaci\u00f3 en el model fill que cride al m\u00e8tode belongsTo:</p> <pre><code>&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Comment extends Model\n{\n    /**\n     * Get the post that owns the comment.\n     */\n    public function post()\n    {\n        return $this-&gt;belongsTo('App\\Post', 'foreign_key', 'other_key');\n    }\n}\n</code></pre> <p>On es poden obviar foreign_key i other_key si seguixen la convenci\u00f3 anterior.</p> <p>Una vegada que la relaci\u00f3 s'ha definit, es pot recuperar el model Post des de Comment accedint a la \"propietat din\u00e0mica\" post:</p> <pre><code>$comment = App\\Comment::find(1);\necho $comment-&gt;post-&gt;title;\n</code></pre>"},{"location":"Antics/5.5.Laravel.html#molts-a-molts-many-to-many","title":"Molts a molts \u2013 Many to many","text":"<p>Les relacions molts-a-molts s\u00f3n una mica m\u00e9s complicades que les hasOne o les hasMany. Un exemple de tal relaci\u00f3 \u00e9s un usuari que cont\u00e9 diversos rols, on els rols s\u00f3n compartits per altres usuaris. Per exemple, diversos usuaris poden tenir el rol de \"Admin\". Per a definir aquesta relaci\u00f3, es requereixen tres taules de la base de dades: users, rols, i role_user. La taula role_user \u00e9s derivada de l'ordre alfab\u00e8tic dels noms dels models relacionats i cont\u00e9 les columnes user_id i role_id.</p> <p>Les relacions molts-a-molts es defineixen amb un m\u00e8tode que retorna el resultat del m\u00e8tode belongsToMany. Per exemple, definir el m\u00e8tode rols en el model User:</p> <pre><code>&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /\n      The roles that belong to the user.\n     /\n    public function roles()\n    {\n        return $this-&gt;belongsToMany('App\\Role');\n    }\n}\n</code></pre> <p>Una vegada definida la relaci\u00f3, es pot accedir als rols de l'usuari usant la propietat din\u00e0mica rols:</p> <pre><code>$user = App\\User::find(1);\n\nforeach ($user-&gt;rols as $role) {\n    //\n}\n</code></pre> <p>Per descomptat, com en les altres relacions, es pot cridar al m\u00e8tode rols per a continuar encadenant restriccions a la consulta sobre la relaci\u00f3:</p> <pre><code>$rols = App\\User::find(1)-&gt;rols()-&gt;orderBy('name')-&gt;get();\n</code></pre> <p>Com s'ha esmentat anteriorment, per a determinar el nom de la taula relacionada en un join, Eloquent unir\u00e0 els noms dels dos models relacionats en ordre alfab\u00e8tic. No obstant a\u00e7\u00f2, hi ha llibertat per a sobreescriure aquesta convenci\u00f3. Es pot fer passant un segon par\u00e0metre al m\u00e8tode belongsToMany:</p> <pre><code>return $this-&gt;belongsToMany('App\\Role', 'role_user');\n</code></pre> <p>A m\u00e9s de poder personalitzar el nom de les taules en un join, tamb\u00e9 es pots personalitzar els noms de les columnes de les claus en la taula afegint m\u00e9s arguments al m\u00e8tode belongsToMany. El tercer argument \u00e9s el nom de la clau for\u00e0nia en la qual s'est\u00e0 definint la relaci\u00f3, mentre que el quart argument \u00e9s el nom de la clau for\u00e0nia del model al que s'est\u00e0 fent el join:</p> <pre><code>return $this-&gt;belongsToMany('App\\Role', 'role_user', 'user_id', 'role_id');\n</code></pre>"},{"location":"Antics/5.5.Laravel.html#definint-la-inversa-de-la-relacio","title":"Definint la Inversa de la Relaci\u00f3","text":"<p>Per a definir la inversa d'una relaci\u00f3 de molts a molts, simplement cal posar una altra cridad a belongsToMany en el model relacionat. </p>"},{"location":"Antics/5.5.Laravel.html#recuperar-columnes-de-taules-intermedies","title":"Recuperar Columnes de Taules Interm\u00e8dies","text":"<p>Com s'ha vist, treballar amb relacions molts-a-molts requereix la pres\u00e8ncia d'una taula interm\u00e8dia. Eloquent proporciona algunes formes molt \u00fatils d'interactuar amb aquesta taula. Per exemple, suposem que un objecte User t\u00e9 molts objectes Role amb els quals es relaciona. Despr\u00e9s d'accedir a aquesta relaci\u00f3, es pot accedir a la taula interm\u00e8dia utilitzant l'atribut pivot en els models:</p> <pre><code>$user = App\\User::find(1);\n\nforeach ($user-&gt;rols as $role) {\n    echo $role-&gt;pivot-&gt;created_at;\n}\n</code></pre> <p>Cal tenir en compte que el model obtingut Role, est\u00e0 assignat autom\u00e0ticament a un atribut pivot. Aquest atribut cont\u00e9 un model que representa la taula interm\u00e8dia i pot ser utilitzat com qualsevol altre model Eloquent.</p> <p>Per defecte, nom\u00e9s les claus del model estaran presents en l'objecte pivot. Si la taula pivot cont\u00e9 atributs addicionals, s'han d'especificar en definir la relaci\u00f3:</p> <pre><code>return $this-&gt;belongsToMany('App\\Role')-&gt;withPivot('column1', 'column2');\n</code></pre> <p>Si es desitja que els camps crated_at i updated_at es mantinguen de forma autom\u00e0tica, cal utilitzar el m\u00e8tode withTimestamps en definir la relaci\u00f3:</p> <pre><code>return $this-&gt;belongsToMany('App\\Role')-&gt;withTimestamps();\n</code></pre>"},{"location":"Antics/5.5.Laravel.html#filtrant-relacions-via-columnes-de-taula-intermedia","title":"Filtrant Relacions Via Columnes de Taula Interm\u00e8dia","text":"<p>Tamb\u00e9 pots filtrar els resultats van retornar per belongsToMany utilitzant el wherePivot i wherePivotIn m\u00e8todes quan definint la relaci\u00f3:</p> <pre><code>retorn $this-&gt;belongsToMany('App\\Notes')-&gt;wherePivot('aprovat', 1);\n</code></pre>"},{"location":"Antics/5.5.Laravel.html#has-many-through","title":"Has Many Through","text":"<p>El \"Has Many Through\" proporciona una drecera convenient per accedir relacions distants via una relaci\u00f3 interm\u00e8dia.Per exemple, un model Country, pot tenir molts models Post a trav\u00e9s d'un model intermedi User. En aquest exemple, es podria reunir f\u00e0cilment tots els missatges d'un blog per a un pa\u00eds determinat. Fem una ullada a les taules per a definir aquesta relaci\u00f3:</p> <p>countries     id - integer     name - string</p> <p>users     id - integer     country_id - integer     name - string</p> <p>posts     id - integer     user_id - integer     title - string</p> <p>Encara que Post no cont\u00e9 una columna country_id, la relaci\u00f3 hasManyThrough proporciona acc\u00e9s als missatges d'un pa\u00eds via $country-&gt;posts. </p> <p>Per a realitzar aquesta consulta, Eloquent inspecciona country_id en la taula interm\u00e8dia users. Despr\u00e9s de trobar els IDs d'usuaris coincidents, seran usats per a la consulta a la taula posts.</p> <p>Ara que s'ha examinat l'estructura de la taula per a la relaci\u00f3, es va a definir sobre el model Country:</p> <pre><code>&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Country extends Model\n{\n    /*\n     * Get all of the posts for the country.\n     */\n    public function posts()\n    {\n        return $this-&gt;hasManyThrough('App\\Post', 'App\\User');\n    }\n}\n</code></pre> <p>El primer par\u00e0metre passat al m\u00e8tode hasManyThrough \u00e9s el nom del model final al que es desitja accedir, mentre que el segon par\u00e0metre \u00e9s el nom del model intermedi.</p> <p>Els convenis t\u00edpics per a claus de Eloquent seran usats per a realitzar les consultes de la relaci\u00f3. Si es desitja personalitzar les claus de la relaci\u00f3, es pot fer pels par\u00e0metres tercer i quart al m\u00e8tode hasManyThrough. El tercer par\u00e0metre \u00e9s el nom de la clau aliena del model intermediari. El quart par\u00e0metre correspon amb el nom de la clau aliena del model final. El cinqu\u00e8 argument \u00e9s la clau local, mentre que el sis\u00e8 \u00e9s la clau local del model intermedi:</p> <pre><code>class Country extends Model\n{\n    public function posts()\n    {\n        return $this-&gt;hasManyThrough(\n            'App\\Post',\n            'App\\User',\n            'country_id', // Foreign key on users table...\n            'user_id', // Foreign key on posts table...\n            'id', // Local key on countries table...\n            'id' // Local key on users table...\n        );\n    }\n}\n</code></pre>"},{"location":"Antics/5.5.Laravel.html#consultar-lexistencia-de-relacions","title":"Consultar l'Exist\u00e8ncia de Relacions","text":"<p>Quan s'accedeixen als registres d'un model, es poden limitar els resultats basats en l'exist\u00e8ncia d'una relaci\u00f3. Per exemple, imaginar que es desitja obtenir tots els posts que continguen almenys un comentari. Per a a\u00e7\u00f2, es passaria el nom de la relaci\u00f3 al m\u00e8tode has o a orHas:</p> <pre><code>// Retrieve all posts that have at least one comment...\n$posts = App\\Post::has('comments')-&gt;get();\n</code></pre> <p>A m\u00e9s es pot especificar un operador i un comptador per a personalitzar la consulta:</p> <pre><code>// Retrieve all posts that have three or habite comments...\n$posts = Post::has('comments', '&gt;=', 3)-&gt;get();\n</code></pre> <p>Es poden nigar estructures has utilitzant la notaci\u00f3 de \"punts\". Per exemple, es podrien obtenir tots els posts que tenen almenys un comentari i un vot:</p> <pre><code>// Retrieve all posts that have at least one comment with votes...\n$posts = Post::has('comments.votes')-&gt;get();\n</code></pre> <p>Si es necessita encara m\u00e9s control, es poden utilitzar els m\u00e8todes whereHas i orWhereHas per a incloure condicions \"where\" en les consultes has. Aquests m\u00e8todes permeten afegir restricciones personalitzades a una relaci\u00f3, aix\u00ed com comprovar el contingut d'un comentari:</p> <pre><code>// Retrieve all posts with at least one comment containing words like foo%\n$posts = Post::whereHas('comments', function ($query) {\n    $query-&gt;where('content', 'like', 'foo%');\n})-&gt;get();\n</code></pre> <p>Quan s'accedeixen als registres d'un model, es poden limitar els resultats basats en la inexist\u00e8ncia d'una relaci\u00f3. Per exemple, imaginar que es desitja obtenir tots els posts que no continguen almenys un comentari. Per a a\u00e7\u00f2, es passaria el nom de la relaci\u00f3 al m\u00e8tode doesntHave o a orDoesntHave:</p> <pre><code>$posts = App\\Post::doesntHave('comments')-&gt;get();\n</code></pre>"},{"location":"Antics/5.5.Laravel.html#insertant-i-modificant-models-rellacionats","title":"Insertant i modificant Models rel.lacionats","text":""},{"location":"Antics/5.5.Laravel.html#el-metode-save","title":"El m\u00e8tode Save","text":"<p>Eloquent proveeix m\u00e8todes convenients per a l'addici\u00f3 de nous models a les relacions. Per exemple, potser necessite inserir un nou Comment a un model Post. En lloc de configurar manualment l'atribut post_id en el Comment, pot inserir el Comment directament des del m\u00e8tode save de la relaci\u00f3:</p> <pre><code>$comment = new App\\Comment(['message' =&gt; 'A new comment.']);\n$post = App\\Post::find(1);\n$post-&gt;comments()-&gt;save($comment);\n</code></pre> <p>Note's que no accedim als comments de la relaci\u00f3 com una propietat din\u00e0mica. En el seu lloc, cridem al m\u00e8tode comments per a obtenir una inst\u00e0ncia de la relaci\u00f3. El m\u00e8tode save agregar\u00e0 autom\u00e0ticament el valor post_id apropiat al nou model Comment.</p> <p>Si necessitem gravar multiples models relacionats, pot usar el m\u00e8tode saveMany</p> <pre><code>$post = App\\Post::find(1);\n\n$post-&gt;comments()-&gt;saveMany([\n    new App\\Comment(['message' =&gt; 'A new comment.']),\n    new App\\Comment(['message' =&gt; 'Another comment.']),\n]);\n</code></pre>"},{"location":"Antics/5.5.Laravel.html#el-metode-create","title":"El m\u00e8tode Create","text":"<p>A m\u00e9s dels m\u00e8todes save i saveMany, es pot utilitzar tamb\u00e9 el m\u00e8tode create, eque accepta una matriu d'atributs, crea el model i ho insereix en la base de dades. De nou, la difer\u00e8ncia entre save i create \u00e9s que save accepta una inst\u00e0ncia d'un model complet de Eloquent mentre que create accepta una matriu de PHP:</p> <pre><code>$post = App\\Post::find(1);\n\n$comment = $post-&gt;comments()-&gt;create([\n    'message' =&gt; 'A new comment.',\n]);\n</code></pre> <p>Abans d'utilitzar el crear m\u00e8tode, revisa la documentaci\u00f3 d'assignment masssiu. Pots utilitzar el createMany m\u00e8tode per crear el m\u00faltiple va relacionar models:</p> <pre><code>$post = App\\Post::find(1);\n$post-&gt;comments()-&gt;createMany([\n    [\n        'message' =&gt; 'A new comment.',\n    ],\n    [\n        'message' =&gt; 'Another new comment.',\n    ],\n]);\n</code></pre>"},{"location":"Antics/5.5.Laravel.html#belongs-to-relationships","title":"Belongs To Relationships","text":"<p>Quan actualitzem una relaci\u00f3 belongsTo, utilitzaem el m\u00e8tode associate. Aquest m\u00e8tode establir\u00e0 la clau for\u00e0nia en el model fill.</p> <pre><code>$account = App\\Account::find(10);\n$user-&gt;account()-&gt;associate($account);\n$user-&gt;save();\n</code></pre> <p>Per a llevar-la, pots utilitzar el m\u00e8tode dissociate. Aquest m\u00e8tode posar\u00e0 la clau for\u00e0nia de la relaci\u00f3 a null:</p> <pre><code>$user-&gt;account()-&gt;dissociate();\n$user-&gt;save();\n</code></pre>"},{"location":"Antics/5.5.Laravel.html#relacions-molts-a-molts","title":"Relacions Molts a Molts","text":""},{"location":"Antics/5.5.Laravel.html#adjuntar-separar-attaching-detaching","title":"Adjuntar / Separar (Attaching / Detaching)","text":"<p>Eloquent tamb\u00e9 proporciona uns quants helpers addicionals helper m\u00e8todes per fer que treballen amb va relacionar models habite convenient. Per exemple, imaginar que un usuari pot tenir diversos rols i un rol pot tenir diversos usuaris. Per un adjuntar un rol un un usuari inserint un registre en la taula interm\u00e8dia que uneix els models, utilitzar el m\u00e8tode attach:</p> <pre><code>$user = App\\User::find(1);\n$user-&gt;rols()-&gt;attach($roleId);\n</code></pre> <p>Quan s'adjunta una relaci\u00f3 a un model, es pot passar a m\u00e9s un array de dades addicional per a inserir-ho en la taula interm\u00e8dia:</p> <pre><code>$user-&gt;rols()-&gt;attach($roleId, ['expires' =&gt; $expires]);\n</code></pre> <p>Per descomptat, a voltes \u00e9s necessari eliminar un rol d'un usuari. Per a eliminar un registre d'una relaci\u00f3 molts-a-molts, utilitzar el m\u00e8tode detach. El m\u00e8tode detach eliminar\u00e0 el registre apropiat de la taula interm\u00e8dia; no obstant a\u00e7\u00f2, tots dos models romandran en la base de dades:</p> <pre><code>// Detach a single role from the user...\n$user-&gt;rols()-&gt;dettach($roleId);\n\n// Detach all rols from the user...\n$user-&gt;rols()-&gt;dettach();\n</code></pre> <p>Per comoditat, attach i dettach accepten a m\u00e9s un array de IDs com a entrada:</p> <pre><code>$user = App\\User::find(1);\n\n$user-&gt;rols()-&gt;detach([1, 2, 3]);\n\n$user-&gt;rols()-&gt;attach([\n    1 =&gt; ['expires' =&gt; $expires],\n    2 =&gt; ['expires' =&gt; $expires]\n]);\n</code></pre>"},{"location":"Antics/5.5.Laravel.html#guardant-dades-addicional-en-la-taula-pivot","title":"Guardant dades addicional en la taula pivot","text":"<p>Quan treballem amb una relaci\u00f3 molts-a-molts, el m\u00e8tode Save accepta , com a segon argument, una matriu de attributes de la taula annexa (taula pivot)</p> <pre><code>App\\User::find(1)-&gt;rols()-&gt;save($role, ['expires' =&gt; $expires]);\n</code></pre>"},{"location":"Antics/5.5.Laravel.html#modificant-un-registre-en-la-taula-pivot","title":"Modificant un registre en la taula Pivot","text":"<p>Si necessites actualitzar una fila en el taula pivot, pots utilitzar el m\u00e8tode updateExistingPivot. Aquest m\u00e8tode accepta la clau for\u00e0nia i una varietat d'atributs per actualitzar:</p> <pre><code>$user = App\\User::find(1);\n$user-&gt;rols()-&gt;updateExistingPivot($roleId, $attributes);\n</code></pre> <p>Consulta documentaci\u00f3n</p>"},{"location":"Antics/5.6.Activitat.html","title":"5.6.Activitat","text":""},{"location":"Antics/5.6.Activitat.html#activitat-56-videoclub","title":"Activitat 5.6: VideoClub","text":""},{"location":"Antics/5.6.Activitat.html#exercisi-1-acces-login-en-una-app-de-laravel-57-amb-socialite","title":"Exercisi 1 - ACC\u00c9S (LOGIN) EN UNA APP DE LARAVEL 5.7 AMB SOCIALITE","text":"<p>Laravel disposa d'un paquet oficial, anomenat Laravel Socialite que ens ofereix una via r\u00e0pida i f\u00e0cil, per a oferir una forma d'autenticaci\u00f3 amb prove\u00efdors de OAuth, suportant de forma oficial a la data, Facebook, Twitter, LinkedIn, Google, GitHub i Bitbucket. Pot ser est\u00e8s amb facilitat implementant el paquet Socialite Providers</p> <p>Fes un sistema d'autenticaci\u00f3 per Facebook</p>"},{"location":"Antics/5.6.Activitat.html#exercisi-2-control-de-qui-lloga-la-pellicula","title":"Exercisi 2 - Control de qui lloga la pel.licula.","text":"<p>Cada volta que un usuari lloga un pel.licula anem a apuntar-ho en una taula rents. </p> <ul> <li>Crea la migraci\u00f3 amb els camps per a la taula rents: id, idUser, idMovie, dateRent, dateReturn i amb les claus fon\u00e0nies corresponents.</li> <li>Partint de l'exemple de la rel.laci\u00f3 molts a molts entre els models movie i users, crea la rel.laci\u00f3 contr\u00e0ria. </li> </ul> <p>movies.php</p> <pre><code>    public function usuarios(){\n            return $this-&gt;belongstoMany(User::class,'rents','idMovie', 'idUser')-&gt;withPivot(['dateRent','dateReturn']);\n        }\n</code></pre> <ul> <li> <p>Fes que quan un usuari llogue s'afegisca un enlla\u00e7 de la rel.laci\u00f3:</p> <ul> <li>Definix en myHelpers la funci\u00f3 fecha que torne la data del dia de hui en format (Y/m/d) </li> <li>Utilitzarem la funci\u00f3 attach de la rel.laci\u00f3 i transaccions per fer les dos operacions o cap.<pre><code>public function putRent($id)\n{\n    DB::transaction(function ()use ($id) {\n        $pelicula = Movie::findOrFail($id);\n        $pelicula-&gt;rented = true;\n        $pelicula-&gt;save();\n        $pelicula-&gt;usuarios()-&gt;attach(Auth::id(), ['dateRent' =&gt; Fecha()]);\n    });\n    return redirect(\"/catalog/show/$id\");\n}\n</code></pre> </li> </ul> </li> <li> <p>Fes que quan un usuari retorne es modifica l'enlla\u00e7 per afegir la data de retorn.</p> <ul> <li>Utilitza la funci\u00f3 updateExistingPivot</li> </ul> </li> </ul>"},{"location":"Antics/5.6.Activitat.html#execisi-3-fes-que-un-usuari-no-puga-retornar-una-pellicula-que-no-te-llogada","title":"Execisi 3 - Fes que un usuari no puga retornar una pel.licula que no te llogada.","text":"<ul> <li> <p>Per a fer-ho m\u00e9s senzill anem a definir una altra rel.laci\u00f3 en la taula users que incloga les pel.licules de l'usuari que el camp dateReturn siga null</p> <pre><code>public function rent_movies(){\n        return $this-&gt;belongsToMany(Movie::class,'rents','idUser', 'idMovie')-&gt;withPivot(['dateRent','dateReturn'])-&gt;wherePivot('dateReturn',null);\n    }\n</code></pre> <ul> <li> <p>Utilitzan esta relaci\u00f3 en la vista mostrarem el bot\u00f3 de retornar soles si la pel.licula est\u00e0 entre les llogades per l'usuari. Una rel.laci\u00f3 torna una col.lecci\u00f3 (collection). Anem a utilitzar el m\u00e8todo contains de la col.lecci\u00f3:</p> <p>@if (Auth::user()-&gt;rent_movies-&gt;contains($pelicula)) </p> </li> </ul> </li> <li> <p>Podriem mostrar en la vista show des de quan est\u00e0 llogada la pel.licula. Com que la data la traur\u00e0 en format angl\u00e9s podem fer una funci\u00f3 per a canviar el format (en myHelpers). Tamb\u00e9 podem calcular els dies que fa que est\u00e0 llogada utilitzant el component Jessengers/Date per a php</p> </li> </ul>"},{"location":"Antics/5.6.Activitat.html#exercisi-4-fes-una-entrada-en-el-menu-per-a-que-lusuari-puga-veure-les-pellicules-que-en-te-llogades","title":"Exercisi 4 - Fes una entrada en el men\u00fa per a que l'usuari puga veure les pel.licules que en te llogades.","text":"<ul> <li>Es pot utlitzar la vista index. </li> </ul>"},{"location":"Antics/5.6.Activitat.html#exercisi-5-crea-un-sistema-dautenticacio-per-roles-admin-i-user","title":"Exercisi 5 - Crea un sistema d'autenticaci\u00f3 per roles (admin i user).","text":"<ul> <li>Autenticaci\u00f3n de Usuarios y Roles</li> <li>Modifica per a que quan es cree l'usuario mitjan\u00e7ant facebook, tamb\u00e9 li asigne el rol d'usuari.</li> </ul>"},{"location":"Antics/5.6.Activitat.html#exercisi-6-crea-un-middleware-per-a-filtrar-les-rutes-per-rol","title":"Exercisi 6 - Crea un middleware per a filtrar les rutes per rol.","text":"<ul> <li>Creaci\u00f3n de middleware y autenticaci\u00f3n por Roles</li> </ul>"},{"location":"Antics/5.6.Activitat.html#exercisi-7-","title":"Exercisi 7 -","text":"<ul> <li>L'aplicaci\u00f3 haur\u00e0 de quedar de la seg\u00fcent manera:<ul> <li>L'usuari normal pot:<ul> <li>Vore el cat\u00e0leg, les pel.licules que te llogades, les pel.licules per genere, llogar i tornar pel.licules.</li> <li>Historial de pel.licules llogades (cal fer-ho)</li> </ul> </li> <li>L'administrador, a m\u00e9s pot:<ul> <li>Crear i editar pel.licules, crud per genere.</li> <li>Llistat de pel.licules llogades en este moment (cal fer-ho)</li> <li>Llistat de lloguers tancats (cal fer-ho)</li> </ul> </li> </ul> </li> </ul> <p>Nota Per a que varios roles puguen utilitzar una ruta anem a modificar el middleware i el fitxer de rutes.</p> <p>middleware:</p> <pre><code>public function handle($request, Closure $next, $role)\n    { \n        foreach (explode(':', $role) as $rol) {\n            if ($request-&gt;user()-&gt;hasRole($rol)) {\n                return $next($request);\n            }\n        }\n        abort(403, 'No tienes autorizaci\u00f3n para ingresar.');\n    }\n</code></pre> <p>Aix\u00f2 espera que la ruta puga tindre m\u00e9s de un rol separats per : Exemple:</p> <pre><code>Route::get('catalog','CatalogController@getIndex')-&gt;middleware('role:admin:user');\n</code></pre> <p>Per tal de modificar el men\u00fa per a que les opcions no siguen tampoc visibles, podem fer-ho afegint el par\u00e0metres roles a l'opci\u00f3 que volem filtrar:</p> <pre><code>'nueva' =&gt; ['title' =&gt; 'Nueva Pel\u00edcula', 'url' =&gt; '/catalog/create', 'roles' =&gt; 'admin'],\n</code></pre> <p>Aix\u00f2 funcionaria si l'usuari tingues un camp role per\u00f2 no el t\u00e9. Aix\u00ed que anem a calcular-ho utilitzan una funci\u00f3 que posarem en el model:</p> <pre><code>public function getRoleAttribute(){\n    return $this-&gt;roles-&gt;first()-&gt;name;\n}\n</code></pre> <p>A\u00e7\u00f2 crea un camp model role amb el valor retornat.</p> <p>** Nota ** </p> <p>Est\u00e0 soluci\u00f3 tan tols ho faria en cas de que un usuari tinga un role. Si en t\u00e9 m\u00e9s hauriem d'adaptar </p>"},{"location":"Antics/5.6.Laravel.html","title":"FRAMEWORK LARAVEL","text":""},{"location":"Antics/5.6.Laravel.html#api","title":"API","text":""},{"location":"Antics/5.6.Laravel.html#creant-el-resource-controller","title":"Creant el Resource controller","text":"<p>Laravel pot crear un controlador amb m\u00e8todes ja establits per a una api, i tindre llest tot per a l'\u00fas dels verbs HTTP. Tot en 1 senzill pas:</p> <pre><code>php artisan make:controller Api/MovieController -r\n</code></pre> <p>El -r, significa que aquest controller s'usar\u00e0 com a recurs, i laravel deixa els m\u00e8todes llestos per a ser omplits. De no agregar -r, es crear\u00e0 un controller totalment buit, la qual cosa ens donaria m\u00e9s treball, i a ning\u00fa li agrada treballar. El creem dins del directori api per separar-lo dels altres. Vegem com ens va quedar:</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\n\nclass MovieController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index()\n    {\n        //\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create()\n    {\n        //\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        //\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)\n    {\n        //\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit($id)\n    {\n        //\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id)\n    {\n        //\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)\n    {\n        //\n    }\n}\n</code></pre> <p>Ara crearem la ruta per a accedir al nostre controlador. Hem d'obrir l'arxiu routes/api.php i agregarem la ruta de la seg\u00fcent forma:</p> <pre><code>Route::resource('movie', 'Api\\MovieController');\n</code></pre> <p>Laravel configurar\u00e0 les rutes per als verbs http que vulguem usar, com GET, POST, PUT, PATCH i DELETE. Si seguim l'estructura definida en aquesta llista, no hi ha per on perdre's. Crearem una pelicula amb una petici\u00f3 POST, i despr\u00e9s demanarem una pelicula usant GET.  Primer, per a guardar dades, si ens fixem en la llista de rutes, el verb POST est\u00e0 associat amb api/movie, i amb el m\u00e8tode movie.store. Segon, per a mostrar les dades, el m\u00e8tode GET est\u00e0 associat amb api/movie/{movie}, i amb el m\u00e8tode movie.show.</p> <pre><code>public function store(Request $request)\n{\n    $movie = new Movie();\n    $movie-&gt;fill($request-&gt;toArray());\n    $movie-&gt;save();\n}\n\npublic function show($id)\n{\n    //Solicitamos al modelo el Pokemon con el id solicitado por GET.\n    return Movie::where('id', $id)-&gt;get();\n}\n</code></pre> <p>I ara ho provem amb Postman:</p> <p></p> <p></p>"},{"location":"Antics/5.6.Laravel.html#autenticacio-installa-el-paquet-dautenticacio-api-passport","title":"Autenticaci\u00f3: Instal\u00b7la el paquet d'autenticaci\u00f3 API\u200a\u2014\u200aPassport","text":"<p>Aquest paquet \u00e9s fonamental ja que, com el seu nom l'indica, Laravel posseeix un sistema tradicional d'autenticaci\u00f3 per\u00f2, per al cas del desenvolupament d'una API, Laravel ofereix una cosa espec\u00edfica. Laravel Passport.</p> <p>Les APIs utilitzen t\u00edpicament tokens per a autenticar usuaris per\u00f2 no per a mantindre les sessions entre els requests. Laravel ajuda al fet que l'autenticaci\u00f3 a trav\u00e9s de la API siga molt simple amb Laravel Passport, sistema que proveeix una implementaci\u00f3 total de OAuth2 per a la teua aplicaci\u00f3 de Laravel.</p> <p>Seguirem els passos indicats en la documentaci\u00f3 oficial</p> <ul> <li> <p>Comen\u00e7a la instal\u00b7laci\u00f3 a trav\u00e9s del manejador de paquets, composer, a trav\u00e9s del comando:</p> <pre><code>composer require laravel/passport\n</code></pre> </li> <li> <p>Realitza la migraci\u00f3</p> <pre><code>php artisan migrate\n</code></pre> </li> </ul> <p></p> <p>La migraci\u00f3 generar\u00e0 les taules que necessitar\u00e0 la teua aplicaci\u00f3 per a emmagatzemar els clients i els seus token d'acc\u00e9s. </p> <p></p>"},{"location":"Antics/5.6.Laravel.html#installacio-i-generacio-de-les-claus","title":"Instal\u00b7laci\u00f3 i generaci\u00f3 de les claus","text":"<p>Despr\u00e9s, has d'executar el comando passport:install. Aquest comando crear\u00e0 les claus d'encriptaci\u00f3 necess\u00e0ries per a generar els tokens d'acc\u00e9s. Addicionalment el comando crear\u00e0 el \u201cpersonal access\u201d i \u201cpassword grant\u201d dels clients que s'usaran per a generar els tokens d'acc\u00e9s:</p> <pre><code>php artisan passport:install\n</code></pre>"},{"location":"Antics/5.6.Laravel.html#configurar-passport","title":"Configurar Passport","text":"<p>Despr\u00e9s d'executar aquest comando, cal agregar el trait Laravel\\Passport\\HasApiTokens al model App\\User. Aquest Trait proveeix alguns m\u00e8todes d'ajuda al teu model que et permetran inspeccionar al token i scope dels usuaris autenticats:</p> <pre><code> &lt;?php\n\n namespace App;\n\n use Laravel\\Passport\\HasApiTokens;\n use Illuminate\\Notifications\\Notifiable;\n use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\n class User extends Authenticatable\n {\n    use HasApiTokens, Notifiable;\n\n     ...\n}\n</code></pre> <p>Despr\u00e9s el teu haur\u00e0s de cridar al m\u00e8tode Passport::routes dins del m\u00e8tode boot en la teua app/Providers/AuthServiceProvider. Aquest m\u00e8tode registrar\u00e0 les rutes necess\u00e0ries per a emetre tokens d'acc\u00e9s i revocar tokens d'acc\u00e9s, clients i tokens d'acc\u00e9s personal:</p> <pre><code>&lt;?php\n\nnamespace App\\Providers;\n\nuse Laravel\\Passport\\Passport;\nuse Illuminate\\Support\\Facades\\Gate;\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    protected $policies = [\n        'App\\Model' =&gt; 'App\\Policies\\ModelPolicy',\n    ];\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Passport::routes();\n    }\n}\n</code></pre> <p>Per a acabar en el teu arxiu de configuraci\u00f3 config/auth.php haur\u00e0s d'ajustar l'opci\u00f3 del driver de l'autenticaci\u00f3 de la api en el \u2018guards\u2019 a passport. Aix\u00f2 li indicar\u00e0 a la teua aplicaci\u00f3 que use el TokenGuard de Passport en autenticar les sol\u00b7licituds API entrants:</p> <pre><code>'guards' =&gt; [\n    'web' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'users',\n    ],\n\n    'api' =&gt; [\n        'driver' =&gt; 'passport',\n        'provider' =&gt; 'users',\n    ],\n ],\n</code></pre>"},{"location":"Antics/5.6.Laravel.html#creacio-de-les-rutes-de-la-api","title":"Creaci\u00f3 de les rutes de la API","text":"<p>A continuaci\u00f3 el que es requereix \u00e9s la creaci\u00f3 de les rutes necess\u00e0ries per a la teua api. Per a aix\u00f2 has d'ingressar al servei de rutes que Laravel proveeix en forma exclusiva per a una api routes/api.php</p> <pre><code>&lt;?php\nuse Illuminate\\Http\\Request;\n\nRoute::group(['prefix' =&gt; 'auth'], function () {\n    Route::post('login', 'Authcontroller@login');\n    Route::post('signup', 'Authcontroller@signup');\n\n    Route::group(['middleware' =&gt; 'auth:api'], function() {\n        Route::get('logout', 'Authcontroller@logout');\n        Route::get('user', 'Authcontroller@user');\n    });\n});\n</code></pre>"},{"location":"Antics/5.6.Laravel.html#creacio-del-controlador-per-a-lautenticacio","title":"Creaci\u00f3 del controlador per a l'autenticaci\u00f3","text":"<p>En visualitzar les rutes que hem generat m\u00e9s amunt podr\u00e0s notar que s'especifica un controlador que encara no hem creat. Per a aix\u00f2 haurem de crear aquest controlador a trav\u00e9s del comando:</p> <pre><code>php artisan make:controller AuthController\n</code></pre> <p>Despr\u00e9s, haurem de crear cadascun dels m\u00e8todes que estem cridant: signup / login / logout / user</p> <p>Per a aix\u00f2 escriurem dins del controlador el seg\u00fcent:</p> <pre><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\User;\nuse Carbon\\Carbon;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nclass AuthController extends Controller\n{\n    public function signup(Request $request)\n    {\n        $request-&gt;validate([\n            'name'     =&gt; 'required|string',\n            'email'    =&gt; 'required|string|email|unique:users',\n            'password' =&gt; 'required|string|confirmed',\n        ]);\n        $user = new User([\n            'name'     =&gt; $request-&gt;name,\n            'email'    =&gt; $request-&gt;email,\n            'password' =&gt; bcrypt($request-&gt;password),\n        ]);\n        $user-&gt;save();\n        return response()-&gt;json([\n            'message' =&gt; 'Successfully created user!'], 201);\n    }\n\n    public function login(Request $request)\n    {\n        $request-&gt;validate([\n            'email'       =&gt; 'required|string|email',\n            'password'    =&gt; 'required|string',\n            'remember_me' =&gt; 'boolean',\n        ]);\n        $credentials = request(['email', 'password']);\n        if (!Auth::attempt($credentials)) {\n            return response()-&gt;json([\n                'message' =&gt; 'Unauthorized'], 401);\n        }\n        $user = $request-&gt;user();\n        $tokenResult = $user-&gt;createToken('Personal Access Token');\n        $token = $tokenResult-&gt;token;\n        if ($request-&gt;remember_me) {\n            $token-&gt;expires_at = Carbon::now()-&gt;addWeeks(1);\n        }\n        $token-&gt;save();\n        return response()-&gt;json([\n            'access_token' =&gt; $tokenResult-&gt;accessToken,\n            'token_type'   =&gt; 'Bearer',\n            'expires_at'   =&gt; Carbon::parse(\n                $tokenResult-&gt;token-&gt;expires_at)\n                    -&gt;toDateTimeString(),\n        ]);\n    }\n\n    public function logout(Request $request)\n    {\n        $request-&gt;user()-&gt;token()-&gt;revoke();\n        return response()-&gt;json(['message' =&gt; \n            'Successfully logged out']);\n    }\n\n    public function user(Request $request)\n    {\n        return response()-&gt;json($request-&gt;user());\n    }\n}\n</code></pre> <p>Per a les proves, podem utilitzar Postman (t\u00e9 opci\u00f3 per a extensi\u00f3 en chrome o com a app). Per a la correcta utilitzaci\u00f3, cal configurar les seg\u00fcents dues cap\u00e7aleres:</p> <pre><code>Content-Type: application/json\nX-Requested-With: XMLHttpRequest\n</code></pre> <p> </p> <p>Creaci\u00f3 usuari</p> <p></p> <p>login</p> <p></p> <p>visualitzaci\u00f3 usuari</p> <p></p> <p>logout </p> <p></p> <p>Per a que la api de movies funcione quan estic autenticat cal possar-la dins del  grup de rutes autenticades en el fitxer de rutes api.php</p> <pre><code>Route::group(['prefix' =&gt; 'auth'], function () {\n    Route::post('login', 'Authcontroller@login');\n    Route::post('signup', 'Authcontroller@signup');\n\n    Route::group(['middleware' =&gt; 'auth:api'], function() {\n        Route::get('logout', 'Authcontroller@logout');\n        Route::get('user', 'Authcontroller@user');\n        Route::resource('movie', 'Api\\MovieController');\n    });\n});\n</code></pre> <p>Podeu aprofundir m\u00e9s en aquest enlla\u00e7</p>"},{"location":"Antics/5.7.Activitat.html","title":"5.7.Activitat","text":""},{"location":"Antics/5.7.Activitat.html#activitat-57-videoclub","title":"Activitat 5.7: VideoClub","text":"<p>Anem a crear l'api per al nostre videoclub</p>"},{"location":"Antics/5.7.Activitat.html#exercisi-1-completa-lapi-per-a-les-pellicules","title":"Exercisi 1 - Completa l'api per a les pel.licules","text":""},{"location":"Antics/5.7.Activitat.html#exercisi-2-crea-lapi-per-per-als-generes","title":"Exercisi 2 - Crea l'api per per als generes","text":""},{"location":"Antics/5.7.Activitat.html#exercisi-3-protegueix-les-rutes-mitjancant-laravel-passport","title":"Exercisi 3 - Protegueix les rutes mitjan\u00e7ant laravel passport","text":""},{"location":"Antics/5.7.Activitat.html#exercisi-4-crea-els-metodes-per-a-llogar-i-tornar-una-pellicula-mitjancant-lapi","title":"Exercisi 4 - Crea els metodes per a llogar i tornar una pel.licula mitjan\u00e7ant l'api.","text":""},{"location":"Antics/5.7.Activitat.html#exercisi-5-opcional-fes-que-el-botons-de-llogar-pellicula-i-tornar-pellicula-funcionen-mitjancant-lapi","title":"Exercisi 5 (Opcional) - Fes que el botons de llogar pel.licula i tornar pel.licula funcionen mitjan\u00e7ant l'api.","text":""},{"location":"Antics/5.Aplicacions_web_dina%CC%80miques_amb_AJAX.html","title":"Aplicacions web din\u00e0miques amb AJAX. Exemple d'una aplicaci\u00f3.","text":""},{"location":"Antics/5.Aplicacions_web_dina%CC%80miques_amb_AJAX.html#separacio-de-la-logica-de-negoci","title":"Separaci\u00f3 de la l\u00f2gica de negoci.","text":"<p>Un dels principals objectius en el disseny d'aplicacions ha de ser la reutilitzaci\u00f3 del codi. Per tal d'aconseguir-ho les aplicacions es divideixen en parts que es rel\u00b7lacionen entre si, per\u00f2 que tamb\u00e9 tenen sentit de forma independent.</p> <p>A xicoteta escala, es creen funcions i classes. A nivel de disseny es pot crear una arquitectura amb varios components desacoblats que s'ocupen de parts diferents de l'aplicaci\u00f3.</p> <p>En els exemples realitzats fins ara la l\u00f2gica de negoci i la presentaci\u00f3 estan barrejats. Per a millorar esta situaci\u00f3 el primer pas seria separar l'eixida en funcions que se n'ocupen en exclusiva, i encara millor utilitzar una llibreria de plantilles.</p> <p>Altra cosa que podriem fer \u00e9s portar la l\u00f2gica de la presentaci\u00f3 al client (p.e: javascript), i aix\u00ed el client realitza peticions al servidor i mostrar les dades rebudes.</p> <p>AJAX \u00e9s una t\u00e8cnica de disseny d'aplicacions que es basa en fer peticions al servidor des de Javascript. En els capitols anterior l'eixida HTML es genera integrament en el servidor. En AJAX el servidor torna soles les dades que cal mostrar i el Javascript actualitza la p\u00e0gina segons les dades rebudes. D'esta manera desacoblem la l\u00f2gica del negoci de la presentaci\u00f3 i de rebot aconseguim:</p> <ul> <li>El codi \u00e9s m\u00e9s f\u00e0cil de mantenir.</li> <li>El codi \u00e9s pot reutilitzar en altres aplicacions (m\u00f2bils)</li> <li>Es pot treballar en les dues parts al mateix temps.</li> </ul>"},{"location":"Antics/5.Aplicacions_web_dina%CC%80miques_amb_AJAX.html#obtencio-remota-dinformacio","title":"Obtenci\u00f3 remota d'informaci\u00f3","text":"<p>Fins ara, s'ha vist que es sol\u00b7licita una p\u00e0gina al servidor quan:</p> <ul> <li>S'accedeix a una p\u00e0gina introdu\u00efnt una URL en el navegador.</li> <li>Al seguir un enlla\u00e7.</li> <li>A l'enviar un formulari.</li> <li>Com a conseq\u00fc\u00e8ncia d'una redirecci\u00f3.</li> </ul> <p>En tots els casos, el navegador canvia el contingut que est\u00e0 mostrant amb la resposta que obt\u00e8 del servidor, condicionant el disseny de les p\u00e0gines.</p> <p>Es possible superar aquesta limitaci\u00f3 utilitzant Javascript i AJAX. Per exemple, \u00e9s possible que un script puga consultar noticies i mostrar-les sense haver de recarregar la p\u00e0gina.</p> <p>L'element central d'AJAX \u00e9s l'objecte XMLHttpRequest, que presenta una petici\u00f3 al servidor sense que la resposta es mostre autom\u00e0ticament com una nova p\u00e0gina en el navegador, sino que la processa el Javascript.</p> <p>Les peticions poden ser s\u00edncrones o as\u00edncrones i formen part del m\u00f2dul de Client.</p>"},{"location":"Antics/5.Aplicacions_web_dina%CC%80miques_amb_AJAX.html#rest-api","title":"REST API.","text":"<p>Quan es produeix una petici\u00f3 AJAX per part del client, se li ha de respondre. D'a\u00e7\u00f2 s'encarrega una part de la nostra web, que sol anomenar-se API ( Application Programming Interface), que s\u00f3n una s\u00e8rie de regles que permeten a una part del software parlar amb un altra. Esta s\u00e8rie de regles poden incloure operacions de creaci\u00f3, lectura, modificat o esborrat.</p> <p>REST fa refer\u00e8ncia a un concepte d'arquitectura per a gestionar la informaci\u00f3 en internet, basat en una represtaci\u00f3 dels recursos sense estat, i que se solen representar en JSON.   </p> <p>REST API tamb\u00e9 pot ser utilitzat per per qualsevol aplicaci\u00f3 que puga connectar-se a Internet.</p> <p>Anem a crear una API per gestionar les categories i els productes de la nostra web anterior. Per a fer-ho haurem de generar la resposta en format json, per a quatre possibles peticions (GET,POST,PUT,DELETE). Les diferenciarem pel m\u00e8tode amb que s'efectua la petici\u00f3 amb la variable $_SERVER[\"REQUEST__METHOD\"].</p> <p>En el cas de GET acceptarem un par\u00e0metre id i en eixe cas tornarem el producte en q\u00fcesti\u00f3 i si no hi ha par\u00e0metre els tornarem tots.</p> <p>En el cas de POST inserirem en la BD un nou registre amb els par\u00e0matres passats.</p> <p>En el cas de PUT acceptarem un par\u00e0metre id que ens indicar\u00e0 la clau de l'element a modificar amb els par\u00e0metres que li passem.</p> <p>En el cas de DELETE acceptarem un par\u00e0metre id amb l'element a esborrar.</p> <p>Creariem una carpeta api dins de public, i un fixer per cada taula. Una primera aproximaci\u00f3 per a la taula products seria aquesta:</p> <p>/api/product.php</p> <pre><code>&lt;?php\n// required headers\nheader(\"Access-Control-Allow-Origin: *\");\nheader(\"Content-Type: application/json; charset=UTF-8\");\nheader(\"Access-Control-Allow-Methods: POST,PUT,DELETE,GET\");\nheader(\"Access-Control-Max-Age: 3600\");\nheader(\"Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\");\n\nrequire $_SERVER['DOCUMENT_ROOT'].'/../config/load.php';\nuse App\\Product;\n\n\nswitch ($_SERVER['REQUEST_METHOD']) {\n    case 'GET':\n        if (isset($_GET['id']))\n            $products = Product::getbyId($_GET['id']);\n        else\n            $products = Product::getAll();\n        if ($products) {\n            http_response_code(200);\n            echo json_encode($products);\n            exit();\n        }\n        http_response_code(404);\n        echo json_encode(array(\"message\" =&gt; \"No products found.\"));\n        break;\n    case 'POST':\n        $data = json_decode(file_get_contents(\"php://input\"), true);\n        $product = new Product($data);\n\n        if ($product-&gt;save()) {\n            http_response_code(200);\n            echo json_encode($product-&gt;id);\n            exit();\n        }\n        http_response_code(404);\n        echo json_encode(array(\"message\" =&gt; \"No Inserit\"));\n        break;\n    case 'PUT';\n        $data = json_decode(file_get_contents(\"php://input\"), true);\n        $product = new Product($_GET['id']);\n        foreach ($data as $key =&gt; $value) {\n            $product-&gt;$key = $value;\n        }\n\n        if ($product-&gt;save()) {\n            http_response_code(200);\n            echo json_encode($product-&gt;id, true);\n            exit();\n        }\n        http_response_code(404);\n        echo json_encode(array(\"message\" =&gt; \"No Inserit\"));\n        break;\n    case 'DELETE':\n        if (isset($_GET['id'])) {\n            $result = Product::deletebyId($_GET['id']);\n            if ($result) {\n                http_response_code(200);\n                echo json_encode(array(\"message\" =&gt; \"Esborrat satisfactori.\"));\n                exit();\n            }\n        }\n        http_response_code(404);\n        echo json_encode(array(\"message\" =&gt; \"No products found.\"));\n        break;\n}\n</code></pre> <p>I ja li podem fer peticions mitjan\u00e7ant un servei REST que podem instal\u00b7lar en el nostre navegador.</p> <p>Est\u00e0 soluci\u00f3 ens obliga a copiar un codi pr\u00e0cticament similar en totes les taules a modificar, aix\u00ed que una possile soluci\u00f3 seria crear una funci\u00f3 en myHelpers per a tractar les peticions i des de cada fixer cridar a eixa funci\u00f3 de la seg\u00fcent manera:</p> <p>myHelpers.php</p> <pre><code>function response($method,$class){\n    switch ($method) {\n        case 'GET':\n            if (isset($_GET['id']))\n                $elements = $class::getbyId($_GET['id']);\n            else\n                $elements = $class::getAll();\n            if ($elements) {\n                http_response_code(200);\n                echo json_encode($elements);\n                exit();\n            }\n            http_response_code(404);\n            return json_encode(array(\"message\" =&gt; \"No products found.\"));\n            break;\n        case 'POST':\n            $data = json_decode(file_get_contents(\"php://input\"), true);\n            $element = new $class($data);\n\n            if ($element-&gt;save()) {\n                http_response_code(200);\n                echo json_encode($element-&gt;id);\n                exit();\n            }\n            http_response_code(404);\n            return json_encode(array(\"message\" =&gt; \"No Inserit\"));\n            break;\n        case 'PUT';\n            $data = json_decode(file_get_contents(\"php://input\"), true);\n            $element = new $class($_GET['id']);\n            foreach ($data as $key =&gt; $value) {\n                $element-&gt;$key = $value;\n            }\n\n            if ($element-&gt;save()) {\n                http_response_code(200);\n                echo json_encode($element-&gt;id, true);\n                exit();\n            }\n            http_response_code(404);\n            return json_encode(array(\"message\" =&gt; \"No Inserit\"));\n            break;\n        case 'DELETE':\n            if (isset($_GET['id'])) {\n                $result = $class::deletebyId($_GET['id']);\n                if ($result) {\n                    http_response_code(200);\n                    echo json_encode(array(\"message\" =&gt; \"Esborrat satisfactori.\"));\n                    exit();\n                }\n            }\n            http_response_code(404);\n            return json_encode(array(\"message\" =&gt; \"No products found.\"));\n            break;\n    }\n}\n</code></pre> <p>/api/product.php</p> <pre><code>&lt;?php\n// required headers\nheader(\"Access-Control-Allow-Origin: *\");\nheader(\"Content-Type: application/json; charset=UTF-8\");\nheader(\"Access-Control-Allow-Methods: POST,PUT,DELETE,GET\");\nheader(\"Access-Control-Max-Age: 3600\");\nheader(\"Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\");\n\nrequire $_SERVER['DOCUMENT_ROOT'].'/../config/load.php';\n\n\n\necho response($_SERVER['REQUEST_METHOD'],'App\\\\Product');\n</code></pre> <p>A la funci\u00f3 se li passa el m\u00e8tode i la classe on fer la petici\u00f3. Seria encara millor si passarem la funci\u00f3 del myHelpers a EntidadBase.php, per aix\u00ed quede m\u00e9s clar el codi</p> <p>EntidadBase.php</p> <pre><code>public static function response($method){\n        $class = get_called_class();\n        switch ($method) {\n            case 'GET':\n                if (isset($_GET['id']))\n                    $elements = static::getbyId($_GET['id']);\n                else\n                    $elements = static::getAll();\n                if ($elements) {\n                    http_response_code(200);\n                    echo json_encode($elements);\n                    exit();\n                }\n                http_response_code(404);\n                return json_encode(array(\"message\" =&gt; \"No products found.\"));\n                break;\n            case 'POST':\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n                $element = new $class($data);\n\n                if ($element-&gt;save()) {\n                    http_response_code(200);\n                    echo json_encode($element-&gt;id);\n                    exit();\n                }\n                http_response_code(404);\n                return json_encode(array(\"message\" =&gt; \"No Inserit\"));\n                break;\n            case 'PUT';\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n                $element = new $class($_GET['id']);\n                foreach ($data as $key =&gt; $value) {\n                    $element-&gt;$key = $value;\n                }\n\n                if ($element-&gt;save()) {\n                    http_response_code(200);\n                    echo json_encode($element-&gt;id, true);\n                    exit();\n                }\n                http_response_code(404);\n                return json_encode(array(\"message\" =&gt; \"No Inserit\"));\n                break;\n            case 'DELETE':\n                if (isset($_GET['id'])) {\n                    $result = static::deletebyId($_GET['id']);\n                    if ($result) {\n                        http_response_code(200);\n                        echo json_encode(array(\"message\" =&gt; \"Esborrat satisfactori.\"));\n                        exit();\n                    }\n                }\n                http_response_code(404);\n                return json_encode(array(\"message\" =&gt; \"No products found.\"));\n                break;\n        }\n    }\n</code></pre> <p>product.php</p> <pre><code>&lt;?php\n// required headers\nheader(\"Access-Control-Allow-Origin: *\");\nheader(\"Content-Type: application/json; charset=UTF-8\");\nheader(\"Access-Control-Allow-Methods: POST,PUT,DELETE,GET\");\nheader(\"Access-Control-Max-Age: 3600\");\nheader(\"Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\");\n\nrequire $_SERVER['DOCUMENT_ROOT'].'/../config/load.php';\n\n\nuse App\\Product;\n\necho Product::response($_SERVER['REQUEST_METHOD']);\n</code></pre> <p>Podriem continuar millorant la nostra API, per\u00f2 \u00e9s suficient per entendre el funcionament.</p>"},{"location":"Antics/6.1.Activitat.html","title":"6.1.Activitat","text":""},{"location":"Antics/6.1.Activitat.html#activitat-61","title":"Activitat 6.1","text":"<p>Tracteu d'adaptar el vostre projecte de php per a fer-ho en laravel. Comen\u00e7arem en el mateix ordre que l'exemple del videoclub.</p> <p>Crea un nou projecte en laravel</p> <p><pre><code>laravel new nom_projecte\n</code></pre> i dins del directori principal creeu el .env</p> <p><pre><code>cd nom_projecte\ncp .env.example .env\n</code></pre> i creeu la clau de seguretat</p> <pre><code>php artisan key:generate\n</code></pre> <p>configureu el servidor per tal de que responga el domini i el /etc/host de la maquina. En homestead</p> <pre><code>serve domini.my /home/vagrant/code/nom_domini/public\n</code></pre>"},{"location":"Antics/6.1.Activitat.html#exercici-1-definicio-de-les-rutes","title":"Exercici 1 - Definici\u00f3 de les rutes","text":"<p>Definix les rutes de la teua aplicaci\u00f3 (fitxer web.php). Per a comen\u00e7ar simplement indicarem que les rutes retornen una cadena (aix\u00ed podrem comprovar que s'han creat correctament).  Per a comprovar que les rutes s'hagen creat correctament utilitza el comando de  artisan que retorna un llistat de rutes i a m\u00e9s prova tamb\u00e9 les rutes en el navegador.</p> <p><pre><code>php artisan route:list\n</code></pre> </p>"},{"location":"Antics/6.1.Activitat.html#exercici-2-layout-principal-de-les-vistes-amb-bootstrap","title":"Exercici 2 -  Layout principal de les vistes amb  Bootstrap","text":"<p>Instal.la el bootstrap</p> <p><pre><code>composer require laravel/ui\nphp artisan ui bootstrap\nnpm install\nnpm run-dev\n</code></pre> Adapta una plantilla per a la teua web a partir d'esta</p> <pre><code>&lt;!DOCTYPE html&gt;\n    &lt;html lang=\"es\"&gt;\n      &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n        &lt;!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags --&gt;\n        &lt;title&gt;Tu proyecto&lt;/title&gt;\n        &lt;meta name=\"csrf-token\" content=\"{{ csrf_token() }}\"&gt;\n        &lt;!-- Bootstrap --&gt;\n         &lt;link href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"&gt;\n      &lt;/head&gt;\n      &lt;body&gt;\n        @include('partials.navbar')\n        &lt;div id='app' class=\"container\"&gt; @yield('content')&lt;/div&gt;\n\n        &lt;!-- Scripts --&gt;\n        &lt;script src=\"{{ asset('js/app.js') }}\" &gt;&lt;/script&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre> <p>Ac\u00ed tenim:</p> <ul> <li>el bootstrap incl\u00f3s </li> <li>una barra de navegaci\u00f3 per definir (on possaria el men\u00fa). Llevau si no cal.</li> <li>un espai que definix cada vista (content)</li> </ul>"},{"location":"Antics/6.1.Activitat.html#exercici-3-crea-la-resta-de-vistes","title":"Exercici 3 - Crea la resta de vistes","text":"<p>En aquest exercici anem acabar una primera versi\u00f3 estable de la web. En primer lloc crearem les vistes associades a cada ruta, les quals hauran d'estendre del  layout que hem fet en l'exercici anterior i mostrar (en la secci\u00f3 de  content del  layout) el codi html que tenieu en cada p\u00e0gina de la vostra web. Lleveu el codi php que puga haver-hi. En general totes les vistes tindran un codi similar al seg\u00fcent (variant \u00fanicament la secci\u00f3  content):</p> <pre><code>@extends('layouts.master')\n@section('content')\n    &lt;table&gt;&lt;/table&gt;\n@stop\n</code></pre> <p>Per a organitzar millor les vistes les podeu agrupar en  sub-carpetes dins de la carpeta  resources/views:</p> <ul> <li>canvieu el fitxer de rutes per a que apunten a les vistes:</li> </ul> <p>web.php</p> <p><pre><code>    Route::get('/', function () { return view('home');});\n</code></pre> * crea el navbar.blade.php amb el menu o cap\u00e7alera de la teua web o </p>"},{"location":"Antics/6.1.Activitat.html#exercici-4-crea-les-proves","title":"Exercici 4 - Crea les proves","text":"<p>Crea un fitxer de proves en la consola del  artisan</p> <pre><code>php artisan make:test BasicTest\n</code></pre> <p>Crea proves per a comprobrar que van les vistes:</p> <pre><code>public function testLoadHomePage(){ \n    $this-&gt;get('/')-&gt;assertStatus(200)-&gt;assertSee('Pantalla principal');\n}\n</code></pre>"},{"location":"Antics/6.1.Solucions.html","title":"6.1.Solucions","text":""},{"location":"Antics/6.1.Solucions.html#solucions-laravel-entrega-1","title":"Solucions Laravel (entrega 1)","text":""},{"location":"Antics/6.1.Solucions.html#exercisi-1-definicio-de-les-rutes","title":"Exercisi 1 - Definici\u00f3 de les rutes","text":"<pre><code>Route::get('/', function () { return 'Pagina principal';});\nRoute::get('login', function () { return 'Login usuari';});\nRoute::get('logout', function () { return 'Logout usuari';});\nRoute::get('catalog', function () { return 'Llistat pel.licules';});\nRoute::get('catalog/show/{id}', function () { return \"Vista detall pel.licula $id\";});\nRoute::get('catalog/create', function () { return 'Afegir pel.licula';});\nRoute::get('catalog/edit/{id}', function () {return \"Modificar pel.licula $id\";});\n</code></pre>"},{"location":"Antics/6.1.Solucions.html#exercisi-2-layout-principal-de-les-vistes-amb-bootstrap","title":"Exercisi 2 -  Layout principal de les vistes amb  Bootstrap","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags --&gt;\n    &lt;title&gt;Video Club&lt;/title&gt;\n    &lt;meta name=\"csrf-token\" content=\"{{ csrf_token() }}\"&gt;\n    &lt;!-- Bootstrap --&gt;\n     &lt;link href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    @include('partials.navbar')\n    &lt;div id='app' class=\"container\"&gt; @yield('content')&lt;/div&gt;\n\n    &lt;!-- Scripts --&gt;\n    &lt;script src=\"{{ asset('js/app.js') }}\" &gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Antics/6.1.Solucions.html#exercisi-3-crear-la-resta-de-vistes","title":"Exercisi 3 - Crear la resta de vistes","text":""},{"location":"Antics/6.1.Solucions.html#fitxer-de-rutes","title":"Fitxer de rutes","text":"<pre><code>Route::get('/', function () { return view('home');});\nRoute::get('login', function () {return view('login');});\nRoute::get('logout', function () { return 'Logout usuari';});\nRoute::get('catalog', function () { return view('index');});\nRoute::get('catalog/show/{id}', function ($id) { return view('show',['pelicula'=&gt;$id]);});\nRoute::get('catalog/create', function () { return view('create');});\nRoute::get('catalog/edit/{id}', function ($id) {return view('edit',['pelicula' =&gt;$id]);});\n</code></pre>"},{"location":"Antics/6.1.Solucions.html#exemple-vista-editblade","title":"Exemple vista edit.blade","text":"<pre><code>@extends('layouts.master')\n@section('content')\n    Editar pel.licula id {{$pelicula}}\n@stop\n</code></pre>"},{"location":"Antics/6.1.Solucions.html#exercisi-4-crear-les-proves","title":"Exercisi 4 - Crear les proves","text":"<pre><code>...\n\nclass BasicTest extends TestCase\n{\n    public function testLoadHomePage(){ \n        $this-&gt;get('/')-&gt;assertStatus(200)-&gt;assertSee('Pantalla principal');\n    }\n    public function testLoadCatalogPage(){ \n        $this-&gt;get('/catalog')-&gt;assertStatus(200)-&gt;assertSee('Catalogo');\n    }\n    public function testLoadCreatePage(){ \n        $this-&gt;get('/catalog/create')-&gt;assertStatus(200)-&gt;assertSee('Crear pel.licula');\n    }\n    public function testLoadEditPage(){ \n        $this-&gt;get('/catalog/edit/2')-&gt;assertStatus(200)-&gt;assertSee('Editar pel.licula id 2');\n    }\n    public function testLoadShowPage(){ \n        $this-&gt;get('/catalog/show/2')-&gt;assertStatus(200)-&gt;assertSee('Mostrar pel.licula id 2');\n    }\n}\n</code></pre>"},{"location":"Antics/6.2.Activitat.html","title":"6.2.Activitat","text":""},{"location":"Antics/6.2.Activitat.html#activitat-62","title":"Activitat 6.2.","text":"<p>En els exercicis d'aquesta part anem a continuar amb el lloc web que portem. Primer afegirem els controladors i m\u00e8todes associats a cada ruta, i posteriorment tamb\u00e9 completarem les vistes usant formularis i el sistema de plantilles Blade.</p>"},{"location":"Antics/6.2.Activitat.html#exercici-1-controladors","title":"Exercici 1 - Controladors","text":"<p>Crea els controladors necessaris per a la teua aplicaci\u00f3 i genera les rutes. Fes que cada controlador cride a la vista corresponent. Si no tens dades per a mostrar la vista inventa-te'ls (passant-li un array amb les dades o algo aix\u00ed)</p>"},{"location":"Antics/6.2.Activitat.html#exercici-2-completar-les-vistes","title":"Exercici 2 - Completar les vistes","text":"<p>Adapta les teues vistes que tenies al blade i amb els par\u00e0metres que li passes des del controlador.</p>"},{"location":"Antics/6.2.Activitat.html#exercici-3-modifica-les-proves","title":"Exercici 3 \u2013 Modifica les proves","text":"<p>Perqu\u00e8 totes seguisquen funcionant.</p>"},{"location":"Antics/6.2.Solucions.html","title":"6.2.Solucions","text":""},{"location":"Antics/6.2.Solucions.html#solucions-laravel-entrega-2","title":"Solucions Laravel (entrega 2)","text":""},{"location":"Antics/6.2.Solucions.html#exercisi-1-controladors","title":"Exercisi 1 - Controladors","text":"<p>routes.php</p> <pre><code>Route::get('/','HomeController@getHome');\nRoute::get('login', function () {return view('login');});\nRoute::get('logout', function () { return 'Logout usuari';});\nRoute::get('catalog','CatalogController@getIndex');\nRoute::get('catalog/show/{id}', 'CatalogController@getShow');\nRoute::get('catalog/create','CatalogController@getCreate');\nRoute::get('catalog/edit/{id}','CatalogController@getEdit');\n</code></pre> <p>catalogController.php</p> <pre><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\n\nclass CatalogController extends Controller\n{\n    public function getIndex(){\n        return view('index');\n    }\n    public function getShow($id){\n        return view('show',['pelicula'=&gt;$id]);\n    }\n    public function getCreate(){\n        return view('create');\n    }\n    public function getEdit($id){\n        return view('edit',['pelicula' =&gt;$id]);\n    }\n}\n</code></pre> <p>homeController.php</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nclass HomeController extends Controller\n{\n    public function getHome()\n    {\n        return redirect()-&gt;action('Catalogcontroller@getindex');\n    }\n}\n</code></pre>"},{"location":"Antics/6.2.Solucions.html#exercisi-2-completant-les-vistes","title":"Exercisi 2 - Completant les vistes","text":"<p>homeController.php</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nclass HomeController extends Controller\n{\n    public function getHome(){\n        return redirect()-&gt;action('CatalogController@getIndex');\n    }\n}\n</code></pre> <p>catalogController.php</p> <pre><code>..\nprivate $arrayPeliculas = ...\n\npublic function getIndex(){\n    return view('index',['arrayPeliculas'=&gt;$this-&gt;arrayPeliculas]);\n}\npublic function getShow($id){\n    $pelicula = $this-&gt;arrayPeliculas[$id];\n    return view('show',compact('pelicula','id'));\n}\npublic function getCreate(){\n    return view('create');\n}\npublic function getEdit($id){\n    return view('edit',['pelicula' =&gt;$id]);\n}\n</code></pre> <p>show.blade.php</p> <pre><code>@extends('layouts.master')\n@section('content')\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-sm-4\"&gt;\n                    &lt;img src=\"{{$pelicula['poster']}}\" alt=\"{{$pelicula['title']}}\"/&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-sm-8\"&gt;\n                    &lt;h2&gt;{{$pelicula['title']}}&lt;/h2&gt;\n                    &lt;h4&gt;{{$pelicula['year']}}&lt;/h4&gt;\n                    &lt;h4&gt;{{$pelicula['director']}}&lt;/h4&gt;\n                    &lt;p&gt;&lt;strong&gt;Resumen: &lt;/strong&gt;{{$pelicula['synopsis']}}&lt;/p&gt;\n                    &lt;p&gt;&lt;strong&gt;Estado: &lt;/strong&gt;Pel.l\u00edcula @if ($pelicula['rented'])  Actualment llogada @else disponible @endif&lt;/p&gt;\n                    &lt;p&gt;\n                       @if ($pelicula['rented']) \n                        &lt;a href='' class=\"btn btn-info\"&gt;Tornar Pel.l\u00edcula&lt;/a&gt; \n                       @else \n                        &lt;a href='' class=\"btn btn-danger\"&gt;Llogar Pel.l\u00edcula&lt;/a&gt;\n                       @endif \n                       &lt;a href=\"\\catalog\\edit\\{{$id}}\" class=\"btn btn-warning\"&gt;&lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt;Editar Pel.l\u00edcula&lt;/a&gt;\n                       &lt;a href=\"\\catalog\" class=\"btn btn-default\"&gt;Tornar cat\u00e0leg&lt;/a&gt;\n                    &lt;/p&gt;\n        &lt;/div&gt; \n    &lt;/div&gt;\n@stop\n</code></pre> <p>create.blade.php</p> <pre><code>@extends('layouts.master')\n@section('content')\n&lt;div class=\"row\" style=\"margin-top:20px\"&gt;\n    &lt;div class=\"col-md-offset-3 col-md-6\"&gt;\n        &lt;div class=\"panel panel-default\"&gt;\n            &lt;div class=\"panel-heading\"&gt;\n                &lt;h3 class=\"panel-title text-center\"&gt;\n                    &lt;span class=\"glyphicon glyphicon-film\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                    Afegir pel.l\u00edcula\n                &lt;/h3&gt;\n            &lt;/div&gt;\n            &lt;div class=\"panel-body\" style=\"padding:30px\"&gt;\n                &lt;form method='POST'&gt;\n                    @csrf\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label for=\"title\"&gt;T\u00edtulo&lt;/label&gt;\n                        &lt;input type=\"text\" name=\"title\" id=\"title\" class=\"form-control\"&gt;\n                    &lt;/div&gt;\n\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label for='year'&gt;Any:&lt;/label&gt;\n                        &lt;input type='number' name='year' /&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label for='director'&gt;Director:&lt;/label&gt;\n                        &lt;input type='text' name='director' /&gt;\n                    &lt;/div&gt;\n\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label for='poster'&gt;Poster:&lt;/label&gt;\n                        &lt;input type='url' name='poster' /&gt;\n                    &lt;/div&gt;\n\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label for=\"synopsis\"&gt;Resumen&lt;/label&gt;\n                        &lt;textarea name=\"synopsis\" id=\"synopsis\" class=\"form-control\" rows=\"3\"&gt;&lt;/textarea&gt;\n                    &lt;/div&gt;\n\n                    &lt;div class=\"form-group text-center\"&gt;\n                        &lt;button type=\"submit\" class=\"btn btn-primary\" style=\"padding:8px 100px;margin-top:25px;\"&gt;\n                            Afegir pel.l\u00edcula\n                        &lt;/button&gt;\n                    &lt;/div&gt;\n                &lt;/form&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n@stop\n</code></pre> <p>edit.blade.php</p> <pre><code>@extends('layouts.master')\n@section('content')\n&lt;div class=\"row\" style=\"margin-top:20px\"&gt;\n    &lt;div class=\"col-md-offset-3 col-md-6\"&gt;\n        &lt;div class=\"panel panel-default\"&gt;\n            &lt;div class=\"panel-heading\"&gt;\n                &lt;h3 class=\"panel-title text-center\"&gt;\n                    &lt;span class=\"glyphicon glyphicon-film\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                    Modificar pel.l\u00edcula\n                &lt;/h3&gt;\n            &lt;/div&gt;\n            &lt;div class=\"panel-body\" style=\"padding:30px\"&gt;\n                &lt;form method='POST'&gt;\n                    @csrf\n                    @method('PUT')\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label for=\"title\"&gt;T\u00edtulo&lt;/label&gt;\n                        &lt;input type=\"text\" name=\"title\" id=\"title\" class=\"form-control\"&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label for='year'&gt;Any:&lt;/label&gt;\n                        &lt;input type='number' name='year' /&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label for='director'&gt;Director:&lt;/label&gt;\n                        &lt;input type='text' name='director' /&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label for='poster'&gt;Poster:&lt;/label&gt;\n                        &lt;input type='url' name='poster' /&gt;\n                    &lt;/div&gt;\n\n                    &lt;div class=\"form-group\"&gt;\n                        &lt;label for=\"synopsis\"&gt;Resumen&lt;/label&gt;\n                        &lt;textarea name=\"synopsis\" id=\"synopsis\" class=\"form-control\" rows=\"3\"&gt;&lt;/textarea&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"form-group text-center\"&gt;\n                        &lt;button type=\"submit\" class=\"btn btn-primary\" style=\"padding:8px 100px;margin-top:25px;\"&gt;\n                            Modificar pel.l\u00edcula\n                        &lt;/button&gt;\n                    &lt;/div&gt;\n                &lt;/form&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n@stop\n</code></pre>"},{"location":"Antics/6.2.Solucions.html#exercisi-3-modifica-les-proves","title":"Exercisi 3 \u2013 Modifica les proves","text":"<pre><code>class BasicTest extends TestCase\n{\n    public function testLoadHomePage(){ \n        $this-&gt;get('/')-&gt;assertStatus(302);\n    }\n    public function testLoadCatalogPage(){ \n        $this-&gt;get('/catalog')-&gt;assertStatus(200)-&gt;assertSee('Cat\u00e0leg');\n    }\n    public function testLoadCreatePage(){ \n        $this-&gt;get('/catalog/create')-&gt;assertStatus(200)-&gt;assertSee('Afegir pel.l\u00edcula');\n    }\n    public function testLoadEditPage(){ \n        $this-&gt;get('/catalog/edit/2')-&gt;assertStatus(200)-&gt;assertSee('Modificar pel.l\u00edcula');\n    }\n    public function testLoadShowPage(){ \n        $this-&gt;get('/catalog/show/2')-&gt;assertStatus(200)-&gt;assertSee('Editar Pel.l\u00edcula');\n    }\n}\n</code></pre>"},{"location":"Antics/6.3.Activitat.html","title":"6.3.Activitat","text":""},{"location":"Antics/6.3.Activitat.html#activitat-53","title":"Activitat 5.3","text":""},{"location":"Antics/6.3.Activitat.html#exercici-1-configuracio-de-la-base-de-dades-i-migracions","title":"Exercici 1 - Configuraci\u00f3 de la base de dades i migracions","text":"<p>Crea les migraciones per a la teua base de dades. Pots fer-ho de manera directa o indirecta.</p>"},{"location":"Antics/6.3.Activitat.html#exercici-2-model-de-dades","title":"Exercici 2 - Model de dades","text":"<p>Crea el models associats a la teua base de dades. Has de tindre en compte que la taula resultant d'una relaci\u00f3 M:M, no te un model associat(en principi) </p>"},{"location":"Antics/6.3.Activitat.html#exercici-3-llavors","title":"Exercici 3 - Llavors","text":"<p>Emplena alguna de les taules en dades de prova, p.e : usuaris, categories, partits pol\u00edtics.  </p>"},{"location":"Antics/6.3.Activitat.html#exercici-4-us-de-la-base-de-dades","title":"Exercici 4 - \u00das de la base de dades","text":"<p>Transforma la teua aplicaci\u00f3 per a que obtinga les dades de la base de dades.</p>"},{"location":"Antics/6.3.Activitat.html#exercici-5-proves","title":"Exercici 5 \u2013 Proves","text":"<p>Comprovar que les proves segueixen passant.</p>"},{"location":"Antics/6.3.Solucions.html","title":"6.3.Solucions","text":""},{"location":"Antics/6.3.Solucions.html#solucions-laravel-entrega-3","title":"Solucions Laravel (entrega 3)","text":""},{"location":"Antics/6.3.Solucions.html#exercisi-1-configuracio-de-la-base-de-dades-i-migracions","title":"Exercisi 1 - Configuraci\u00f3 de la base de dades i migracions","text":"<p>.env</p> <pre><code>...\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=videoclub\nDB_USERNAME=homestead\nDB_PASSWORD=secret\n...\n</code></pre> <p></p> <p>create_movies_table.php</p> <pre><code>&lt;?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateMoviesTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('movies', function (Blueprint $table) {\n            $table-&gt;increments('id');\n            $table-&gt;string('title');\n            $table-&gt;string('year',8);\n            $table-&gt;string('director',64);\n            $table-&gt;string('poster');\n            $table-&gt;boolean('rented')-&gt;default(false);\n            $table-&gt;text('synopsis');\n            $table-&gt;timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('movies');\n    }\n}\n</code></pre>"},{"location":"Antics/6.3.Solucions.html#exercisi-2-model-de-dades","title":"Exercisi 2 - Model de dades","text":""},{"location":"Antics/6.3.Solucions.html#exercisi-3-llavors","title":"Exercisi 3 - Llavors","text":"<pre><code>public function run()\n    {\n        self::seedCatalog();\n        $this-&gt;command-&gt;info('Taula cat\u00e0leg inicialitzada amb dades!');\n    }\n\n\nprivate function seedCatalog()\n{\n    DB::table('movies')-&gt;delete();\n\n    foreach ($this-&gt;arrayPeliculas as $pelicula) {\n        $p = new Movie;\n        $p-&gt;title = $pelicula['title'];\n        $p-&gt;year = $pelicula['year'];\n        $p-&gt;director = $pelicula['director'];\n        $p-&gt;poster = $pelicula['poster'];\n        $p-&gt;rented = $pelicula['rented'];\n        $p-&gt;synopsis = $pelicula['synopsis'];\n        $p-&gt;save();\n    }\n}\n</code></pre>"},{"location":"Antics/6.3.Solucions.html#exercisi-4-us-de-la-base-de-dades","title":"Exercisi 4 - \u00das de la base de dades","text":"<p>catalogController.php</p> <pre><code>use Illuminate\\Http\\Request;\nuse App\\Movie;\n\nclass CatalogController extends Controller\n{\n    public function getIndex(){\n        $arrayPeliculas = Movie::all();\n        return view('index',compact('arrayPeliculas'));\n    }\n    public function getShow($id){\n        $pelicula = Movie::findOrFail($id);\n        return view('show',compact('pelicula'));\n    }\n    public function getCreate(){\n        return view('create');\n    }\n    public function getEdit($id){\n        $pelicula = Movie::findOrFail($id);\n        return view('edit',compact('pelicula'));\n    }\n}\n</code></pre> <p>index.blade.php</p> <pre><code>@extends('layouts.master')\n@section('content')\n&lt;h2 &gt;Cat\u00e0leg&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n    @foreach( $arrayPeliculas as $pelicula )        \n        &lt;div class=\"col-xs-6 col-sm-4 col-md-3 text-center\"&gt;\n            &lt;a href=\"{{ url('/catalog/show/'.$pelicula-&gt;id) }}\"&gt;\n                &lt;img src=\"{{$pelicula['poster']}}\" style=\"height:200px\"/&gt; \n                &lt;h4 style=\"min-height:45px;margin:5px 0 10px 0\"&gt;\n                {{$pelicula-&gt;title}} &lt;/h4&gt;\n            &lt;/a&gt;\n        &lt;/div&gt; \n    @endforeach\n    &lt;/div&gt;  \n@stop\n</code></pre> <p>show.blade.php</p> <pre><code>@extends('layouts.master')\n@section('content')\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-sm-4\"&gt;\n                    &lt;img src=\"{{$pelicula-&gt;poster}}\" alt=\"{{$pelicula-&gt;title}}\"/&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-sm-8\"&gt;\n                    &lt;h2&gt;{{$pelicula-&gt;title}}&lt;/h2&gt;\n                    &lt;h4&gt;{{$pelicula-&gt;year}}&lt;/h4&gt;\n                    &lt;h4&gt;{{$pelicula-&gt;director}}&lt;/h4&gt;\n                    &lt;p&gt;&lt;strong&gt;Resumen: &lt;/strong&gt;{{$pelicula-&gt;synopsis}}&lt;/p&gt;\n                    &lt;p&gt;&lt;strong&gt;Estado: &lt;/strong&gt;Pel.l\u00edcula @if ($pelicula-&gt;rented)  Actualment llogada @else disponible @endif&lt;/p&gt;\n                    &lt;p&gt;\n                       @if ($pelicula-&gt;rented) \n                        &lt;a href='' class=\"btn btn-info\"&gt;Tornar Pel.l\u00edcula&lt;/a&gt; \n                       @else \n                        &lt;a href='' class=\"btn btn-danger\"&gt;Llogar Pel.l\u00edcula&lt;/a&gt;\n                       @endif \n                       &lt;a href=\"\\catalog\\edit\\{{$pelicula-&gt;id}}\" class=\"btn btn-warning\"&gt;&lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt;Editar Pel.l\u00edcula&lt;/a&gt;\n                       &lt;a href=\"\\catalog\" class=\"btn btn-default\"&gt;Tornar cat\u00e0leg&lt;/a&gt;\n                    &lt;/p&gt;\n        &lt;/div&gt; \n    &lt;/div&gt;\n@stop\n</code></pre>"},{"location":"Antics/6.4.Activitat.html","title":"6.4.Activitat","text":""},{"location":"Antics/6.4.Activitat.html#activitat-64","title":"Activitat 6.4:","text":""},{"location":"Antics/6.4.Activitat.html#exercici-sistema-dautenticacio","title":"Exercici  - Sistema d'autenticaci\u00f3","text":"<p>Crea el sistema d'autenticaci\u00f3 de la teua aplicaci\u00f3 i proteguix les rutes que necessites.</p>"},{"location":"Antics/6.4.Activitat.html#exercici-proves","title":"Exercici  \u2013 Proves","text":"<p>Fes que totes les proves tornen a funcionar.</p>"},{"location":"Antics/6.4.Solucions.html","title":"6.4.Solucions","text":""},{"location":"Antics/6.4.Solucions.html#solucions-videoclub-entrega-4","title":"Solucions VideoClub (entrega 4)","text":""},{"location":"Antics/6.4.Solucions.html#exercici-2-seeder-dusuaris","title":"Exercici 2 - Seeder d'usuaris","text":"<p>database/seeds/DatabaseSeeder.php</p> <pre><code>...\n   public function run()\n    {\n        self::seedCatalog();\n        self::seedUsers();\n        $this-&gt;command-&gt;info('Taula cat\u00e0leg inicialitzada amb dades!');\n    }\n\n    private function seedUsers()\n    {\n        DB::table('users')-&gt;delete();\n        $u1 = new User;\n        $u1-&gt;name = 'Ignasi Gomis';\n        $u1-&gt;email = 'igomis@cipfpbatoi.es';\n        $u1-&gt;password = bcrypt('1234');\n        $u1-&gt;save();\n        $u2 = new User;\n        $u2-&gt;name = 'Fernando Gomis';\n        $u2-&gt;email = 'fgomis@cipfpbatoi.es';\n        $u2-&gt;password = bcrypt('4321');\n        $u2-&gt;save();\n\n    }\n    private function seedCatalog(){\n...\n</code></pre> <p></p>"},{"location":"Antics/6.4.Solucions.html#exercici-3-sistema-dautenticacio","title":"Exercici 3 - Sistema d'autenticaci\u00f3","text":"<p>** web.php **</p> <pre><code>Auth::routes();\nRoute::get('/','HomeController@getHome');\nRoute::group(['middleware'=&gt;'auth'],function(){\n    Route::get('/logout','Auth\\Logincontroller@logout');\n    Route::get('catalog','CatalogController@getIndex');\n    Route::get('catalog/show/{id}', 'CatalogController@getShow');\n    Route::get('catalog/create','CatalogController@getCreate');\n    Route::post('catalog/create','CatalogController@postCreate');\n    Route::get('catalog/edit/{id}','CatalogController@getEdit');\n    Route::put('catalog/edit/{id}','CatalogController@putEdit');\n});\n</code></pre> <p></p> <p>** HomeController **</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass HomeController extends Controller\n{\n\n    public function getHome()\n    {\n        if (Auth::user())\n            return redirect()-&gt;action('CatalogController@getIndex');\n        else \n            return redirect('login');\n    }\n}\n</code></pre> <p>** CatalogController **</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Movie;\n\nclass CatalogController extends Controller\n{\n    public function getIndex(){\n        $arrayPeliculas = Movie::all();\n        return view('index',compact('arrayPeliculas'));\n    }\n    public function getShow($id){\n        $pelicula = Movie::findOrFail($id);\n        return view('show',compact('pelicula'));\n    }\n    public function getCreate(){\n        return view('create');\n    }\n    public function postCreate(Request $request){\n        $movie = new Movie();\n        $movie-&gt;title = $request-&gt;title;\n        $movie-&gt;year = $request-&gt;year;\n        $movie-&gt;director = $request-&gt;director;\n        $movie-&gt;poster = $request-&gt;poster;\n        $movie-&gt;synopsis = $request-&gt;synopsis;\n        $movie-&gt;save();\n        return redirect('/catalog');\n    }\n    public function getEdit($id){\n        $pelicula = Movie::findOrFail($id);\n        return view('edit',compact('pelicula'));\n    }\n    public function putEdit(Request $request,$id){\n        $movie = Movie::findOrFail($id);\n        $movie-&gt;title = $request-&gt;title;\n        $movie-&gt;year = $request-&gt;year;\n        $movie-&gt;director = $request-&gt;director;\n        $movie-&gt;poster = $request-&gt;poster;\n        $movie-&gt;synopsis = $request-&gt;synopsis;\n        $movie-&gt;save();\n        return redirect(\"/catalog/show/$id\");\n    }\n}\n</code></pre>"},{"location":"Antics/6.5.Activitat.html","title":"Activitat 5.5: VideoClub","text":"<p>En els exercicis d'aquesta secci\u00f3 anem a completar el projecte del videoclub utilitzant el component de styde per a modicar vistes i menu. Afegirem la funcionalitat per que un usuari puga llogar una pel.l\u00edcula.</p>"},{"location":"Antics/6.5.Activitat.html#exercisi-1-installa-el-component-styde","title":"Exercisi 1 - Instal.la el component styde","text":""},{"location":"Antics/6.5.Activitat.html#exercisi-2-refactorizar-el-formulari","title":"Exercisi 2 - Refactorizar el formulari","text":"<p>En primer lloc, anem a canviar el formulari 'create'. Substitu\u00efm tot el codi html per este que utilitza la classe Form dels components instal.lats. El formulari est\u00e0 associat est\u00e0 associat a un model i posse els camps que en fan falta. No cal possar el @csfr doncs es possa autom\u00e0ticament.</p> <pre><code> {!! Form::model('App\\Movie',['class'=&gt;'form-horizontal form-label-left','enctype'=&gt;\"multipart/form-data\"]) !!}\n    {!! Field::text('title') !!}\n    {!! Field::text('year') !!}\n    {!! Field::text('director') !!}\n    {!! Field::text('poster') !!}\n    {!! Field::textarea('synopsis') !!}\n    {!! Form::submit('Enviar',['class'=&gt;'btn btn-success','id'=&gt;'submit']) !!}\n{!! Form::close() !!}\n</code></pre> <ul> <li>Canvia, de la mateixa forma, el formulari de modificaci\u00f3, tenint en compte que si en conte de passar-li el model li passe un element del model, el valors s'afegisen al formulari.</li> </ul>"},{"location":"Antics/6.5.Activitat.html#exercisi-3-comprovar-les-dades-del-formulari","title":"Exercisi 3 - Comprovar les dades del formulari","text":"<p>Tots els camp son requerits. L'any ha de ser un n\u00famero major de 1900 i menor que l'any actual.</p>"},{"location":"Antics/6.5.Activitat.html#exercisi-4-refactoritzar-els-metodes-create-i-update","title":"Exercisi 4 - Refactoritzar els m\u00e8todes create i update","text":"<p>Anem a utilitzar l'assignament massiu per a omplir tots els camp a l'hora. Pots fer-ho declarant en el model la variable $fillable o la variable $guard</p> <p>Despr\u00e9s haur\u00e0s de substituir l'assignaci\u00f3 de tots els camps, en el metodes create i update, per l'instrucci\u00f3:</p> <pre><code>$movie-&gt;fill($request-&gt;toArray());\n</code></pre>"},{"location":"Antics/6.5.Activitat.html#exercisi-5-afegir-relacio-u-a-molts","title":"Exercisi 5 - Afegir relaci\u00f3 u a molts.","text":"<ul> <li> <p>Crea un taula, mitjan\u00e7ant una migraci\u00f3(create_genres_table) que es diga genres (gener\u00e8 en angl\u00e9s) ('id','titulo') </p> </li> <li> <p>Anem a crear una migraci\u00f3 alter_movies_table per afegir un camp (id_genre) i crear la clau for\u00e0nia amb genres.</p> <pre><code>&lt;?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass AlterMoviesTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('movies', function (Blueprint $table) {\n            $table-&gt;integer('id_genre')-&gt;unsigned()-&gt;nullable();\n            $table-&gt;foreign('id_genre')-&gt;references('id')-&gt;on('genres')-&gt;onUpdate('CASCADE')-&gt;onDelete('SET NULL');\n    });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('movies', function (Blueprint $table) {\n            $table-&gt;dropForeign('movies_id_genre_foreign');\n            $table-&gt;dropColumn('id_genre');\n        });\n    }\n</code></pre> <p>}</p> </li> <li> <p>Executa la migraci\u00f3 i comprova que tot s'ha executat correctament.</p> </li> <li>Emplena la taula Genres amb uns quants.</li> <li>Afegix el model Genre.</li> <li> <p>Afegix la rel.laci\u00f3 belongsTo al model Movie per vincular-la al model Genre.</p> <pre><code>public function Genero(){\n        return $this-&gt;belongsTo(Genre::class,'id_genre');\n    }\n</code></pre> </li> <li> <p>Afegix la rel.laci\u00f3 HasMany al model Genre.</p> </li> <li> <p>Per tal que en la vista es motre el titol del g\u00e8nere:</p> <pre><code>&lt;p&gt;&lt;strong&gt;Genere:&lt;/strong&gt;\n @if ($pelicula-&gt;Genero)  {{ $pelicula-&gt;Genero-&gt;titulo}} \n @else Desconocido\n @endif\n&lt;/p&gt;\n</code></pre> </li> </ul>"},{"location":"Antics/6.5.Activitat.html#exercisi-6-afegir-el-camp-genere-al-formulari","title":"Exercisi 6 - Afegir el camp G\u00e8nere al formulari.","text":"<p>Anem a utilitza el component d'Styde:</p> <pre><code>{!! Field::select('id_genre') !!}\n</code></pre> <p>que posarem a les vistes. Si a este component li passem un array de par\u00e0metres, es possar\u00e0 com a valors seleccionables:</p> <pre><code>{!! Field::select('id_genre',['terror','musical','thriller']) !!}\n</code></pre> <p>Tamb\u00e9 es pot declarar una funci\u00f3 en el model Movie per a que torne els valors.</p> <pre><code>public function getIdGenreOptions(){\n    return ['terror','musical','thriller']\n}\n</code></pre> <p>Per\u00f2 el que volem \u00e9s que els valor s'agafem de la taula Genres. Tal i com aix\u00ed:</p> <pre><code>public function getIdGenreOptions()\n{\n    return Genre::all()-&gt;toArray();\n}\n</code></pre> <p>Per\u00f2 a\u00e7o no acaba de funcionar perqu\u00e8 torna un array d'esta forma</p> <pre><code>array:2 [\u25bc\n  0 =&gt; array:2 [\u25bc\n    \"id\" =&gt; 1\n    \"titulo\" =&gt; \"Terror\"\n  ]\n  1 =&gt; array:2 [\u25bc\n    \"id\" =&gt; 2\n    \"titulo\" =&gt; \"Fant\u00e1stico\"\n  ]\n]\n</code></pre> <p>per\u00f2 per a que funcionara hauria de ser d'aquesta altra</p> <pre><code>array:2 [\u25bc\n  1 =&gt; \"Terror\"\n  2 =&gt; \"Fant\u00e1stico\"\n  ]\n]\n</code></pre> <p>Aix\u00ec que anem a fer una funci\u00f3 gen\u00e8rica php que donada una col.lecci\u00f3 d'objectes i dos camps del mateix, genere un array per a l'option.</p> <pre><code>function hazArray($elementos,'campo1','campo2')\n{\n    return $array\n}\n</code></pre> <p>i la cridariem de la seg\u00fcent forma:</p> <pre><code>public function getIdGenreOptions()\n{\n    return hazArray(Genre::all(),'id','titulo');\n}\n</code></pre> <p>De moment declara-la com a privada en el model per a provar que funciona.</p> <p>Nota: en Laravel, per a poder vore el valor d'una variable i para l'execuci\u00f3 del programa s'utilitza la funci\u00f3 dd($variable) </p> <p>Per\u00f2, esta funci\u00f3 ha de poser ser visible en tota la  aplicaci\u00f3. Per tal de aconseguir-ho anem a crear un fitxer on guardar les nostres funcions gen\u00e8riques.</p> <ul> <li>Crea una carpeta Helpers dins de app</li> <li>Crea un fitxer myHelpers dins d'aquesta carpeta.</li> <li>copia la funci\u00f3 hazArray</li> </ul> <p>Per a que les funcions d'aquest fitxer siguen visibles en l'aplicaci\u00f3 anem a crear un ServiceProvider i a registrar-lo:</p> <pre><code>php artisan make:provider HelperServiceProvider\n</code></pre> <p>Crear\u00e0 un fitxer en la carpeta Providers. L'editem per afegir el nostre Helper.</p> <pre><code>/**\n     * Register services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        require_once base_path() . '/app/Helpers/myHelpers.php';\n    }\n</code></pre> <p>I ara registrem el ServiceProvider en el fitxer config/app.php</p> <p>'providers' =&gt; [</p> <pre><code>    /*\n     * Laravel Framework Service Providers...\n     */\n    Illuminate\\Auth\\AuthServiceProvider::class,\n\n    .....\n\n    /*\n     * Package Service Providers...\n     */\n\n    /*\n     * Application Service Providers...\n     */\n    App\\Providers\\AppServiceProvider::class,\n    App\\Providers\\AuthServiceProvider::class,\n    // App\\Providers\\BroadcastServiceProvider::class,\n    App\\Providers\\EventServiceProvider::class,\n    App\\Providers\\RouteServiceProvider::class,\n    App\\Providers\\HelperServiceProvider::class,\n\n],\n</code></pre> <p>I com cada volta que toquen un fitxer de configuraci\u00f3 executem</p> <pre><code>php artisan config:cache\n</code></pre> <p>I tot ha de funcionar. Ja podem triar un g\u00e8nere en cada pel.licula.</p>"},{"location":"Antics/6.5.Activitat.html#exercisi-7-el-component-de-menu-styde","title":"Exercisi 7 - El component de menu styde.","text":"<p>Anem a fer el menu des d'un fitxer de text utilitzan el component de menu del paquet instal.lat</p> <p>Substitu\u00efm el navbar per :</p> <pre><code>&lt;nav class=\"navbar navbar-expand-md navbar-light navbar-laravel\"&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;a class=\"navbar-brand\" href=\"{{url('/')}}\"&gt;\n            &lt;span class=\"glyphicon glyphicon-tower\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n            Videoclub\n        &lt;/a&gt;\n        &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"{{ __('Toggle navigation') }}\"&gt;\n                &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n        &lt;/button&gt;\n        @if( Auth::check() )\n            {!! Menu::make(config('menu'), 'navbar-nav mr-auto') !!}\n        @endif\n    &lt;/div&gt;\n&lt;/nav&gt;\n</code></pre> <p>on config('menu') enlla\u00e7a en un fitxer que hem de crear en la carpeta config i de nom menu.php. Este haur\u00e0 de contindre:</p> <pre><code>&lt;?php\n\nreturn [\n    'catalogo' =&gt; ['url' =&gt; '/catalog'],\n    'nueva' =&gt; ['title' =&gt; 'Nueva Pel\u00edcula', 'url' =&gt; '/catalog/create'],\n    'logout' =&gt; ['title' =&gt; 'Cerrar Sesion' ,'url' =&gt; '/logout']\n];\n</code></pre> <p>Cal fer php artisan config:cache</p> <p>On estan les opcions de menu.</p>"},{"location":"Antics/6.5.Activitat.html#exercisi-8-completant-botons","title":"Exercisi 8 - Completant botons","text":"<p>En aquest exercici anem a afegir la funcionalitat dels botons de llogar, retornar i eliminar pel\u00b7l\u00edcules. En tots els casos haurem de crear una nova ruta, un nou m\u00e8tode en el controlador , actualitzar el boton en la vista i mostrar una notificaci\u00f3 despres de realitzar l'acci\u00f3. En la seg\u00fcent taula es mostra un resum de la nova ruta a afegir:</p> Ruta Tipus Controlador/Acci\u00f3 /catalog/rent/{id} PUT CatalogController@putRent /catalog/return/{id} PUT CatalogController@putReturn /catalog/delete/{id} DELETE CatalogController@deleteMovie <p>Aquests tres m\u00e8todes s\u00f3n similars al m\u00e8tode que ja hav\u00edem implementat abans per a editar les dades d'una pel.l\u00edcula. En el cas de putRent i putReturn \u00fanicament modificarem el camp rented assignant-li el valor true i false respectivament i una vegada guardat crearem la notificaci\u00f3 i realitzarem una redirecci\u00f3 a la pantalla amb la vista detalle de la pel.l\u00edcula. En el m\u00e8tode deleteMovie tamb\u00e9 obtindrem el registre de la pel\u00b7l\u00edcula per\u00f2 haurem de cridar al m\u00e8tode delete() de la mateixa, una vegada fet a\u00e7\u00f2 afegirem la notificaci\u00f3 i realitzarem una redirecci\u00f3 al llistat general de pel\u00b7l\u00edcules.</p> <p>A continuaci\u00f3 hem d'editar la vista detalle de pel\u00b7l\u00edcules per a modificar els botons (show.blade). At\u00e8s que les accions han de realitzaren utilitzant peticions HTTP tipus PUT i DELETE no podem posar un enlla\u00e7 normal (ja que seria de tipus GET). Per a solucionar-ho hem de crear un formulari al voltant del bot\u00f3 i assignar al formulari el m\u00e8tode corresponent.</p> <p>Per exemple:</p> <pre><code>&lt;form action= {{action('CatalogController@putReturn',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n    {{ method_field('PUT') }}\n    {{ csrf_field() }}\n    &lt;button type=\"submit\" class=\"btn btn-danguer\" style= \"display:inline\" &gt; Devolver Pel\u00edcula&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"Antics/6.5.Activitat.html#exercisi-9-fes-un-manteniment-per-a-la-taula-de-generes-i-fica-la-al-menu","title":"Exercisi 9 - Fes un manteniment per a la taula de g\u00e8neres i fica-la al menu.","text":"<p>Per a fer submenus amb styde :</p> <pre><code>return [\n    'catalogo' =&gt; [ 'submenu' =&gt; [\n            'lista' =&gt;[ 'title'=&gt; 'Cat\u00e1logo', 'url' =&gt; '/catalog'],\n            'nueva' =&gt; ['title' =&gt; 'Nueva Pel\u00edcula', 'url' =&gt; '/catalog/create'],\n        ]],\n        'genero' =&gt; ['submenu' =&gt; [ \n            'genre' =&gt; ['title' =&gt; 'Mantenimiento Generos' , 'url' =&gt; '/genre'],\n            'nuevo' =&gt; ['title' =&gt; 'Nuevo Genero', 'url' =&gt; '/genre/create']\n            ]],\n    'logout' =&gt; ['title' =&gt; 'Cerrar Sesion' ,'url' =&gt; '/logout']\n];\n</code></pre>"},{"location":"Antics/6.5.Activitat.html#exercisi-10-fes-que-quan-polse-en-una-pellicula-sobre-un-genere-misquen-les-pellicules-deixe-genere","title":"Exercisi 10 - Fes que quan polse en una pel.licula sobre un g\u00e8nere, m'isquen les pel.licules d'eixe g\u00e8nere.","text":"<p>Tamb\u00e9 amb les desconegudes.</p>"},{"location":"Antics/6.5.Activitat.html#exercisi-11-paginacio","title":"Exercisi 11 - Paginaci\u00f2.","text":"<p>Hi ha diverses formes de paginar elements. La m\u00e9s senzilla \u00e9s utilitzar el m\u00e8tode paginate del generador de consultes (query builder) o d'un model Eloquent. Partint d'un model de eloquent es poden paginar de la seg\u00fcent manera:</p> <pre><code>    $allUsers = User::paginate(15);\n    $someUsers = User::where('votes', '&gt;', 100)-&gt;paginate(15);\n</code></pre> <p>L'argument passat al m\u00e8tode paginate \u00e9s el nombre d'elements que desitgem mostrar per p\u00e0gina. Una vegada que s'han obtingut els resultats pots mostrar-los en la teua vista i crear els enlla\u00e7os de paginaci\u00f3 utilitzant el m\u00e8tode render:</p> <pre><code>&lt;div class=\"container\"&gt; \n    @foreach ($users as $user)\n        {{$user-&gt;name}} \n    @endforeach\n&lt;/div&gt;\n{{ $users-&gt;render() }}\n</code></pre> <p>I a\u00e7\u00f2 \u00e9s tot el necessari per a crear un sistema de paginaci\u00f3! </p> <p>Crea la paginaci\u00f3 per a que en el cat\u00e0leg les pel.licules ixquen paginades de 8 en 8.</p>"},{"location":"Antics/6.5.Activitat.html#exercisi-12-alertes","title":"Exercisi 12 - Alertes","text":"<p>El component d'Styde te un sistema de notificacions. Per a fer-lo servir cal possar en la vista on volem que ixquen les notificacions. En el nostre cas ser\u00e0 en la plantilla, despr\u00e9s de mostrar el contingut:</p> <p>master.blade.php</p> <pre><code>...\n&lt;div id='app' class=\"container\"&gt; \n    @yield('content')\n    {!! Alert::render() !!}\n&lt;/div&gt;\n...\n</code></pre> <p>I ara quan guardem una pel.licula podem mostrar una notificaci\u00f3 a l'usuari:</p> <p>CatalogController.php</p> <pre><code>...\npublic function postCreate(StoreMovie $request){\n    $movie = new Movie();\n    $movie-&gt;fill($request-&gt;toArray());\n    $movie-&gt;save();\n    Alert::success(\"S'ha guardat la pel.licula\");\n    return redirect('/catalog');\n}\n...\n</code></pre> <p>Possa els missatges als m\u00e8todes de la pel.licula.</p>"},{"location":"Antics/6.5.Laravel.html","title":"FRAMEWORK LARAVEL","text":""},{"location":"Antics/6.5.Laravel.html#installacio-de-paquets","title":"Instal.laci\u00f3 de paquets","text":"<p>Els paquets s\u00f3n la manera prim\u00e0ria d'afegir funcionalitat a Laravel. Els paquets podrien ser qualsevol cosa d'una manera: des de un gran de treballar amb dates com Carbon, o un marc de testatge de BDD sencer com Behat.</p> <p>Naturalment, hi ha tipus diferents de paquets. Alguns paquets s\u00f3n independent del framework, treballen amb qualsevol marc de PHP. Qualssevol d'aquests paquets poden ser utilitzats amb Laravel afegint-los dins el vostre arxiu composer.json o amb composer require</p> <p>D'altra banda, altres paquets s\u00f3n per \u00fas amb Laravel. Aquests paquets poden tenir rutes, controladors, vistes, i la configuraci\u00f3 concretament per a Laravel. </p>"},{"location":"Antics/6.5.Laravel.html#exemple-stydenet-html-package","title":"Exemple: StydeNet Html package","text":"<p>Aquest paquet cont\u00e9 una col\u00b7lecci\u00f3 de classes de PHP per generar components d'HTML com\u00fa, com:</p> <ul> <li>Menus</li> <li>Missatges d'Alerta</li> <li>Col.leccions en formularis</li> <li>Camps de r\u00e0dios i checkboxes en formulari</li> </ul> <p>\u00c9s una extensi\u00f3 del paquet HTML de Laravel Colective i ser\u00e0 molt \u00fatil per generar formularis i HTML din\u00e0micament.</p> <ul> <li> <p>Per Instal\u00b7lar fes c\u00f3rrer el composer require \"styde/html=~1.8\" o afegint \"styde/html\": \"~1.8\" a l'arxiu composer.json.</p> </li> <li> <p>Tamb\u00e9, necessites registrar en el app/Http/Kernel.php el middleware \\Styde\\Html\\Alerta\\Middleware::class despres del middleware StartSession . </p> <pre><code>// Per Laravel superior a 5.4\nprotected $middlewareGroups = [\n    \\Styde\\Html\\Alert\\Middleware::class,\n    //...\n];\n</code></pre> </li> </ul> <p>Aquest middleware \u00e9s necessitat per fer els missatges d'alerta persistents entre sessions, despr\u00e9s de que cada petici\u00f3 \u00e9s completada.</p> <p>Ara tindr\u00e0s autom\u00e0ticament disponibles el seg\u00fcents components:</p> <pre><code>Alert =&gt; Styde\\Html\\Facades\\Alert\nField =&gt; Styde\\Html\\Facades\\Field\nMenu  =&gt; Styde\\Html\\Facades\\Menu\nForm  =&gt; Collective\\Html\\FormFacade\nHtml  =&gt; Collective\\Html\\HtmlFacade\n</code></pre> <p>Opcionalment, pots tamb\u00e9 executar php artisan vendor:publish --provider='Styde\\Html\\HtmlServiceProvider' per publicar l'arxiu de configuraci\u00f3 en config/html.php i revisar les seves opcions i valors.</p>"},{"location":"Antics/6.5.Laravel.html#validacio-de-formularis","title":"Validaci\u00f3 de formularis","text":"<p>Les peticions de formularis s\u00f3n classes que contenen la l\u00f2gica de la validaci\u00f3. Per a crear una classe del tipus form request, utilitze el comando d'Artisan make:request des de la seua consola:</p> <pre><code>php artisan make:request StoreMovie\n</code></pre> <p>La classe generada ser\u00e0 guardadad en el directori app/Http/Requests. Si el directori no existeix, ser\u00e0 creat autom\u00e0ticament. </p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass StoreMovie extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return false;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            //\n        ];\n    }\n}\n</code></pre> <p>Afegim unes poques regles de validaci\u00f3 al m\u00e8tode rules:</p> <pre><code>return [\n        'title' =&gt; 'required|max:255',\n        'year' =&gt; 'required|numeric',\n        'poster' =&gt; 'required'\n    ];\n</code></pre> <p>Pots consultar les regles permeses.</p> <p>Llavors, com s\u00f3n avaluades les regles de validaci\u00f3? Tot el que necessites fer \u00e9s especificar el tipus de la petici\u00f3 en el m\u00e8tode del controlador. La sol\u00b7licitud entrant del formulari \u00e9s validada abans que es cride al m\u00e8tode del controlador, la qual cosa significa que no necessita carregar el controlador amb la l\u00f2gica de validaci\u00f3:</p> <pre><code>public function postCreate(StoreMovie $request){\n        $movie = new Movie();\n        $movie-&gt;title = $request-&gt;title;\n        $movie-&gt;year = $request-&gt;year;\n        $movie-&gt;director = $request-&gt;director;\n        $movie-&gt;poster = $request-&gt;poster;\n        $movie-&gt;synopsis = $request-&gt;synopsis;\n        $movie-&gt;save();\n        return redirect('/catalog');\n}\n</code></pre> <p>Si la validaci\u00f3 falla, es generar\u00e0 autom\u00e0ticament una resposta de redirecci\u00f3 que envia a l'usuari de tornada a la seua anterior localitzaci\u00f3. Els errors tamb\u00e9 es mostraran \"temporalment\" en la sessi\u00f3 aix\u00ed que estan per a la seua visualitzaci\u00f3.  Si la petici\u00f3 era era una sol\u00b7licitud AJAX, es retornar\u00e0 a l'usuari una resposta HTTP amb un codi d'estat 422 incloent una representaci\u00f3 en format JSON dels errors de validaci\u00f3.</p>"},{"location":"Antics/6.5.Laravel.html#autoritzacio-de-les-peticions-de-formulari","title":"Autoritzaci\u00f3 de les peticions de formulari","text":"<p>Les classes form request tamb\u00e9 contenen un m\u00e8tode authorize. Dins d'aquest m\u00e8tode, pots comprovar si l'usuari autenticat t\u00e9 realment el perm\u00eds per a actualitzar un recurs determinat. </p> <p>Si el m\u00e8tode authorize retorna false, \u00e9s retorna autom\u00e0ticament una resposta HTTP amb un estat 403 i el m\u00e8tode del seu controlador no \u00e9s executat.</p> <p>Si el teu pla \u00e9s tenir una l\u00f2gica d'autoritzaci\u00f3 en una altra part de l'aplicaci\u00f3, simplement retorna true en el m\u00e8tode authorize.</p>"},{"location":"Antics/6.5.Laravel.html#mes-coses-sobre-models","title":"M\u00e9s coses sobre models","text":""},{"location":"Antics/6.5.Laravel.html#assignacio-massiva","title":"Assignaci\u00f3 Massiva","text":"<p>Tamb\u00e9 es pot utilitzar el m\u00e8tode create per a emmagatzemar un model en una \u00fanica l\u00ednia. Des del m\u00e8tode es retornar\u00e0 la inst\u00e0ncia del model inserit. No obstant a\u00e7\u00f2, abans d'a\u00e7\u00f2, cal especificar la propietat fillable o guarded del model, doncs tots els models Eloquent posseeixen protecci\u00f3 contra l'assignaci\u00f3 en massa.</p> <p>Una vulnerabilitat d'assignaci\u00f3 massiva t\u00e9 lloc quan un usuari passa un par\u00e0metre HTTP inesperat a trav\u00e9s de la sol\u00b7licitud, i aquest par\u00e0metre canvia una columna de la base de dades que no s'esperava. Per exemple, un usuari malintencionat podria enviar un par\u00e0metre is_admin a trav\u00e9s d'una petici\u00f3 HTTP, el qual es marejaria dins del m\u00e8tode create del model, permetent a l'usuari postular-se com un administrador.</p> <p>Aix\u00ed que, per a comen\u00e7ar, cal definir a quins atributs se'ls permet l'assignaci\u00f3 massiva. A\u00e7\u00f2 s'estableix en la propietat fillable del model. Per exemple, anem a permetre l'assignaci\u00f3 massiva sobre l'atribut name d'un model Flight:</p> <pre><code>&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['name'];\n}\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#atributes-guarding","title":"Atributes Guarding","text":"<p>Mentre que $fillable serveix com una \"llista blanca\" d'atributs que poden ser assignats massivament, tamb\u00e9 es pot optar per $guarded. La propietat guarded cont\u00e9 un array d'atributs que no poden ser assignats de forma massiva.  La resta d'atributs que no es troben en el array si podran. Pel que, $guarded actua com una \"llista negra\". Per descomptat, s'ha d'establir $fillable o $guarded - mai tots dos. En l'exemple que segueix, tots els atributs excepte price comptaran amb assignaci\u00f3 massiva:</p> <pre><code>&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The attributes that aren't mass assignable.\n     *\n     * @var array\n     */\n    protected $guarded = ['price'];\n}\n</code></pre> <p>Si es desitja que tots els atributs es puguen assignar en massa, es pot definir la propietat $guarded com un array buit:</p> <pre><code>/*\n* The attributes that llauren't mass assignable.\n*\n* @var array\n/\nprotected $guarded = [];\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#relacions-en-laravel","title":"Relacions en Laravel","text":"<p>Les taules de les bases de dades es relacionen sovint unes amb unes altres. Eloquent facilita la gesti\u00f3 i el treball amb aquestes relacions f\u00e0cilment suportant diversos tipus de relacions diferents:</p> <ul> <li>Un a un \u2013 One to one</li> <li>Un a molts \u2013 One to many</li> <li>Molts a molts \u2013 Many to many</li> <li>Molta a molts mitjan\u00e7ant - Has Many Through</li> </ul>"},{"location":"Antics/6.5.Laravel.html#definir-relacions","title":"Definir relacions","text":"<p>Les relacions entre models Eloquent es defineixen com a m\u00e8todes en les pr\u00f2pies classes. At\u00e8s que, com els propis models Eloquent, les relacions tamb\u00e9 serveixen com a poderosos query builders, la definici\u00f3 de relacions com a m\u00e8todes proporciona potents funcions d'encadenament i consulta de m\u00e8todes.</p>"},{"location":"Antics/6.5.Laravel.html#un-a-molts-one-to-many","title":"Un a molts \u2013 One to many","text":"<p>Una relaci\u00f3 \"un-a-molts\" s'usa per a definir relacions en les quals un model \u00fanic posseeix qualsevol quantitat d'altres models. Per exemple, un blog pot tenir un nombre infinit de comentaris. Com en altres relacions de Eloquent, les relacions un-a-molts es defineixen col\u00b7locant una funci\u00f3 en el model Eloquent:</p> <pre><code>    &lt;?php\n\n    namespace App;\n\n    use Illuminate\\Database\\Eloquent\\Model;\n\n    class Post extends Model\n    {\n        /**\n         * Get the comments for the blog post.\n         */\n        public function comments()\n        {\n            return $this-&gt;hasMany('App\\Comment','foreign_key', 'local_key');\n        }\n    }\n</code></pre> <p>Si la clau externa en el model Comment \u00e9s el nom del propi model i el sufix _id mitjan\u00e7ant la convenci\u00f3 \"snake_case\" (en el exemple post_id) el par\u00e0metre foreign_key \u00e9s podr\u00e0 obviar. Si la clau local \u00e9s id \u00e9s podr\u00e0 obviar.</p> <p>Una vegada que la relaci\u00f3 ha sigut definida, es pot accedir a la col\u00b7lecci\u00f3 de comentaris accedint a la propietat comments, i despr\u00e9s, es pot accedir als m\u00e8todes de la relaci\u00f3 com si foren propietats del model:</p> <pre><code>$comments = App\\Post::find(1)-&gt;comments;\n\nforeach ($comments as $comment) {\n    //\n}\n</code></pre> <p>Per descomptat, ja que totes les relacions serveixen com query builders, es poden agregar agregar restriccions addicionals als comentaris que van ser obtinguts amb la cridada al m\u00e8tode *comments i continuar la cadena de condicions en la consulta:</p> <pre><code>$comments = App\\Post::find(1)-&gt;comments()-&gt;*where('title', 'foo')-&gt;first();\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#un-a-molts-invers","title":"Un a molts (invers)","text":"<p>Ara que podem accedir a tots els comentaris del post, anem a definir la relaci\u00f3 per a permetre que un comentari accedisca a la seua publicaci\u00f3 pare.  Per a definir l'invers d'una relaci\u00f3 hasMany, definir una funci\u00f3 de relaci\u00f3 en el model fill que cride al m\u00e8tode belongsTo:</p> <pre><code>&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Comment extends Model\n{\n    /**\n     * Get the post that owns the comment.\n     */\n    public function post()\n    {\n        return $this-&gt;belongsTo('App\\Post', 'foreign_key', 'other_key');\n    }\n}\n</code></pre> <p>On es poden obviar foreign_key i other_key si seguixen la convenci\u00f3 anterior.</p> <p>Una vegada que la relaci\u00f3 s'ha definit, es pot recuperar el model Post des de Comment accedint a la \"propietat din\u00e0mica\" post:</p> <pre><code>$comment = App\\Comment::find(1);\necho $comment-&gt;post-&gt;title;\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#molts-a-molts-many-to-many","title":"Molts a molts \u2013 Many to many","text":"<p>Les relacions molts-a-molts s\u00f3n una mica m\u00e9s complicades que les hasOne o les hasMany. Un exemple de tal relaci\u00f3 \u00e9s un usuari que cont\u00e9 diversos rols, on els rols s\u00f3n compartits per altres usuaris. Per exemple, diversos usuaris poden tenir el rol de \"Admin\". Per a definir aquesta relaci\u00f3, es requereixen tres taules de la base de dades: users, rols, i role_user. La taula role_user \u00e9s derivada de l'ordre alfab\u00e8tic dels noms dels models relacionats i cont\u00e9 les columnes user_id i role_id.</p> <p>Les relacions molts-a-molts es defineixen amb un m\u00e8tode que retorna el resultat del m\u00e8tode belongsToMany. Per exemple, definir el m\u00e8tode rols en el model User:</p> <pre><code>&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /\n      The roles that belong to the user.\n     /\n    public function roles()\n    {\n        return $this-&gt;belongsToMany('App\\Role');\n    }\n}\n</code></pre> <p>Una vegada definida la relaci\u00f3, es pot accedir als rols de l'usuari usant la propietat din\u00e0mica rols:</p> <pre><code>$user = App\\User::find(1);\n\nforeach ($user-&gt;rols as $role) {\n    //\n}\n</code></pre> <p>Per descomptat, com en les altres relacions, es pot cridar al m\u00e8tode rols per a continuar encadenant restriccions a la consulta sobre la relaci\u00f3:</p> <pre><code>$rols = App\\User::find(1)-&gt;rols()-&gt;orderBy('name')-&gt;get();\n</code></pre> <p>Com s'ha esmentat anteriorment, per a determinar el nom de la taula relacionada en un join, Eloquent unir\u00e0 els noms dels dos models relacionats en ordre alfab\u00e8tic. No obstant a\u00e7\u00f2, hi ha llibertat per a sobreescriure aquesta convenci\u00f3. Es pot fer passant un segon par\u00e0metre al m\u00e8tode belongsToMany:</p> <pre><code>return $this-&gt;belongsToMany('App\\Role', 'role_user');\n</code></pre> <p>A m\u00e9s de poder personalitzar el nom de les taules en un join, tamb\u00e9 es pots personalitzar els noms de les columnes de les claus en la taula afegint m\u00e9s arguments al m\u00e8tode belongsToMany. El tercer argument \u00e9s el nom de la clau for\u00e0nia en la qual s'est\u00e0 definint la relaci\u00f3, mentre que el quart argument \u00e9s el nom de la clau for\u00e0nia del model al que s'est\u00e0 fent el join:</p> <pre><code>return $this-&gt;belongsToMany('App\\Role', 'role_user', 'user_id', 'role_id');\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#definint-la-inversa-de-la-relacio","title":"Definint la Inversa de la Relaci\u00f3","text":"<p>Per a definir la inversa d'una relaci\u00f3 de molts a molts, simplement cal posar una altra cridad a belongsToMany en el model relacionat. </p>"},{"location":"Antics/6.5.Laravel.html#recuperar-columnes-de-taules-intermedies","title":"Recuperar Columnes de Taules Interm\u00e8dies","text":"<p>Com s'ha vist, treballar amb relacions molts-a-molts requereix la pres\u00e8ncia d'una taula interm\u00e8dia. Eloquent proporciona algunes formes molt \u00fatils d'interactuar amb aquesta taula. Per exemple, suposem que un objecte User t\u00e9 molts objectes Role amb els quals es relaciona. Despr\u00e9s d'accedir a aquesta relaci\u00f3, es pot accedir a la taula interm\u00e8dia utilitzant l'atribut pivot en els models:</p> <pre><code>$user = App\\User::find(1);\n\nforeach ($user-&gt;rols as $role) {\n    echo $role-&gt;pivot-&gt;created_at;\n}\n</code></pre> <p>Cal tenir en compte que el model obtingut Role, est\u00e0 assignat autom\u00e0ticament a un atribut pivot. Aquest atribut cont\u00e9 un model que representa la taula interm\u00e8dia i pot ser utilitzat com qualsevol altre model Eloquent.</p> <p>Per defecte, nom\u00e9s les claus del model estaran presents en l'objecte pivot. Si la taula pivot cont\u00e9 atributs addicionals, s'han d'especificar en definir la relaci\u00f3:</p> <pre><code>return $this-&gt;belongsToMany('App\\Role')-&gt;withPivot('column1', 'column2');\n</code></pre> <p>Si es desitja que els camps crated_at i updated_at es mantinguen de forma autom\u00e0tica, cal utilitzar el m\u00e8tode withTimestamps en definir la relaci\u00f3:</p> <pre><code>return $this-&gt;belongsToMany('App\\Role')-&gt;withTimestamps();\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#filtrant-relacions-via-columnes-de-taula-intermedia","title":"Filtrant Relacions Via Columnes de Taula Interm\u00e8dia","text":"<p>Tamb\u00e9 pots filtrar els resultats van retornar per belongsToMany utilitzant el wherePivot i wherePivotIn m\u00e8todes quan definint la relaci\u00f3:</p> <pre><code>retorn $this-&gt;belongsToMany('App\\Notes')-&gt;wherePivot('aprovat', 1);\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#has-many-through","title":"Has Many Through","text":"<p>El \"Has Many Through\" proporciona una drecera convenient per accedir relacions distants via una relaci\u00f3 interm\u00e8dia.Per exemple, un model Country, pot tenir molts models Post a trav\u00e9s d'un model intermedi User. En aquest exemple, es podria reunir f\u00e0cilment tots els missatges d'un blog per a un pa\u00eds determinat. Fem una ullada a les taules per a definir aquesta relaci\u00f3:</p> <p>countries     id - integer     name - string</p> <p>users     id - integer     country_id - integer     name - string</p> <p>posts     id - integer     user_id - integer     title - string</p> <p>Encara que Post no cont\u00e9 una columna country_id, la relaci\u00f3 hasManyThrough proporciona acc\u00e9s als missatges d'un pa\u00eds via $country-&gt;posts. </p> <p>Per a realitzar aquesta consulta, Eloquent inspecciona country_id en la taula interm\u00e8dia users. Despr\u00e9s de trobar els IDs d'usuaris coincidents, seran usats per a la consulta a la taula posts.</p> <p>Ara que s'ha examinat l'estructura de la taula per a la relaci\u00f3, es va a definir sobre el model Country:</p> <pre><code>&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Country extends Model\n{\n    /*\n     * Get all of the posts for the country.\n     */\n    public function posts()\n    {\n        return $this-&gt;hasManyThrough('App\\Post', 'App\\User');\n    }\n}\n</code></pre> <p>El primer par\u00e0metre passat al m\u00e8tode hasManyThrough \u00e9s el nom del model final al que es desitja accedir, mentre que el segon par\u00e0metre \u00e9s el nom del model intermedi.</p> <p>Els convenis t\u00edpics per a claus de Eloquent seran usats per a realitzar les consultes de la relaci\u00f3. Si es desitja personalitzar les claus de la relaci\u00f3, es pot fer pels par\u00e0metres tercer i quart al m\u00e8tode hasManyThrough. El tercer par\u00e0metre \u00e9s el nom de la clau aliena del model intermediari. El quart par\u00e0metre correspon amb el nom de la clau aliena del model final. El cinqu\u00e8 argument \u00e9s la clau local, mentre que el sis\u00e8 \u00e9s la clau local del model intermedi:</p> <pre><code>class Country extends Model\n{\n    public function posts()\n    {\n        return $this-&gt;hasManyThrough(\n            'App\\Post',\n            'App\\User',\n            'country_id', // Foreign key on users table...\n            'user_id', // Foreign key on posts table...\n            'id', // Local key on countries table...\n            'id' // Local key on users table...\n        );\n    }\n}\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#consultar-lexistencia-de-relacions","title":"Consultar l'Exist\u00e8ncia de Relacions","text":"<p>Quan s'accedeixen als registres d'un model, es poden limitar els resultats basats en l'exist\u00e8ncia d'una relaci\u00f3. Per exemple, imaginar que es desitja obtenir tots els posts que continguen almenys un comentari. Per a a\u00e7\u00f2, es passaria el nom de la relaci\u00f3 al m\u00e8tode has o a orHas:</p> <pre><code>// Retrieve all posts that have at least one comment...\n$posts = App\\Post::has('comments')-&gt;get();\n</code></pre> <p>A m\u00e9s es pot especificar un operador i un comptador per a personalitzar la consulta:</p> <pre><code>// Retrieve all posts that have three or habite comments...\n$posts = Post::has('comments', '&gt;=', 3)-&gt;get();\n</code></pre> <p>Es poden nigar estructures has utilitzant la notaci\u00f3 de \"punts\". Per exemple, es podrien obtenir tots els posts que tenen almenys un comentari i un vot:</p> <pre><code>// Retrieve all posts that have at least one comment with votes...\n$posts = Post::has('comments.votes')-&gt;get();\n</code></pre> <p>Si es necessita encara m\u00e9s control, es poden utilitzar els m\u00e8todes whereHas i orWhereHas per a incloure condicions \"where\" en les consultes has. Aquests m\u00e8todes permeten afegir restricciones personalitzades a una relaci\u00f3, aix\u00ed com comprovar el contingut d'un comentari:</p> <pre><code>// Retrieve all posts with at least one comment containing words like foo%\n$posts = Post::whereHas('comments', function ($query) {\n    $query-&gt;where('content', 'like', 'foo%');\n})-&gt;get();\n</code></pre> <p>Quan s'accedeixen als registres d'un model, es poden limitar els resultats basats en la inexist\u00e8ncia d'una relaci\u00f3. Per exemple, imaginar que es desitja obtenir tots els posts que no continguen almenys un comentari. Per a a\u00e7\u00f2, es passaria el nom de la relaci\u00f3 al m\u00e8tode doesntHave o a orDoesntHave:</p> <pre><code>$posts = App\\Post::doesntHave('comments')-&gt;get();\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#insertant-i-modificant-models-rellacionats","title":"Insertant i modificant Models rel.lacionats","text":""},{"location":"Antics/6.5.Laravel.html#el-metode-save","title":"El m\u00e8tode Save","text":"<p>Eloquent proveeix m\u00e8todes convenients per a l'addici\u00f3 de nous models a les relacions. Per exemple, potser necessite inserir un nou Comment a un model Post. En lloc de configurar manualment l'atribut post_id en el Comment, pot inserir el Comment directament des del m\u00e8tode save de la relaci\u00f3:</p> <pre><code>$comment = new App\\Comment(['message' =&gt; 'A new comment.']);\n$post = App\\Post::find(1);\n$post-&gt;comments()-&gt;save($comment);\n</code></pre> <p>Note's que no accedim als comments de la relaci\u00f3 com una propietat din\u00e0mica. En el seu lloc, cridem al m\u00e8tode comments per a obtenir una inst\u00e0ncia de la relaci\u00f3. El m\u00e8tode save agregar\u00e0 autom\u00e0ticament el valor post_id apropiat al nou model Comment.</p> <p>Si necessitem gravar multiples models relacionats, pot usar el m\u00e8tode saveMany</p> <pre><code>$post = App\\Post::find(1);\n\n$post-&gt;comments()-&gt;saveMany([\n    new App\\Comment(['message' =&gt; 'A new comment.']),\n    new App\\Comment(['message' =&gt; 'Another comment.']),\n]);\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#el-metode-create","title":"El m\u00e8tode Create","text":"<p>A m\u00e9s dels m\u00e8todes save i saveMany, es pot utilitzar tamb\u00e9 el m\u00e8tode create, eque accepta una matriu d'atributs, crea el model i ho insereix en la base de dades. De nou, la difer\u00e8ncia entre save i create \u00e9s que save accepta una inst\u00e0ncia d'un model complet de Eloquent mentre que create accepta una matriu de PHP:</p> <pre><code>$post = App\\Post::find(1);\n\n$comment = $post-&gt;comments()-&gt;create([\n    'message' =&gt; 'A new comment.',\n]);\n</code></pre> <p>Abans d'utilitzar el crear m\u00e8tode, revisa la documentaci\u00f3 d'assignment masssiu. Pots utilitzar el createMany m\u00e8tode per crear el m\u00faltiple va relacionar models:</p> <pre><code>$post = App\\Post::find(1);\n$post-&gt;comments()-&gt;createMany([\n    [\n        'message' =&gt; 'A new comment.',\n    ],\n    [\n        'message' =&gt; 'Another new comment.',\n    ],\n]);\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#belongs-to-relationships","title":"Belongs To Relationships","text":"<p>Quan actualitzem una relaci\u00f3 belongsTo, utilitzaem el m\u00e8tode associate. Aquest m\u00e8tode establir\u00e0 la clau for\u00e0nia en el model fill.</p> <pre><code>$account = App\\Account::find(10);\n$user-&gt;account()-&gt;associate($account);\n$user-&gt;save();\n</code></pre> <p>Per a llevar-la, pots utilitzar el m\u00e8tode dissociate. Aquest m\u00e8tode posar\u00e0 la clau for\u00e0nia de la relaci\u00f3 a null:</p> <pre><code>$user-&gt;account()-&gt;dissociate();\n$user-&gt;save();\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#relacions-molts-a-molts","title":"Relacions Molts a Molts","text":""},{"location":"Antics/6.5.Laravel.html#adjuntar-separar-attaching-detaching","title":"Adjuntar / Separar (Attaching / Detaching)","text":"<p>Eloquent tamb\u00e9 proporciona uns quants helpers addicionals helper m\u00e8todes per fer que treballen amb va relacionar models habite convenient. Per exemple, imaginar que un usuari pot tenir diversos rols i un rol pot tenir diversos usuaris. Per un adjuntar un rol un un usuari inserint un registre en la taula interm\u00e8dia que uneix els models, utilitzar el m\u00e8tode attach:</p> <pre><code>$user = App\\User::find(1);\n$user-&gt;rols()-&gt;attach($roleId);\n</code></pre> <p>Quan s'adjunta una relaci\u00f3 a un model, es pot passar a m\u00e9s un array de dades addicional per a inserir-ho en la taula interm\u00e8dia:</p> <pre><code>$user-&gt;rols()-&gt;attach($roleId, ['expires' =&gt; $expires]);\n</code></pre> <p>Per descomptat, a voltes \u00e9s necessari eliminar un rol d'un usuari. Per a eliminar un registre d'una relaci\u00f3 molts-a-molts, utilitzar el m\u00e8tode detach. El m\u00e8tode detach eliminar\u00e0 el registre apropiat de la taula interm\u00e8dia; no obstant a\u00e7\u00f2, tots dos models romandran en la base de dades:</p> <pre><code>// Detach a single role from the user...\n$user-&gt;rols()-&gt;dettach($roleId);\n\n// Detach all rols from the user...\n$user-&gt;rols()-&gt;dettach();\n</code></pre> <p>Per comoditat, attach i dettach accepten a m\u00e9s un array de IDs com a entrada:</p> <pre><code>$user = App\\User::find(1);\n\n$user-&gt;rols()-&gt;detach([1, 2, 3]);\n\n$user-&gt;rols()-&gt;attach([\n    1 =&gt; ['expires' =&gt; $expires],\n    2 =&gt; ['expires' =&gt; $expires]\n]);\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#guardant-dades-addicional-en-la-taula-pivot","title":"Guardant dades addicional en la taula pivot","text":"<p>Quan treballem amb una relaci\u00f3 molts-a-molts, el m\u00e8tode Save accepta , com a segon argument, una matriu de attributes de la taula annexa (taula pivot)</p> <pre><code>App\\User::find(1)-&gt;rols()-&gt;save($role, ['expires' =&gt; $expires]);\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#modificant-un-registre-en-la-taula-pivot","title":"Modificant un registre en la taula Pivot","text":"<p>Si necessites actualitzar una fila en el taula pivot, pots utilitzar el m\u00e8tode updateExistingPivot. Aquest m\u00e8tode accepta la clau for\u00e0nia i una varietat d'atributs per actualitzar:</p> <pre><code>$user = App\\User::find(1);\n$user-&gt;rols()-&gt;updateExistingPivot($roleId, $attributes);\n</code></pre> <p>Consulta documentaci\u00f3n</p>"},{"location":"Antics/6.5.Laravel.html#exemple-videoclub","title":"Exemple : Videoclub","text":""},{"location":"Antics/6.5.Laravel.html#installa-el-component-styde","title":"Instal.la el component styde","text":"<p>Ja est\u00e0 explicat dalt.</p>"},{"location":"Antics/6.5.Laravel.html#refactorizar-el-formulari","title":"Refactorizar el formulari","text":"<p>En primer lloc, anem a canviar el formulari 'create'. Substitu\u00efm tot el codi html per este que utilitza la classe Form dels components instal.lats. El formulari est\u00e0 associat est\u00e0 associat a un model i posse els camps que en fan falta. No cal possar el @csfr doncs es possa autom\u00e0ticament.</p> <pre><code>     {!! Form::model(new App\\Movie(),['class'=&gt;'form-horizontal form-label-left','enctype'=&gt;\"multipart/form-data\"]) !!}\n        {!! Field::text('title') !!}\n        {!! Field::text('year') !!}\n        {!! Field::text('director') !!}\n        {!! Field::text('poster') !!}\n        {!! Field::textarea('synopsis') !!}\n        {!! Form::submit('Enviar',['class'=&gt;'btn btn-success','id'=&gt;'submit']) !!}\n    {!! Form::close() !!}   \n</code></pre> <p>Canviarem, de la mateixa forma, el formulari de modificaci\u00f3, tenint en compte que si en conte de passar-li el model li passe un element del model, el valors s'afegisen al formulari.</p> <pre><code>    {!! Form::model($pelicula,['class'=&gt;'form-horizontal form-label-left','enctype'=&gt;\"multipart/form-data\",'method'=&gt;'PUT']) !!}\n        {!! Field::text('title') !!}\n        {!! Field::text('year') !!}\n        {!! Field::text('director') !!}\n        {!! Field::select('id_genre') !!}\n        {!! Field::text('poster') !!}\n        {!! Field::textarea('synopsis') !!}\n    {!! Form::submit('Enviar',['class'=&gt;'btn btn-success','id'=&gt;'submit']) !!}\n    {!! Form::close() !!}\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#comprovar-les-dades-del-formulari","title":"Comprovar les dades del formulari","text":"<p>Tots els camp son requerits. L'any ha de ser un n\u00famero major de 1900 i menor que l'any actual.</p>"},{"location":"Antics/6.5.Laravel.html#refactoritzar-els-metodes-create-i-update","title":"Refactoritzar els m\u00e8todes create i update","text":"<p>Anem a utilitzar l'assignament massiu per a omplir tots els camp a l'hora. Pots fer-ho declarant en el model la variable $fillable o la variable $guard</p> <p>Despr\u00e9s haur\u00e0s de substituir l'assignaci\u00f3 de tots els camps, en el metodes create i update, per l'instrucci\u00f3:</p> <pre><code>$movie-&gt;fill($request-&gt;toArray());\n</code></pre> <p>storeMovie.php</p> <pre><code>    &lt;?php\n\n    namespace App\\Http\\Requests;\n\n    use Illuminate\\Foundation\\Http\\FormRequest;\n    use DateTime;\n\n    class StoreMovie extends FormRequest\n    {\n        /**\n         * Determine if the user is authorized to make this request.\n         *\n         * @return bool\n         */\n        public function authorize()\n        {\n            return true;\n        }\n\n        /**\n         * Get the validation rules that apply to the request.\n         *\n         * @return array\n         */\n        public function rules()\n        {\n            $now = new DateTime;\n            $year = $now-&gt;format(\"Y\");\n            return [\n                'title' =&gt; 'required|max:255',\n                'year' =&gt; \"required|numeric|min:1900|max:$year\",\n                'poster' =&gt; 'required'\n            ];\n        }\n    }\n</code></pre> <p>catalogController.php</p> <pre><code>    ...\n    public function postCreate(StoreMovie $request){\n        $movie = new Movie();\n        $movie-&gt;fill($request-&gt;toArray());\n        $movie-&gt;save();\n        return redirect('/catalog');\n    }\n    public function putEdit(StoreMovie $request,$id){\n        $movie = Movie::findOrFail($id);\n        $movie-&gt;fill($request-&gt;toArray());\n        $movie-&gt;save();\n        return redirect(\"/catalog/show/$id\");\n    }\n    ... \n</code></pre> <p>movie.php</p> <pre><code>protected $guarded = [];\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#afegir-relacio-u-a-molts","title":"Afegir relaci\u00f3 u a molts.","text":"<ul> <li>Crea un taula, mitjan\u00e7ant una migraci\u00f3(create_genres_table) que es diga genres (gener\u00e8 en angl\u00e9s) ('id','titulo') </li> </ul> <pre><code>&lt;?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateGenresTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('genres', function (Blueprint $table) {\n            $table-&gt;increments('id');\n            $table-&gt;string('title');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('genres');\n    }\n}\n</code></pre> <ul> <li> <p>Anem a crear una migraci\u00f3 alter_movies_table per afegir un camp (id_genre) i crear la clau for\u00e0nia amb genres.</p> <pre><code>&lt;?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass AlterMoviesTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('movies', function (Blueprint $table) {\n            $table-&gt;integer('id_genre')-&gt;unsigned()-&gt;nullable();\n            $table-&gt;foreign('id_genre')-&gt;references('id')-&gt;on('genres')-&gt;onUpdate('CASCADE')-&gt;onDelete('SET NULL');\n    });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('movies', function (Blueprint $table) {\n            $table-&gt;dropForeign('movies_id_genre_foreign');\n            $table-&gt;dropColumn('id_genre');\n        });\n    }\n</code></pre> <p>}</p> </li> <li> <p>Executa la migraci\u00f3 i comprova que tot s'ha executat correctament.</p> </li> <li>Emplena la taula Genres amb uns quants.</li> <li>Afegix el model Genre.</li> <li> <p>Afegix la rel.laci\u00f3 belongsTo al model Movie per vincular-la al model Genre.</p> <pre><code>public function Genre(){\n        return $this-&gt;belongsTo(Genre::class,'id_genre');\n    }\n</code></pre> </li> <li> <p>Afegix la rel.laci\u00f3 HasMany al model Genre.</p> </li> </ul> <pre><code>public function movies(){\n        return $this-&gt;belongsToMany(Movie::class);\n}\n</code></pre> <ul> <li>Per tal que en la vista es motre el titol del g\u00e8nere:</li> </ul> <pre><code>        &lt;p&gt;&lt;strong&gt;Genere:&lt;/strong&gt;\n         @if ($pelicula-&gt;Genre)  {{ $pelicula-&gt;Genre-&gt;title @if ($pelicula-&gt;rented)\n                    &lt;form action= {{action('catalogController@putReturn',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n                        {{ method_field('PUT') }}\n                        @csrf\n                        &lt;button type=\"submit\" class=\"btn btn-info\" &gt; Tornar Pel\u00edcula&lt;/button&gt;\n                    &lt;/form&gt;\n                @else\n                    &lt;form action= {{action('catalogController@putRent',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n                        {{ method_field('PUT') }}\n                        @csrf\n                        &lt;button type=\"submit\" class=\"btn btn-secondary\" &gt; Llogar Pel\u00edcula&lt;/button&gt;\n                    &lt;/form&gt;\n                    &lt;form action= {{action('catalogController@deleteMovie',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n                        {{ method_field('DELETE') }}\n                        @csrf\n                        &lt;button type=\"submit\" class=\"btn btn-danger\"  &gt; Esborrar Pel\u00edcula&lt;/button&gt;\n                    &lt;/form&gt;\n                @endif}} \n         @else Desconocido\n         @endif\n        &lt;/p&gt;\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#afegir-el-camp-genere-al-formulari","title":"Afegir el camp G\u00e8nere al formulari.","text":"<p>Anem a utilitza el component d'Styde:</p> <pre><code>{!! Field::select('id_genre') !!}\n</code></pre> <p>que posarem a les vistes. Si a este component li passem un array de par\u00e0metres, es possar\u00e0 com a valors seleccionables:</p> <pre><code>{!! Field::select('id_genre',['terror','musical','thriller']) !!}\n</code></pre> <p>Tamb\u00e9 es pot declarar una funci\u00f3 en el model Movie per a que torne els valors.</p> <pre><code>    public function getIdGenreOptions(){\n        return ['terror','musical','thriller']\n    }\n</code></pre> <p>Per\u00f2 el que volem \u00e9s que els valor s'agafem de la taula Genres. Tal i com aix\u00ed:</p> <pre><code>public function getIdGenreOptions()\n{\n        return Genre::all()-&gt;toArray();\n}\n</code></pre> <p>Per\u00f2 a\u00e7o no acaba de funcionar perqu\u00e8 torna un array d'esta forma</p> <pre><code>    array:2 [\u25bc\n      0 =&gt; array:2 [\u25bc\n        \"id\" =&gt; 1\n        \"titulo\" =&gt; \"Terror\"\n      ]\n      1 =&gt; array:2 [\u25bc\n        \"id\" =&gt; 2\n        \"titulo\" =&gt; \"Fant\u00e1stico\"\n      ]\n    ]\n</code></pre> <p>per\u00f2 per a que funcionara hauria de ser d'aquesta altra</p> <pre><code>    array:2 [\u25bc\n      1 =&gt; \"Terror\"\n      2 =&gt; \"Fant\u00e1stico\"\n      ]\n    ]\n</code></pre> <p>Aix\u00ec que anem a fer una funci\u00f3 gen\u00e8rica php que donada una col.lecci\u00f3 d'objectes i dos camps del mateix, genere un array per a l'option.</p> <pre><code>function hazArray($elementos,'campo1','campo2')\n{\n    return $array\n}\n</code></pre> <p>i la cridariem de la seg\u00fcent forma:</p> <pre><code>    public function getIdGenreOptions()\n    {\n        return hazArray(Genre::all(),'id','titulo');\n    }\n</code></pre> <p>De moment declara-la com a privada en el model per a provar que funciona.</p> <p>Nota: en Laravel, per a poder vore el valor d'una variable i para l'execuci\u00f3 del programa s'utilitza la funci\u00f3 dd($variable) </p> <p>Per\u00f2, esta funci\u00f3 ha de poser ser visible en tota la  aplicaci\u00f3. Per tal de aconseguir-ho anem a crear un fitxer on guardar les nostres funcions gen\u00e8riques.</p> <ul> <li>Crea una carpeta Helpers dins de app</li> <li>Crea un fitxer myHelpers dins d'aquesta carpeta.</li> <li>copia la funci\u00f3 hazArray</li> </ul> <pre><code>&lt;?php\n\nfunction hazArray($elementos, $campo1, $campo2)\n    {\n        $todos = [];\n        foreach ($elementos as $elemento)\n            $todos[$elemento-&gt;$campo1] = $elemento-&gt;$campo2;\n        return $todos;\n    }\n</code></pre> <p>Per a que les funcions d'aquest fitxer siguen visibles en l'aplicaci\u00f3 anem a crear un ServiceProvider i a registrar-lo:</p> <pre><code>php artisan make:provider HelperServiceProvider\n</code></pre> <p>Crear\u00e0 un fitxer en la carpeta Providers. L'editem per afegir el nostre Helper.</p> <pre><code>    /**\n         * Register services.\n         *\n         * @return void\n         */\n        public function register()\n        {\n            require_once base_path() . '/app/Helpers/myHelpers.php';\n        }\n</code></pre> <p>I ara registrem el ServiceProvider en el fitxer config/app.php</p> <pre><code>'providers' =&gt; [\n\n        /*\n         * Laravel Framework Service Providers...\n         */\n        Illuminate\\Auth\\AuthServiceProvider::class,\n\n        .....\n\n        /*\n         * Package Service Providers...\n         */\n\n        /*\n         * Application Service Providers...\n         */\n        App\\Providers\\AppServiceProvider::class,\n        App\\Providers\\AuthServiceProvider::class,\n        // App\\Providers\\BroadcastServiceProvider::class,\n        App\\Providers\\EventServiceProvider::class,\n        App\\Providers\\RouteServiceProvider::class,\n        App\\Providers\\HelperServiceProvider::class,\n\n    ],\n</code></pre> <p>I com cada volta que toquen un fitxer de configuraci\u00f3 executem</p> <pre><code>php artisan config:cache\n</code></pre> <p>I tot ha de funcionar. Ja podem triar un g\u00e8nere en cada pel.licula.</p>"},{"location":"Antics/6.5.Laravel.html#el-component-de-menu-styde","title":"# El component de menu styde.","text":"<p>Anem a fer el menu des d'un fitxer de text utilitzan el component de menu del paquet instal.lat</p> <p>Substitu\u00efm el navbar per :</p> <pre><code>    &lt;nav class=\"navbar navbar-expand-md navbar-light navbar-laravel\"&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;a class=\"navbar-brand\" href=\"{{url('/')}}\"&gt;\n                &lt;span class=\"glyphicon glyphicon-tower\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                Videoclub\n            &lt;/a&gt;\n            &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"{{ __('Toggle navigation') }}\"&gt;\n                    &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n            &lt;/button&gt;\n            @if( Auth::check() )\n                {!! Menu::make(config('menu'), 'navbar-nav mr-auto') !!}\n            @endif\n        &lt;/div&gt;\n    &lt;/nav&gt;\n</code></pre> <p>on config('menu') enlla\u00e7a en un fitxer que hem de crear en la carpeta config i de nom menu.php. Este haur\u00e0 de contindre:</p> <pre><code>    &lt;?php\n\n    return [\n        'catalogo' =&gt; ['url' =&gt; '/catalog'],\n        'nueva' =&gt; ['title' =&gt; 'Nueva Pel\u00edcula', 'url' =&gt; '/catalog/create'],\n        'logout' =&gt; ['title' =&gt; 'Cerrar Sesion' ,'url' =&gt; '/logout']\n    ];\n</code></pre> <p>Cal fer php artisan config:cache</p> <p>On estan les opcions de menu.</p>"},{"location":"Antics/6.5.Laravel.html#completant-botons","title":"Completant botons","text":"<p>En aquest exercici anem a afegir la funcionalitat dels botons de llogar, retornar i eliminar pel\u00b7l\u00edcules. En tots els casos haurem de crear una nova ruta, un nou m\u00e8tode en el controlador , actualitzar el boton en la vista i mostrar una notificaci\u00f3 despres de realitzar l'acci\u00f3. En la seg\u00fcent taula es mostra un resum de la nova ruta a afegir:</p> Ruta Tipus Controlador/Acci\u00f3 /catalog/rent/{id} PUT CatalogController@putRent /catalog/return/{id} PUT CatalogController@putReturn /catalog/delete/{id} DELETE CatalogController@deleteMovie <p>Aquests tres m\u00e8todes s\u00f3n similars al m\u00e8tode que ja hav\u00edem implementat abans per a editar les dades d'una pel.l\u00edcula. En el cas de putRent i putReturn \u00fanicament modificarem el camp rented assignant-li el valor true i false respectivament i una vegada guardat crearem la notificaci\u00f3 i realitzarem una redirecci\u00f3 a la pantalla amb la vista detalle de la pel.l\u00edcula. En el m\u00e8tode deleteMovie tamb\u00e9 obtindrem el registre de la pel\u00b7l\u00edcula per\u00f2 haurem de cridar al m\u00e8tode delete() de la mateixa, una vegada fet a\u00e7\u00f2 afegirem la notificaci\u00f3 i realitzarem una redirecci\u00f3 al llistat general de pel\u00b7l\u00edcules.</p> <p>A continuaci\u00f3 hem d'editar la vista detalle de pel\u00b7l\u00edcules per a modificar els botons (show.blade). At\u00e8s que les accions han de realitzaren utilitzant peticions HTTP tipus PUT i DELETE no podem posar un enlla\u00e7 normal (ja que seria de tipus GET). Per a solucionar-ho hem de crear un formulari al voltant del bot\u00f3 i assignar al formulari el m\u00e8tode corresponent.</p> <p>Per exemple:</p> <pre><code>    &lt;form action= {{action('CatalogController@putReturn',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n        {{ method_field('PUT') }}\n        {{ csrf_field() }}\n        &lt;button type=\"submit\" class=\"btn btn-danguer\" style= \"display:inline\" &gt; Devolver Pel\u00edcula&lt;/button&gt;\n    &lt;/form&gt;\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#fes-un-manteniment-per-a-la-taula-de-generes-i-fica-la-al-menu","title":"Fes un manteniment per a la taula de g\u00e8neres i fica-la al menu.","text":"<p>Per a fer submenus amb styde :</p> <pre><code>    return [\n        'catalogo' =&gt; [ 'submenu' =&gt; [\n                'lista' =&gt;[ 'title'=&gt; 'Cat\u00e1logo', 'url' =&gt; '/catalog'],\n                'nueva' =&gt; ['title' =&gt; 'Nueva Pel\u00edcula', 'url' =&gt; '/catalog/create'],\n            ]],\n            'genero' =&gt; ['submenu' =&gt; [ \n                'genre' =&gt; ['title' =&gt; 'Mantenimiento Generos' , 'url' =&gt; '/genre'],\n                'nuevo' =&gt; ['title' =&gt; 'Nuevo Genero', 'url' =&gt; '/genre/create']\n                ]],\n        'logout' =&gt; ['title' =&gt; 'Cerrar Sesion' ,'url' =&gt; '/logout']\n    ];\n</code></pre> <p>web.php</p> <pre><code>        Route::put('catalog/return/{id}','catalogController@putReturn');\n    Route::put('catalog/rent/{id}','catalogController@putRent');\n    Route::delete('catalog/{id}','catalogController@deleteMovie'); \n</code></pre> <p>catalogController</p> <pre><code>public function putRent($id){\n        $pelicula = Movie::findOrFail($id);\n        $pelicula-&gt;rented = true;\n        $pelicula-&gt;save();\n        return redirect(\"/catalog/show/$id\");\n    }\n    public function putReturn($id){\n        $pelicula = Movie::findOrFail($id);\n        $pelicula-&gt;rented = false;\n        $pelicula-&gt;save();\n        return redirect(\"/catalog/show/$id\");\n    }\n    public function deleteMovie($id){\n        Movie::findOrFail($id)-&gt;delete();\n        return redirect(\"/catalog\");\n    }\n</code></pre> <p>show.blade.php</p> <pre><code> @if ($pelicula-&gt;rented)\n                    &lt;form action= {{action('catalogController@putReturn',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n                        {{ method_field('PUT') }}\n                        @csrf\n                        &lt;button type=\"submit\" class=\"btn btn-info\" &gt; Tornar Pel\u00edcula&lt;/button&gt;\n                    &lt;/form&gt;\n                @else\n                    &lt;form action= {{action('catalogController@putRent',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n                        {{ method_field('PUT') }}\n                        @csrf\n                        &lt;button type=\"submit\" class=\"btn btn-secondary\" &gt; Llogar Pel\u00edcula&lt;/button&gt;\n                    &lt;/form&gt;\n                    &lt;form action= {{action('catalogController@deleteMovie',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n                        {{ method_field('DELETE') }}\n                        @csrf\n                        &lt;button type=\"submit\" class=\"btn btn-danger\"  &gt; Esborrar Pel\u00edcula&lt;/button&gt;\n                    &lt;/form&gt;\n                @endif\n    @endif\n</code></pre> <p>web.php</p> <pre><code>Route::get('genre','genreController@getIndex');\nRoute::get('genre/create','genreController@getCreate');\nRoute::post('genre/create','genreController@postCreate');\nRoute::get('genre/edit/{id}','genreController@getEdit');\nRoute::put('genre/edit/{id}','genreController@putEdit');\nRoute::get('genre/delete/{id}','genreController@delete');\n</code></pre> <p>genreController.php</p> <pre><code>&lt;?php\n\n    namespace App\\Http\\Controllers;\n\n    use Illuminate\\Http\\Request;\n    use App\\Genre;\n\n\n    class GenreController extends Controller\n    {\n        public function getIndex(){\n            $generos = Genre::all();\n            return view('genre.index',compact('generos'));\n        }\n\n        public function getCreate(){\n            return view('genre.create');\n        }\n        public function postCreate(Request $request){\n            $genre = new Genre();\n            $genre-&gt;fill($request-&gt;toArray());\n            $genre-&gt;save();\n            return redirect('/genre');\n        }\n        public function getEdit($id){\n            $genre = Genre::findOrFail($id);\n            return view('genre.edit',compact('genre'));\n        }\n        public function putEdit(Request $request,$id){\n            $genre = Genre::findOrFail($id);\n            $genre-&gt;fill($request-&gt;toArray());\n            $genre-&gt;save();\n            return redirect(\"/genre\");\n        }\n        public function delete($id){\n            Genre::findOrFail($id)-&gt;delete();\n            return redirect(\"/genre\");\n        }\n    }\n</code></pre> <p>create.blade.php</p> <pre><code>@extends('layouts.master')\n    @section('content')\n    &lt;div class=\"row\" style=\"margin-top:20px\"&gt;\n        &lt;div class=\"col-md-offset-3 col-md-6\"&gt;\n            &lt;div class=\"panel panel-default\"&gt;\n                &lt;div class=\"panel-heading\"&gt;\n                    &lt;h3 class=\"panel-title text-center\"&gt;\n                        &lt;span class=\"glyphicon glyphicon-film\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                        Afegir g\u00e8nere\n                    &lt;/h3&gt;\n                &lt;/div&gt;\n                &lt;div class=\"panel-body\" style=\"padding:30px\"&gt;\n                    {!! Form::model(new App\\Genre,['class'=&gt;'form-horizontal form-label-left','enctype'=&gt;\"multipart/form-data\"]) !!}\n                        {!! Field::text('title') !!}\n                        {!! Form::submit('Enviar',['class'=&gt;'btn btn-success','id'=&gt;'submit']) !!}\n                    {!! Form::close() !!}\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    @stop\n</code></pre> <p>edit.blade.php</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n    &lt;div class=\"row\" style=\"margin-top:20px\"&gt;\n        &lt;div class=\"col-md-offset-3 col-md-6\"&gt;\n            &lt;div class=\"panel panel-default\"&gt;\n                &lt;div class=\"panel-heading\"&gt;\n                    &lt;h3 class=\"panel-title text-center\"&gt;\n                        &lt;span class=\"glyphicon glyphicon-film\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                        Modificar Genere\n                    &lt;/h3&gt;\n                &lt;/div&gt;\n                {!! Form::model($genre,['class'=&gt;'form-horizontal form-label-left','enctype'=&gt;\"multipart/form-data\"]) !!}\n                    @method('PUT')\n                    {!! Field::text('title') !!}\n                {!! Form::submit('Enviar',['class'=&gt;'btn btn-success','id'=&gt;'submit']) !!}\n                {!! Form::close() !!}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n    @stop\n</code></pre> <p>index.blade.php</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n    &lt;h2 &gt;G\u00e8neres&lt;/h2&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;table class=\"table-bordered table-info\"&gt;\n                &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;Titulo&lt;/th&gt;&lt;th&gt;Operacion&lt;/th&gt;&lt;/tr&gt;\n                @foreach( $generos as $genero )        \n                &lt;tr&gt;\n                    &lt;td&gt;{{$genero-&gt;id}}&lt;/td&gt;\n                    &lt;td&gt;{{$genero-&gt;title}}&lt;/td&gt;\n                    &lt;td&gt;&lt;a href='/genre/edit/{{$genero-&gt;id}}'&gt;&lt;i class='fa fa-edit'&gt;&lt;/i&gt;&lt;/a&gt;\n                        &lt;a href='/genre/delete/{{$genero-&gt;id}}'&gt;&lt;i class='fa fa-trash'&gt;&lt;/i&gt;&lt;/a&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                @endforeach\n            &lt;/table&gt;\n        &lt;/div&gt;  \n    @stop\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#paginacio","title":"Paginaci\u00f2.","text":"<p>Hi ha diverses formes de paginar elements. La m\u00e9s senzilla \u00e9s utilitzar el m\u00e8tode paginate del generador de consultes (query builder) o d'un model Eloquent. Partint d'un model de eloquent es poden paginar de la seg\u00fcent manera:</p> <pre><code>    $allUsers = User::paginate(15);\n    $someUsers = User::where('votes', '&gt;', 100)-&gt;paginate(15);\n</code></pre> <p>L'argument passat al m\u00e8tode paginate \u00e9s el nombre d'elements que desitgem mostrar per p\u00e0gina. Una vegada que s'han obtingut els resultats pots mostrar-los en la teua vista i crear els enlla\u00e7os de paginaci\u00f3 utilitzant el m\u00e8tode render:</p> <pre><code>&lt;div class=\"container\"&gt; \n    @foreach ($users as $user)\n        {{$user-&gt;name}} \n    @endforeach\n&lt;/div&gt;\n{{ $users-&gt;render() }}\n</code></pre> <p>I a\u00e7\u00f2 \u00e9s tot el necessari per a crear un sistema de paginaci\u00f3! </p> <p>Crea la paginaci\u00f3 per a que en el cat\u00e0leg les pel.licules ixquen paginades de 8 en 8.</p> <p>catalogController.php <pre><code>public function getIndex(){\n        $arrayPeliculas = Movie::paginate(8);\n        return view('catalog.index',compact('arrayPeliculas'));\n    }\n</code></pre></p> <p>index.blade.php</p> <pre><code>@extends('layouts.master')\n    @section('content')\n        &lt;h2 &gt;Cat\u00e0leg&lt;/h2&gt;\n        &lt;div class=\"row\"&gt;\n        @foreach( $arrayPeliculas as $pelicula )        \n            &lt;div class=\"col-xs-6 col-sm-4 col-md-3 text-center\"&gt;\n                &lt;a href=\"{{ url('/catalog/show/'.$pelicula-&gt;id) }}\"&gt;\n                    &lt;img src=\"{{$pelicula-&gt;poster}}\" style=\"height:200px\"/&gt; \n                    &lt;h4 style=\"min-height:45px;margin:5px 0 10px 0\"&gt;\n                    {{$pelicula-&gt;title}} &lt;/h4&gt;\n                &lt;/a&gt;\n            &lt;/div&gt; \n        @endforeach\n        &lt;/div&gt;  \n        &lt;div class=\"row\"&gt;{{ $arrayPeliculas-&gt;render() }}&lt;/div&gt;\n    @stop   \n</code></pre>"},{"location":"Antics/6.5.Laravel.html#alertes","title":"Alertes","text":"<p>El component d'Styde te un sistema de notificacions. Per a fer-lo servir cal possar en la vista on volem que ixquen les notificacions. En el nostre cas ser\u00e0 en la plantilla, despr\u00e9s de mostrar el contingut:</p> <p>master.blade.php</p> <pre><code>    ...\n    &lt;div id='app' class=\"container\"&gt; \n        @yield('content')\n        {!! Alert::render() !!}\n    &lt;/div&gt;\n    ...\n</code></pre> <p>I ara quan guardem una pel.licula podem mostrar una notificaci\u00f3 a l'usuari:</p> <p>CatalogController.php</p> <pre><code>    ...\n    public function postCreate(StoreMovie $request){\n        $movie = new Movie();\n        $movie-&gt;fill($request-&gt;toArray());\n        $movie-&gt;save();\n        Alert::success(\"S'ha guardat la pel.licula\");\n        return redirect('/catalog');\n    }\n    ...\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#acces-login-en-una-app-amb-socialite","title":"ACC\u00c9S (LOGIN) EN UNA APP AMB SOCIALITE","text":"<p>Laravel disposa d'un paquet oficial, anomenat Laravel Socialite que ens ofereix una via r\u00e0pida i f\u00e0cil, per a oferir una forma d'autenticaci\u00f3 amb prove\u00efdors de OAuth, suportant de forma oficial a la data, Facebook, Twitter, LinkedIn, Google, GitHub i Bitbucket. Pot ser est\u00e8s amb facilitat implementant el paquet Socialite Providers</p> <p>Per fer un sistema d'autenticaci\u00f3 per Facebook</p>"},{"location":"Antics/6.5.Laravel.html#control-de-qui-lloga-la-pellicula","title":"Control de qui lloga la pel.licula.","text":"<p>Cada volta que un usuari lloga un pel.licula anem a apuntar-ho en una taula rents. </p> <pre><code>php artisan make:migration create_rents_table\n</code></pre> <ul> <li>Crearem la migraci\u00f3 amb els camps per a la taula rents: id, id_user, id_movie, dateRent, dateReturn i amb les claus fon\u00e0nies corresponents i creem les relaciones molts a molts entre els models movie i users. </li> </ul> <pre><code>    &lt;?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateRentsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('rents', function (Blueprint $table)\n        {\n            $table-&gt;increments('id');\n            $table-&gt;integer('id_movie')-&gt;unsigned();\n            $table-&gt;integer('id_user')-&gt;unsigned();\n            $table-&gt;date('dateRent')-&gt;nullable();\n            $table-&gt;date('dateReturn')-&gt;nullable();\n            $table-&gt;foreign('id_movie')-&gt;references('id')-&gt;on('movies')-&gt;onUpdate('CASCADE')-&gt;onDelete('CASCADE');\n            $table-&gt;foreign('id_user')-&gt;references('id')-&gt;on('users')-&gt;onUpdate('CASCADE')-&gt;onDelete('CASCADE');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('rents');\n    }\n}\n</code></pre> <p>Movie.php</p> <pre><code>public function users(){\n        return $this-&gt;belongstoMany(User::class,'rents','id_movie', 'id_user')-&gt;withPivot(['dateRent','dateReturn']);\n    }\n</code></pre> <p>User.php</p> <pre><code>public function movies(){\n        return $this-&gt;belongstoMany(Movie::class,'rents','id_user', 'id_movie')-&gt;withPivot(['dateRent','dateReturn']);\n    }\n</code></pre> <ul> <li> <p>Fem que quan un usuari llogue s'afegisca un enlla\u00e7 de la rel.laci\u00f3:</p> <ul> <li>Utilitzarem la funci\u00f3 attach de la rel.laci\u00f3 i transaccions per fer les dos operacions o cap.</li> <li>Utilitza la funci\u00f3 updateExistingPivot per a tornar la pel.licula, ja que la relaci\u00f3 ja existeix.</li> </ul> </li> </ul> <pre><code> public function putRent($id){\n        DB::transaction(function () use($id) {\n            $pelicula = Movie::findOrFail($id);\n            $pelicula-&gt;rented = true;\n            $pelicula-&gt;save();\n            $pelicula-&gt;users()-&gt;attach(Auth::id(), ['dateRent' =&gt; date('Y/m/d')]);\n        });\n\n        return redirect(\"/catalog/show/$id\");\n    }\n    public function putReturn($id){\n        DB::transaction(function () use($id){\n            $pelicula = Movie::findOrFail($id);\n            $pelicula = Movie::findOrFail($id);\n            $pelicula-&gt;rented = false;\n            $pelicula-&gt;save();\n            $pelicula-&gt;users()-&gt;updateExistingPivot(Auth::id(), ['dateReturn' =&gt;date('Y/m/d')]);\n        });\n        return redirect(\"/catalog/show/$id\");\n    }\n</code></pre>"},{"location":"Antics/6.5.Laravel.html#que-un-usuari-no-puga-retornar-una-pellicula-que-no-te-llogada","title":"Que un usuari no puga retornar una pel.licula que no te llogada.","text":"<ul> <li>Per a fer-ho m\u00e9s senzill anem a definir una altra rel.laci\u00f3 en la taula users que incloga les pel.licules de l'usuari que el camp dateReturn siga null</li> </ul> <p><code>php  public function rent_movies(){         return $this-&gt;belongsToMany(Movie::class,'rents','id_user', 'id:movie')-&gt;withPivot(['dateRent','dateReturn'])-&gt;wherePivot('dateReturn',null);     }</code> * Utilitzan esta relaci\u00f3 en la vista mostrarem el bot\u00f3 de retornar soles si la pel.licula est\u00e0 entre les llogades per l'usuari. Una rel.laci\u00f3 torna una col.lecci\u00f3 (collection). Anem a utilitzar el m\u00e8todo contains de la col.lecci\u00f3:</p> <pre><code>    @if (Auth::user()-&gt;rent_movies-&gt;contains($pelicula))\n</code></pre> <p>helpets</p>"},{"location":"Antics/6.5.Solucions.html","title":"6.5.Solucions","text":""},{"location":"Antics/6.5.Solucions.html#solucions-videoclub-entrega-5","title":"Solucions VideoClub (entrega 5)","text":""},{"location":"Antics/6.5.Solucions.html#exercisi-2-refactorizar-el-formulari","title":"Exercisi 2 - Refactorizar el formulari","text":"<pre><code>{!! Form::model($pelicula,['class'=&gt;'form-horizontal form-label-left','enctype'=&gt;\"multipart/form-data\",'method'=&gt;'PUT']) !!}\n    {!! Field::text('title') !!}\n    {!! Field::text('year') !!}\n    {!! Field::text('director') !!}\n    {!! Field::select('id_genre') !!}\n    {!! Field::text('poster') !!}\n    {!! Field::textarea('synopsis') !!}\n{!! Form::submit('Enviar',['class'=&gt;'btn btn-success','id'=&gt;'submit']) !!}\n{!! Form::close() !!}\n</code></pre>"},{"location":"Antics/6.5.Solucions.html#exercisi-3-comprovar-les-dades-del-formulari-i","title":"Exercisi 3 - Comprovar les dades del formulari i","text":""},{"location":"Antics/6.5.Solucions.html#exercisi-4-refactoritzar-els-metodes-create-i-update","title":"Exercisi 4 - Refactoritzar els m\u00e8todes create i update","text":"<p>storeMovie.php</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse DateTime;\n\nclass StoreMovie extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        $now = new DateTime;\n        $year = $now-&gt;format(\"Y\");\n        return [\n            'title' =&gt; 'required|max:255',\n            'year' =&gt; \"required|numeric|min:1900|max:$year\",\n            'poster' =&gt; 'required'\n        ];\n    }\n}\n</code></pre> <p>catalogController.php</p> <pre><code>...\npublic function postCreate(StoreMovie $request){\n    $movie = new Movie();\n    $movie-&gt;fill($request-&gt;toArray());\n    $movie-&gt;save();\n    return redirect('/catalog');\n}\npublic function putEdit(StoreMovie $request,$id){\n    $movie = Movie::findOrFail($id);\n    $movie-&gt;fill($request-&gt;toArray());\n    $movie-&gt;save();\n    return redirect(\"/catalog/show/$id\");\n}\n...\n</code></pre> <p>movie.php</p> <pre><code> ..\n protected $guarded = [];\n ..\n</code></pre>"},{"location":"Antics/6.5.Solucions.html#exercisi-5-afegir-relacio-u-a-molts","title":"Exercisi 5 - Afegir relaci\u00f3 u a molts.","text":"<p>genre.php</p> <pre><code>..\npublic function movies(){\n    return $this-&gt;belongsToMany(Movie::class);\n}\n..\n</code></pre>"},{"location":"Antics/6.5.Solucions.html#exercisi-6-afegir-el-camp-genere-al-formulari","title":"Exercisi 6 - Afegir el camp G\u00e8nere al formulari.","text":"<p>myHelpers.php</p> <pre><code>&lt;?php\n\nfunction hazArray($elementos, $campo1, $campo2)\n{\n    $todos = [];\n    foreach ($elementos as $elemento)\n        $todos[$elemento-&gt;$campo1] = $elemento-&gt;$campo2;\n    return $todos;\n}\n</code></pre>"},{"location":"Antics/6.5.Solucions.html#exercisi-8-completant-botons","title":"Exercisi 8 - Completant botons","text":"<p>web.php</p> <pre><code>Route::put('catalog/return/{id}','CatalogController@putReturn');\nRoute::put('catalog/rent/{id}','CatalogController@putRent');\nRoute::delete('catalog/{id}','CatalogController@deleteMovie');\n</code></pre> <p>catalogController.php</p> <pre><code>public function putRent($id){\n    $pelicula = Movie::findOrFail($id);\n    $pelicula-&gt;rented = true;\n    $pelicula-&gt;save();\n    return redirect(\"/catalog/show/$id\");\n}\npublic function putReturn($id){\n    $pelicula = Movie::findOrFail($id);\n    $pelicula-&gt;rented = false;\n    $pelicula-&gt;save();\n    return redirect(\"/catalog/show/$id\");\n}\npublic function deleteMovie($id){\n    Movie::findOrFail($id)-&gt;delete();\n    return redirect(\"/catalog\");\n}\n</code></pre> <p>show.blade.php</p> <pre><code>@if ($pelicula-&gt;rented) \n    &lt;form action= {{action('CatalogController@putReturn',$pelicula-&gt;id)}} method=\"POST\" style=\"display:line\"&gt;\n          {{ method_field('PUT') }}\n          {{ csrf_field() }}\n          &lt;button type=\"submit\" class=\"btn btn-danguer\" style= \"display:inline\" &gt; Tornar Pel\u00edcula&lt;/button&gt;\n    &lt;/form&gt;\n@else \n    &lt;form action= {{action('CatalogController@putRent',$pelicula-&gt;id)}} method=\"POST\" style=\"display:line\"&gt;\n          {{ method_field('PUT') }}\n          {{ csrf_field() }}\n          &lt;button type=\"submit\" class=\"btn btn-warning\" style= \"display:inline\" &gt; Llogar Pel\u00edcula&lt;/button&gt;\n    &lt;/form&gt;\n    &lt;form action= {{action('CatalogController@deleteMovie',$pelicula-&gt;id)}} method=\"POST\" style=\"display:line\"&gt;\n          {{ method_field('DELETE') }}\n          {{ csrf_field() }}\n          &lt;button type=\"submit\" class=\"btn btn-default\" style= \"display:inline\" &gt; Esborrar Pel\u00edcula&lt;/button&gt;\n    &lt;/form&gt;\n@endif\n</code></pre>"},{"location":"Antics/6.5.Solucions.html#exercisi-9-fes-un-manteniment-per-a-la-taula-de-generes-i-fica-la-al-menu","title":"Exercisi 9 - Fes un manteniment per a la taula de g\u00e8neres i fica-la al menu.","text":"<p>web.php</p> <pre><code> Route::get('genre','GenreController@getIndex');\nRoute::get('genre/create','GenreController@getCreate');\nRoute::post('genre/create','GenreController@postCreate');\nRoute::get('genre/edit/{id}','GenreController@getEdit');\nRoute::put('genre/edit/{id}','GenreController@putEdit');\nRoute::get('genre/delete/{id}','GenreController@delete');\n</code></pre> <p>GenreController.php</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Genre;\n\n\nclass GenreController extends Controller\n{\n    public function getIndex(){\n        $generos = Genre::all();\n        return view('genre.index',compact('generos'));\n    }\n\n    public function getCreate(){\n        return view('genre.create');\n    }\n    public function postCreate(Request $request){\n        $genre = new Genre();\n        $genre-&gt;fill($request-&gt;toArray());\n        $genre-&gt;save();\n        return redirect('/genre');\n    }\n    public function getEdit($id){\n        $genre = Genre::findOrFail($id);\n        return view('genre.edit',compact('genre'));\n    }\n    public function putEdit(Request $request,$id){\n        $genre = Genre::findOrFail($id);\n        $genre-&gt;fill($request-&gt;toArray());\n        $genre-&gt;save();\n        return redirect(\"/genre\");\n    }\n    public function delete($id){\n        Genre::findOrFail($id)-&gt;delete();\n        return redirect(\"/genre\");\n    }\n}\n</code></pre> <p>create.blade.php</p> <pre><code>@extends('layouts.master')\n@section('content')\n&lt;div class=\"row\" style=\"margin-top:20px\"&gt;\n    &lt;div class=\"col-md-offset-3 col-md-6\"&gt;\n        &lt;div class=\"panel panel-default\"&gt;\n            &lt;div class=\"panel-heading\"&gt;\n                &lt;h3 class=\"panel-title text-center\"&gt;\n                    &lt;span class=\"glyphicon glyphicon-film\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                    Afegir g\u00e8nere\n                &lt;/h3&gt;\n            &lt;/div&gt;\n            &lt;div class=\"panel-body\" style=\"padding:30px\"&gt;\n                {!! Form::model(new App\\Genre,['class'=&gt;'form-horizontal form-label-left','enctype'=&gt;\"multipart/form-data\"]) !!}\n                    {!! Field::text('titulo') !!}\n                    {!! Form::submit('Enviar',['class'=&gt;'btn btn-success','id'=&gt;'submit']) !!}\n                {!! Form::close() !!}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n@stop\n</code></pre> <p>edit.blade.php</p> <pre><code>@extends('layouts.master')\n@section('content')\n&lt;div class=\"row\" style=\"margin-top:20px\"&gt;\n    &lt;div class=\"col-md-offset-3 col-md-6\"&gt;\n        &lt;div class=\"panel panel-default\"&gt;\n            &lt;div class=\"panel-heading\"&gt;\n                &lt;h3 class=\"panel-title text-center\"&gt;\n                    &lt;span class=\"glyphicon glyphicon-film\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                    Modificar Genere\n                &lt;/h3&gt;\n            &lt;/div&gt;\n            {!! Form::model($genre,['class'=&gt;'form-horizontal form-label-left','enctype'=&gt;\"multipart/form-data\"]) !!}\n                @method('PUT')\n                {!! Field::text('titulo') !!}\n            {!! Form::submit('Enviar',['class'=&gt;'btn btn-success','id'=&gt;'submit']) !!}\n            {!! Form::close() !!}\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n@stop\n</code></pre> <p>index.blade.php</p> <pre><code>@extends('layouts.master')\n@section('content')\n&lt;h2 &gt;G\u00e8neres&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;table class=\"table-bordered table-info\"&gt;\n            &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;Titulo&lt;/th&gt;&lt;th&gt;Operacion&lt;/th&gt;&lt;/tr&gt;\n            @foreach( $generos as $genero )        \n            &lt;tr&gt;\n                &lt;td&gt;{{$genero-&gt;id}}&lt;/td&gt;\n                &lt;td&gt;{{$genero-&gt;titulo}}&lt;/td&gt;\n                &lt;td&gt;&lt;a href='/genre/edit/{{$genero-&gt;id}}'&gt;&lt;i class='fas fa-edit'&gt;&lt;/i&gt;&lt;/a&gt;\n                    &lt;a href='/genre/delete/{{$genero-&gt;id}}'&gt;&lt;i class='fas fa-trash'&gt;&lt;/i&gt;&lt;/a&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            @endforeach\n        &lt;/table&gt;\n    &lt;/div&gt;  \n@stop\n</code></pre>"},{"location":"Antics/6.5.Solucions.html#exercisi-10-fes-que-quan-polse-en-una-pellicula-sobre-un-genere-misquen-les-pellicules-deixe-genere","title":"Exercisi 10 - Fes que quan polse en una pel.licula sobre un g\u00e8nere, m'isquen les pel.licules d'eixe g\u00e8nere.","text":"<p>catalogController.php</p> <pre><code>public function getGenre($id){\n    $id = $id?$id:null;\n    $arrayPeliculas = Movie::where('id_genre',$id)-&gt;get();\n    return view('catalog.index',compact('arrayPeliculas'));\n}\n</code></pre> <p>web.php</p> <pre><code>Route::get('catalog/genre/{id}','CatalogController@getGenre');\n</code></pre> <p>show.php</p> <pre><code>&lt;a href='/catalog/genre/{{$pelicula-&gt;id_genre}}'&gt;{{ $pelicula-&gt;Genero-&gt;titulo}} &lt;/a&gt;\n</code></pre>"},{"location":"Antics/6.5.Solucions.html#exercisi-11-paginacio","title":"Exercisi 11 - Paginaci\u00f2.","text":"<p>catalogController.php</p> <pre><code>public function getIndex(){\n    $arrayPeliculas = Movie::paginate(8);\n    return view('catalog.index',compact('arrayPeliculas'));\n}\npublic function getGenre($id){\n    $id = $id?$id:null;\n    $arrayPeliculas = Movie::where('id_genre',$id)-&gt;paginate(8);\n    return view('catalog.index',compact('arrayPeliculas'));\n}\n</code></pre> <p>index.blade.php</p> <pre><code>@extends('layouts.master')\n@section('content')\n    &lt;h2 &gt;Cat\u00e0leg&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n    @foreach( $arrayPeliculas as $pelicula )        \n        &lt;div class=\"col-xs-6 col-sm-4 col-md-3 text-center\"&gt;\n            &lt;a href=\"{{ url('/catalog/show/'.$pelicula-&gt;id) }}\"&gt;\n                &lt;img src=\"{{$pelicula-&gt;poster}}\" style=\"height:200px\"/&gt; \n                &lt;h4 style=\"min-height:45px;margin:5px 0 10px 0\"&gt;\n                {{$pelicula-&gt;title}} &lt;/h4&gt;\n            &lt;/a&gt;\n        &lt;/div&gt; \n    @endforeach\n    &lt;/div&gt;  \n    &lt;div class=\"row\"&gt;{{ $arrayPeliculas-&gt;render() }}&lt;/div&gt;\n@stop\n</code></pre>"},{"location":"Antics/6.6.Activitat%20co%CC%80pia.html","title":"6.6.Activitat co\u0300pia","text":""},{"location":"Antics/6.6.Activitat%20co%CC%80pia.html#activitat-56-videoclub","title":"Activitat 5.6: VideoClub","text":""},{"location":"Antics/6.6.Activitat%20co%CC%80pia.html#exercisi-1-acces-login-en-una-app-de-laravel-57-amb-socialite","title":"Exercisi 1 - ACC\u00c9S (LOGIN) EN UNA APP DE LARAVEL 5.7 AMB SOCIALITE","text":"<p>Laravel disposa d'un paquet oficial, anomenat Laravel Socialite que ens ofereix una via r\u00e0pida i f\u00e0cil, per a oferir una forma d'autenticaci\u00f3 amb prove\u00efdors de OAuth, suportant de forma oficial a la data, Facebook, Twitter, LinkedIn, Google, GitHub i Bitbucket. Pot ser est\u00e8s amb facilitat implementant el paquet Socialite Providers</p> <p>Fes un sistema d'autenticaci\u00f3 per Facebook</p>"},{"location":"Antics/6.6.Activitat%20co%CC%80pia.html#exercisi-2-control-de-qui-lloga-la-pellicula","title":"Exercisi 2 - Control de qui lloga la pel.licula.","text":"<p>Cada volta que un usuari lloga un pel.licula anem a apuntar-ho en una taula rents. </p> <ul> <li>Crea la migraci\u00f3 amb els camps per a la taula rents: id, idUser, idMovie, dateRent, dateReturn i amb les claus fon\u00e0nies corresponents.</li> <li>Partint de l'exemple de la rel.laci\u00f3 molts a molts entre els models movie i users, crea la rel.laci\u00f3 contr\u00e0ria. </li> </ul> <p>movies.php</p> <pre><code>    public function usuarios(){\n            return $this-&gt;belongstoMany(User::class,'rents','idMovie', 'idUser')-&gt;withPivot(['dateRent','dateReturn']);\n        }\n</code></pre> <ul> <li> <p>Fes que quan un usuari llogue s'afegisca un enlla\u00e7 de la rel.laci\u00f3:</p> <ul> <li>Definix en myHelpers la funci\u00f3 fecha que torne la data del dia de hui en format (Y/m/d) </li> <li>Utilitzarem la funci\u00f3 attach de la rel.laci\u00f3 i transaccions per fer les dos operacions o cap.<pre><code>public function putRent($id)\n{\n    DB::transaction(function ()use ($id) {\n        $pelicula = Movie::findOrFail($id);\n        $pelicula-&gt;rented = true;\n        $pelicula-&gt;save();\n        $pelicula-&gt;usuarios()-&gt;attach(Auth::id(), ['dateRent' =&gt; Fecha()]);\n    });\n    return redirect(\"/catalog/show/$id\");\n}\n</code></pre> </li> </ul> </li> <li> <p>Fes que quan un usuari retorne es modifica l'enlla\u00e7 per afegir la data de retorn.</p> <ul> <li>Utilitza la funci\u00f3 updateExistingPivot</li> </ul> </li> </ul>"},{"location":"Antics/6.6.Activitat%20co%CC%80pia.html#execisi-3-fes-que-un-usuari-no-puga-retornar-una-pellicula-que-no-te-llogada","title":"Execisi 3 - Fes que un usuari no puga retornar una pel.licula que no te llogada.","text":"<ul> <li> <p>Per a fer-ho m\u00e9s senzill anem a definir una altra rel.laci\u00f3 en la taula users que incloga les pel.licules de l'usuari que el camp dateReturn siga null</p> <pre><code>public function rent_movies(){\n        return $this-&gt;belongsToMany(Movie::class,'rents','idUser', 'idMovie')-&gt;withPivot(['dateRent','dateReturn'])-&gt;wherePivot('dateReturn',null);\n    }\n</code></pre> <ul> <li> <p>Utilitzan esta relaci\u00f3 en la vista mostrarem el bot\u00f3 de retornar soles si la pel.licula est\u00e0 entre les llogades per l'usuari. Una rel.laci\u00f3 torna una col.lecci\u00f3 (collection). Anem a utilitzar el m\u00e8todo contains de la col.lecci\u00f3:</p> <p>@if (Auth::user()-&gt;rent_movies-&gt;contains($pelicula)) </p> </li> </ul> </li> <li> <p>Podriem mostrar en la vista show des de quan est\u00e0 llogada la pel.licula. Com que la data la traur\u00e0 en format angl\u00e9s podem fer una funci\u00f3 per a canviar el format (en myHelpers). Tamb\u00e9 podem calcular els dies que fa que est\u00e0 llogada utilitzant el component Jessengers/Date per a php</p> </li> </ul>"},{"location":"Antics/6.6.Activitat%20co%CC%80pia.html#exercisi-4-fes-una-entrada-en-el-menu-per-a-que-lusuari-puga-veure-les-pellicules-que-en-te-llogades","title":"Exercisi 4 - Fes una entrada en el men\u00fa per a que l'usuari puga veure les pel.licules que en te llogades.","text":"<ul> <li>Es pot utlitzar la vista index. </li> </ul>"},{"location":"Antics/6.6.Activitat%20co%CC%80pia.html#exercisi-5-crea-un-sistema-dautenticacio-per-roles-admin-i-user","title":"Exercisi 5 - Crea un sistema d'autenticaci\u00f3 per roles (admin i user).","text":"<ul> <li>Autenticaci\u00f3n de Usuarios y Roles</li> <li>Modifica per a que quan es cree l'usuario mitjan\u00e7ant facebook, tamb\u00e9 li asigne el rol d'usuari.</li> </ul>"},{"location":"Antics/6.6.Activitat%20co%CC%80pia.html#exercisi-6-crea-un-middleware-per-a-filtrar-les-rutes-per-rol","title":"Exercisi 6 - Crea un middleware per a filtrar les rutes per rol.","text":"<ul> <li>Creaci\u00f3n de middleware y autenticaci\u00f3n por Roles</li> </ul>"},{"location":"Antics/6.6.Activitat%20co%CC%80pia.html#exercisi-7-","title":"Exercisi 7 -","text":"<ul> <li>L'aplicaci\u00f3 haur\u00e0 de quedar de la seg\u00fcent manera:<ul> <li>L'usuari normal pot:<ul> <li>Vore el cat\u00e0leg, les pel.licules que te llogades, les pel.licules per genere, llogar i tornar pel.licules.</li> <li>Historial de pel.licules llogades (cal fer-ho)</li> </ul> </li> <li>L'administrador, a m\u00e9s pot:<ul> <li>Crear i editar pel.licules, crud per genere.</li> <li>Llistat de pel.licules llogades en este moment (cal fer-ho)</li> <li>Llistat de lloguers tancats (cal fer-ho)</li> </ul> </li> </ul> </li> </ul> <p>Nota Per a que varios roles puguen utilitzar una ruta anem a modificar el middleware i el fitxer de rutes.</p> <p>middleware:</p> <pre><code>public function handle($request, Closure $next, $role)\n    { \n        foreach (explode(':', $role) as $rol) {\n            if ($request-&gt;user()-&gt;hasRole($rol)) {\n                return $next($request);\n            }\n        }\n        abort(403, 'No tienes autorizaci\u00f3n para ingresar.');\n    }\n</code></pre> <p>Aix\u00f2 espera que la ruta puga tindre m\u00e9s de un rol separats per : Exemple:</p> <pre><code>Route::get('catalog','CatalogController@getIndex')-&gt;middleware('role:admin:user');\n</code></pre> <p>Per tal de modificar el men\u00fa per a que les opcions no siguen tampoc visibles, podem fer-ho afegint el par\u00e0metres roles a l'opci\u00f3 que volem filtrar:</p> <pre><code>'nueva' =&gt; ['title' =&gt; 'Nueva Pel\u00edcula', 'url' =&gt; '/catalog/create', 'roles' =&gt; 'admin'],\n</code></pre> <p>Aix\u00f2 funcionaria si l'usuari tingues un camp role per\u00f2 no el t\u00e9. Aix\u00ed que anem a calcular-ho utilitzan una funci\u00f3 que posarem en el model:</p> <pre><code>public function getRoleAttribute(){\n    return $this-&gt;roles-&gt;first()-&gt;name;\n}\n</code></pre> <p>A\u00e7\u00f2 crea un camp model role amb el valor retornat.</p> <p>** Nota ** </p> <p>Est\u00e0 soluci\u00f3 tan tols ho faria en cas de que un usuari tinga un role. Si en t\u00e9 m\u00e9s hauriem d'adaptar </p>"},{"location":"Antics/6.6.Activitat.html","title":"6.6.Activitat","text":""},{"location":"Antics/6.6.Activitat.html#activitat-56-videoclub","title":"Activitat 5.6: VideoClub","text":""},{"location":"Antics/6.6.Activitat.html#exercisi-1-acces-login-en-una-app-de-laravel-57-amb-socialite","title":"Exercisi 1 - ACC\u00c9S (LOGIN) EN UNA APP DE LARAVEL 5.7 AMB SOCIALITE","text":"<p>Laravel disposa d'un paquet oficial, anomenat Laravel Socialite que ens ofereix una via r\u00e0pida i f\u00e0cil, per a oferir una forma d'autenticaci\u00f3 amb prove\u00efdors de OAuth, suportant de forma oficial a la data, Facebook, Twitter, LinkedIn, Google, GitHub i Bitbucket. Pot ser est\u00e8s amb facilitat implementant el paquet Socialite Providers</p> <p>Fes un sistema d'autenticaci\u00f3 per Facebook</p>"},{"location":"Antics/6.6.Activitat.html#exercisi-2-control-de-qui-lloga-la-pellicula","title":"Exercisi 2 - Control de qui lloga la pel.licula.","text":"<p>Cada volta que un usuari lloga un pel.licula anem a apuntar-ho en una taula rents. </p> <ul> <li>Crea la migraci\u00f3 amb els camps per a la taula rents: id, idUser, idMovie, dateRent, dateReturn i amb les claus fon\u00e0nies corresponents.</li> <li>Partint de l'exemple de la rel.laci\u00f3 molts a molts entre els models movie i users, crea la rel.laci\u00f3 contr\u00e0ria. </li> </ul> <p>movies.php</p> <pre><code>    public function usuarios(){\n            return $this-&gt;belongstoMany(User::class,'rents','idMovie', 'idUser')-&gt;withPivot(['dateRent','dateReturn']);\n        }\n</code></pre> <ul> <li> <p>Fes que quan un usuari llogue s'afegisca un enlla\u00e7 de la rel.laci\u00f3:</p> <ul> <li>Definix en myHelpers la funci\u00f3 fecha que torne la data del dia de hui en format (Y/m/d) </li> <li>Utilitzarem la funci\u00f3 attach de la rel.laci\u00f3 i transaccions per fer les dos operacions o cap.<pre><code>public function putRent($id)\n{\n    DB::transaction(function ()use ($id) {\n        $pelicula = Movie::findOrFail($id);\n        $pelicula-&gt;rented = true;\n        $pelicula-&gt;save();\n        $pelicula-&gt;usuarios()-&gt;attach(Auth::id(), ['dateRent' =&gt; Fecha()]);\n    });\n    return redirect(\"/catalog/show/$id\");\n}\n</code></pre> </li> </ul> </li> <li> <p>Fes que quan un usuari retorne es modifica l'enlla\u00e7 per afegir la data de retorn.</p> <ul> <li>Utilitza la funci\u00f3 updateExistingPivot</li> </ul> </li> </ul>"},{"location":"Antics/6.6.Activitat.html#execisi-3-fes-que-un-usuari-no-puga-retornar-una-pellicula-que-no-te-llogada","title":"Execisi 3 - Fes que un usuari no puga retornar una pel.licula que no te llogada.","text":"<ul> <li> <p>Per a fer-ho m\u00e9s senzill anem a definir una altra rel.laci\u00f3 en la taula users que incloga les pel.licules de l'usuari que el camp dateReturn siga null</p> <pre><code>public function rent_movies(){\n        return $this-&gt;belongsToMany(Movie::class,'rents','idUser', 'idMovie')-&gt;withPivot(['dateRent','dateReturn'])-&gt;wherePivot('dateReturn',null);\n    }\n</code></pre> <ul> <li> <p>Utilitzan esta relaci\u00f3 en la vista mostrarem el bot\u00f3 de retornar soles si la pel.licula est\u00e0 entre les llogades per l'usuari. Una rel.laci\u00f3 torna una col.lecci\u00f3 (collection). Anem a utilitzar el m\u00e8todo contains de la col.lecci\u00f3:</p> <p>@if (Auth::user()-&gt;rent_movies-&gt;contains($pelicula)) </p> </li> </ul> </li> <li> <p>Podriem mostrar en la vista show des de quan est\u00e0 llogada la pel.licula. Com que la data la traur\u00e0 en format angl\u00e9s podem fer una funci\u00f3 per a canviar el format (en myHelpers). Tamb\u00e9 podem calcular els dies que fa que est\u00e0 llogada utilitzant el component Jessengers/Date per a php</p> </li> </ul>"},{"location":"Antics/6.6.Activitat.html#exercisi-4-fes-una-entrada-en-el-menu-per-a-que-lusuari-puga-veure-les-pellicules-que-en-te-llogades","title":"Exercisi 4 - Fes una entrada en el men\u00fa per a que l'usuari puga veure les pel.licules que en te llogades.","text":"<ul> <li>Es pot utlitzar la vista index. </li> </ul>"},{"location":"Antics/6.6.Activitat.html#exercisi-5-crea-un-sistema-dautenticacio-per-roles-admin-i-user","title":"Exercisi 5 - Crea un sistema d'autenticaci\u00f3 per roles (admin i user).","text":"<ul> <li>Autenticaci\u00f3n de Usuarios y Roles</li> <li>Modifica per a que quan es cree l'usuario mitjan\u00e7ant facebook, tamb\u00e9 li asigne el rol d'usuari.</li> </ul>"},{"location":"Antics/6.6.Activitat.html#exercisi-6-crea-un-middleware-per-a-filtrar-les-rutes-per-rol","title":"Exercisi 6 - Crea un middleware per a filtrar les rutes per rol.","text":"<ul> <li>Creaci\u00f3n de middleware y autenticaci\u00f3n por Roles</li> </ul>"},{"location":"Antics/6.6.Activitat.html#exercisi-7-","title":"Exercisi 7 -","text":"<ul> <li>L'aplicaci\u00f3 haur\u00e0 de quedar de la seg\u00fcent manera:<ul> <li>L'usuari normal pot:<ul> <li>Vore el cat\u00e0leg, les pel.licules que te llogades, les pel.licules per genere, llogar i tornar pel.licules.</li> <li>Historial de pel.licules llogades (cal fer-ho)</li> </ul> </li> <li>L'administrador, a m\u00e9s pot:<ul> <li>Crear i editar pel.licules, crud per genere.</li> <li>Llistat de pel.licules llogades en este moment (cal fer-ho)</li> <li>Llistat de lloguers tancats (cal fer-ho)</li> </ul> </li> </ul> </li> </ul> <p>Nota Per a que varios roles puguen utilitzar una ruta anem a modificar el middleware i el fitxer de rutes.</p> <p>middleware:</p> <pre><code>public function handle($request, Closure $next, $role)\n    { \n        foreach (explode(':', $role) as $rol) {\n            if ($request-&gt;user()-&gt;hasRole($rol)) {\n                return $next($request);\n            }\n        }\n        abort(403, 'No tienes autorizaci\u00f3n para ingresar.');\n    }\n</code></pre> <p>Aix\u00f2 espera que la ruta puga tindre m\u00e9s de un rol separats per : Exemple:</p> <pre><code>Route::get('catalog','CatalogController@getIndex')-&gt;middleware('role:admin:user');\n</code></pre> <p>Per tal de modificar el men\u00fa per a que les opcions no siguen tampoc visibles, podem fer-ho afegint el par\u00e0metres roles a l'opci\u00f3 que volem filtrar:</p> <pre><code>'nueva' =&gt; ['title' =&gt; 'Nueva Pel\u00edcula', 'url' =&gt; '/catalog/create', 'roles' =&gt; 'admin'],\n</code></pre> <p>Aix\u00f2 funcionaria si l'usuari tingues un camp role per\u00f2 no el t\u00e9. Aix\u00ed que anem a calcular-ho utilitzan una funci\u00f3 que posarem en el model:</p> <pre><code>public function getRoleAttribute(){\n    return $this-&gt;roles-&gt;first()-&gt;name;\n}\n</code></pre> <p>A\u00e7\u00f2 crea un camp model role amb el valor retornat.</p> <p>** Nota ** </p> <p>Est\u00e0 soluci\u00f3 tan tols ho faria en cas de que un usuari tinga un role. Si en t\u00e9 m\u00e9s hauriem d'adaptar </p>"},{"location":"Antics/6.6.Laravel.html","title":"FRAMEWORK LARAVEL","text":""},{"location":"Antics/6.6.Laravel.html#api","title":"API","text":""},{"location":"Antics/6.6.Laravel.html#creant-el-resource-controller","title":"Creant el Resource controller","text":"<p>Laravel pot crear un controlador amb m\u00e8todes ja establits per a una api, i tindre llest tot per a l'\u00fas dels verbs HTTP. Tot en 1 senzill pas:</p> <pre><code>php artisan make:controller Api/MovieController -r\n</code></pre> <p>El -r, significa que aquest controller s'usar\u00e0 com a recurs, i laravel deixa els m\u00e8todes llestos per a ser omplits. De no agregar -r, es crear\u00e0 un controller totalment buit, la qual cosa ens donaria m\u00e9s treball, i a ning\u00fa li agrada treballar. El creem dins del directori api per separar-lo dels altres. Vegem com ens va quedar:</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\n\nclass MovieController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index()\n    {\n        //\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create()\n    {\n        //\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request)\n    {\n        //\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show($id)\n    {\n        //\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit($id)\n    {\n        //\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, $id)\n    {\n        //\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy($id)\n    {\n        //\n    }\n}\n</code></pre> <p>Ara crearem la ruta per a accedir al nostre controlador. Hem d'obrir l'arxiu routes/api.php i agregarem la ruta de la seg\u00fcent forma:</p> <pre><code>Route::resource('movie', 'Api\\MovieController');\n</code></pre> <p>Laravel configurar\u00e0 les rutes per als verbs http que vulguem usar, com GET, POST, PUT, PATCH i DELETE. Si seguim l'estructura definida en aquesta llista, no hi ha per on perdre's. Crearem una pelicula amb una petici\u00f3 POST, i despr\u00e9s demanarem una pelicula usant GET.  Primer, per a guardar dades, si ens fixem en la llista de rutes, el verb POST est\u00e0 associat amb api/movie, i amb el m\u00e8tode movie.store. Segon, per a mostrar les dades, el m\u00e8tode GET est\u00e0 associat amb api/movie/{movie}, i amb el m\u00e8tode movie.show.</p> <pre><code>public function store(Request $request)\n{\n    $movie = new Movie();\n    $movie-&gt;fill($request-&gt;toArray());\n    $movie-&gt;save();\n}\n\npublic function show($id)\n{\n    //Solicitamos al modelo el Pokemon con el id solicitado por GET.\n    return Movie::where('id', $id)-&gt;get();\n}\n</code></pre> <p>I ara ho provem amb Postman:</p> <p></p> <p></p>"},{"location":"Antics/6.6.Laravel.html#api-resources","title":"API Resources","text":"<p>Podem utilitzar esta funcionalitat de Eloquent per a filtrar la informaci\u00f3 que li oferim a l'usuari de la API</p> <p>Aix\u00ed per a crer un API Resource utilitzarem l'artisan:</p> <pre><code>php artisan make:resource MovieResource\n</code></pre> <p>que crear\u00e0 un fitxer MovieResource en la carpeta Resource de http</p> <p>Ara canviarem el controlador per a que pase atrav\u00e9s d'este recurs:</p> <pre><code>public function index()\n{\n    return MovieResource::collection(Movie::all());\n}\n</code></pre> <p>I modificarem el resource per a que torne uns camps espec\u00edfics</p> <pre><code>class MovieResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n    //return parent::toArray($request);\n    return [\n        'id' =&gt; $this-&gt;id,\n        'title' =&gt; $this-&gt;title,\n        'year' =&gt; $this-&gt;year,\n        'genere' =&gt; $this-&gt;descGenre,\n    ];\n    }\n}\n</code></pre> <p>I ja ho tenim. Ara tots els resultats vindran filtrats per la funci\u00f3 toArray del Resource.</p>"},{"location":"Antics/6.6.Laravel.html#autenticacio-installa-el-paquet-dautenticacio-api-passport","title":"Autenticaci\u00f3: Instal\u00b7la el paquet d'autenticaci\u00f3 API\u200a\u2014\u200aPassport","text":"<p>Aquest paquet \u00e9s fonamental ja que, com el seu nom l'indica, Laravel posseeix un sistema tradicional d'autenticaci\u00f3 mitjan\u00e7ant token per\u00f2, per al cas del desenvolupament d'una API, Laravel ofereix una cosa espec\u00edfica. Laravel Passport.</p> <p>Les APIs utilitzen t\u00edpicament tokens per a autenticar usuaris per\u00f2 no per a mantindre les sessions entre els requests. Laravel ajuda al fet que l'autenticaci\u00f3 a trav\u00e9s de la API siga molt simple amb Laravel Passport, sistema que proveeix una implementaci\u00f3 total de OAuth2 per a la teua aplicaci\u00f3 de Laravel.</p> <p>Seguirem els passos indicats en la documentaci\u00f3 oficial</p> <ul> <li> <p>Comen\u00e7a la instal\u00b7laci\u00f3 a trav\u00e9s del manejador de paquets, composer, a trav\u00e9s del comando:</p> <pre><code>composer require laravel/passport\n</code></pre> </li> <li> <p>Realitza la migraci\u00f3</p> <pre><code>php artisan migrate\n</code></pre> </li> </ul> <p></p> <p>La migraci\u00f3 generar\u00e0 les taules que necessitar\u00e0 la teua aplicaci\u00f3 per a emmagatzemar els clients i els seus token d'acc\u00e9s. </p> <p></p>"},{"location":"Antics/6.6.Laravel.html#installacio-i-generacio-de-les-claus","title":"Instal\u00b7laci\u00f3 i generaci\u00f3 de les claus","text":"<p>Despr\u00e9s, has d'executar el comando passport:install. Aquest comando crear\u00e0 les claus d'encriptaci\u00f3 necess\u00e0ries per a generar els tokens d'acc\u00e9s. Addicionalment el comando crear\u00e0 el \u201cpersonal access\u201d i \u201cpassword grant\u201d dels clients que s'usaran per a generar els tokens d'acc\u00e9s:</p> <pre><code>php artisan passport:install\n</code></pre>"},{"location":"Antics/6.6.Laravel.html#configurar-passport","title":"Configurar Passport","text":"<p>Despr\u00e9s d'executar aquest comando, cal agregar el trait Laravel\\Passport\\HasApiTokens al model App\\User. Aquest Trait proveeix alguns m\u00e8todes d'ajuda al teu model que et permetran inspeccionar al token i scope dels usuaris autenticats:</p> <pre><code> &lt;?php\n\n namespace App;\n\n use Laravel\\Passport\\HasApiTokens;\n use Illuminate\\Notifications\\Notifiable;\n use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\n class User extends Authenticatable\n {\n    use HasApiTokens, Notifiable;\n\n     ...\n}\n</code></pre> <p>Despr\u00e9s el teu haur\u00e0s de cridar al m\u00e8tode Passport::routes dins del m\u00e8tode boot en la teua app/Providers/AuthServiceProvider. Aquest m\u00e8tode registrar\u00e0 les rutes necess\u00e0ries per a emetre tokens d'acc\u00e9s i revocar tokens d'acc\u00e9s, clients i tokens d'acc\u00e9s personal:</p> <pre><code>&lt;?php\n\nnamespace App\\Providers;\n\nuse Laravel\\Passport\\Passport;\nuse Illuminate\\Support\\Facades\\Gate;\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    protected $policies = [\n        'App\\Model' =&gt; 'App\\Policies\\ModelPolicy',\n    ];\n\n    public function boot()\n    {\n        $this-&gt;registerPolicies();\n\n        Passport::routes();\n    }\n}\n</code></pre> <p>Per a acabar en el teu arxiu de configuraci\u00f3 config/auth.php haur\u00e0s d'ajustar l'opci\u00f3 del driver de l'autenticaci\u00f3 de la api en el \u2018guards\u2019 a passport. Aix\u00f2 li indicar\u00e0 a la teua aplicaci\u00f3 que use el TokenGuard de Passport en autenticar les sol\u00b7licituds API entrants:</p> <pre><code>'guards' =&gt; [\n    'web' =&gt; [\n        'driver' =&gt; 'session',\n        'provider' =&gt; 'users',\n    ],\n\n    'api' =&gt; [\n        'driver' =&gt; 'passport',\n        'provider' =&gt; 'users',\n    ],\n ],\n</code></pre>"},{"location":"Antics/6.6.Laravel.html#creacio-de-les-rutes-de-la-api","title":"Creaci\u00f3 de les rutes de la API","text":"<p>A continuaci\u00f3 el que es requereix \u00e9s la creaci\u00f3 de les rutes necess\u00e0ries per a la teua api. Per a aix\u00f2 has d'ingressar al servei de rutes que Laravel proveeix en forma exclusiva per a una api routes/api.php</p> <pre><code>&lt;?php\nuse Illuminate\\Http\\Request;\n\nRoute::group(['prefix' =&gt; 'auth'], function () {\n    Route::post('login', 'Authcontroller@login');\n    Route::post('signup', 'Authcontroller@signup');\n\n    Route::group(['middleware' =&gt; 'auth:api'], function() {\n        Route::get('logout', 'Authcontroller@logout');\n        Route::get('user', 'Authcontroller@user');\n    });\n});\n</code></pre>"},{"location":"Antics/6.6.Laravel.html#creacio-del-controlador-per-a-lautenticacio","title":"Creaci\u00f3 del controlador per a l'autenticaci\u00f3","text":"<p>En visualitzar les rutes que hem generat m\u00e9s amunt podr\u00e0s notar que s'especifica un controlador que encara no hem creat. Per a aix\u00f2 haurem de crear aquest controlador a trav\u00e9s del comando:</p> <pre><code>php artisan make:controller AuthController\n</code></pre> <p>Despr\u00e9s, haurem de crear cadascun dels m\u00e8todes que estem cridant: signup / login / logout / user</p> <p>Per a aix\u00f2 escriurem dins del controlador el seg\u00fcent:</p> <pre><code>&lt;?php\nnamespace App\\Http\\Controllers;\nuse App\\User;\nuse Carbon\\Carbon;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nclass AuthController extends Controller\n{\n    public function signup(Request $request)\n    {\n        $request-&gt;validate([\n            'name'     =&gt; 'required|string',\n            'email'    =&gt; 'required|string|email|unique:users',\n            'password' =&gt; 'required|string|confirmed',\n        ]);\n        $user = new User([\n            'name'     =&gt; $request-&gt;name,\n            'email'    =&gt; $request-&gt;email,\n            'password' =&gt; bcrypt($request-&gt;password),\n        ]);\n        $user-&gt;save();\n        return response()-&gt;json([\n            'message' =&gt; 'Successfully created user!'], 201);\n    }\n\n    public function login(Request $request)\n    {\n        $request-&gt;validate([\n            'email'       =&gt; 'required|string|email',\n            'password'    =&gt; 'required|string',\n            'remember_me' =&gt; 'boolean',\n        ]);\n        $credentials = request(['email', 'password']);\n        if (!Auth::attempt($credentials)) {\n            return response()-&gt;json([\n                'message' =&gt; 'Unauthorized'], 401);\n        }\n        $user = $request-&gt;user();\n        $tokenResult = $user-&gt;createToken('Personal Access Token');\n        $token = $tokenResult-&gt;token;\n        if ($request-&gt;remember_me) {\n            $token-&gt;expires_at = Carbon::now()-&gt;addWeeks(1);\n        }\n        $token-&gt;save();\n        return response()-&gt;json([\n            'access_token' =&gt; $tokenResult-&gt;accessToken,\n            'token_type'   =&gt; 'Bearer',\n            'expires_at'   =&gt; Carbon::parse(\n                $tokenResult-&gt;token-&gt;expires_at)\n                    -&gt;toDateTimeString(),\n        ]);\n    }\n\n    public function logout(Request $request)\n    {\n        $request-&gt;user()-&gt;token()-&gt;revoke();\n        return response()-&gt;json(['message' =&gt; \n            'Successfully logged out']);\n    }\n\n    public function user(Request $request)\n    {\n        return response()-&gt;json($request-&gt;user());\n    }\n}\n</code></pre> <p>Per a les proves, podem utilitzar Postman (t\u00e9 opci\u00f3 per a extensi\u00f3 en chrome o com a app). Per a la correcta utilitzaci\u00f3, cal configurar les seg\u00fcents dues cap\u00e7aleres:</p> <pre><code>Content-Type: application/json\nX-Requested-With: XMLHttpRequest\n</code></pre> <p> </p> <p>Creaci\u00f3 usuari</p> <p></p> <p>login</p> <p></p> <p>visualitzaci\u00f3 usuari</p> <p></p> <p>logout </p> <p></p> <p>Per a que la api de movies funcione quan estic autenticat cal possar-la dins del  grup de rutes autenticades en el fitxer de rutes api.php</p> <pre><code>Route::group(['prefix' =&gt; 'auth'], function () {\n    Route::post('login', 'Authcontroller@login');\n    Route::post('signup', 'Authcontroller@signup');\n\n    Route::group(['middleware' =&gt; 'auth:api'], function() {\n        Route::get('logout', 'Authcontroller@logout');\n        Route::get('user', 'Authcontroller@user');\n        Route::resource('movie', 'Api\\MovieController');\n    });\n});\n</code></pre> <p>Podeu aprofundir m\u00e9s en aquest enlla\u00e7</p>"},{"location":"Antics/6.7.Activitat.html","title":"6.7.Activitat","text":""},{"location":"Antics/6.7.Activitat.html#activitat-57-videoclub","title":"Activitat 5.7: VideoClub","text":"<p>Anem a crear l'api per al nostre videoclub</p>"},{"location":"Antics/6.7.Activitat.html#exercisi-1-completa-lapi-per-a-les-pellicules","title":"Exercisi 1 - Completa l'api per a les pel.licules","text":""},{"location":"Antics/6.7.Activitat.html#exercisi-2-crea-lapi-per-per-als-generes","title":"Exercisi 2 - Crea l'api per per als generes","text":""},{"location":"Antics/6.7.Activitat.html#exercisi-3-protegueix-les-rutes-mitjancant-laravel-passport","title":"Exercisi 3 - Protegueix les rutes mitjan\u00e7ant laravel passport","text":""},{"location":"Antics/6.7.Activitat.html#exercisi-4-crea-els-metodes-per-a-llogar-i-tornar-una-pellicula-mitjancant-lapi","title":"Exercisi 4 - Crea els metodes per a llogar i tornar una pel.licula mitjan\u00e7ant l'api.","text":""},{"location":"Antics/6.7.Activitat.html#exercisi-5-opcional-fes-que-el-botons-de-llogar-pellicula-i-tornar-pellicula-funcionen-mitjancant-lapi","title":"Exercisi 5 (Opcional) - Fes que el botons de llogar pel.licula i tornar pel.licula funcionen mitjan\u00e7ant l'api.","text":""},{"location":"Antics/Middleware%20o%20filtres.html","title":"Middleware o filtres","text":""},{"location":"Antics/Middleware%20o%20filtres.html#middleware-o-filtres","title":"Middleware o filtres","text":"<p>Els components anomenats Middleware s\u00f3n un mecanisme proporcionat per Laravel per a filtrar les peticions HTTP que es realitzen a una aplicaci\u00f3.  Un filtre o middleware es defineix com una classe PHP emmagatzemada en un fitxer dins de la carpeta app/Http/Middleware.  Cada middleware s'encarregar\u00e0 d'aplicar un tipus concret de filtre i de decidir que realitzar amb la petici\u00f3 realitzada: </p> <ul> <li>permetre la seua execuci\u00f3</li> <li>donar un error</li> <li>redireccionar a una altra p\u00e0gina en cas de no permetre-la.</li> </ul> <p>Laravel inclou diversos filtres per defecte, un d'ells \u00e9s l'encarregat de realitzar l'autenticaci\u00f3 dels usuaris. Aquest filtre ho podem aplicar sobre una ruta, un conjunt de rutes o sobre un controlador en concret. </p> <p>Aquest middleware s'encarregar\u00e0 de filtrar les peticions a aquestes rutes: en cas d'estar loguegat i tenir permisos d'acc\u00e9s li permetr\u00e0 continuar amb la petici\u00f3, i en cas de no estar autenticat el redireccionar\u00e1 al formulari de login.</p> <p>Laravel inclou middleware per a gestionar l'autenticaci\u00f3, el mode manteniment, la protecci\u00f3 contra CSRF, i alguns mes. Tots aquests filtres els podem trobar en la carpeta app/Http/Middleware, els quals els podem modificar o ampliar la seua funcionalitat. Per\u00f2 a m\u00e9s d'aquests podem crear els nostres propis Middleware com veurem a continuaci\u00f3.</p>"},{"location":"Antics/Middleware%20o%20filtres.html#definir-un-nou-middleware","title":"Definir un nou Middleware","text":"<p>Per a crear un nou Middleware podem utilitzar el comando de Artisan: </p> <pre><code>php artisan make:middleware MyMiddleware\n</code></pre> <p>Aquest comanament crear\u00e0 la classe MyMiddleware dins de la carpeta app/Http/Middleware amb el seg\u00fcent contingut per defecte:</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Middleware;\nuse Closure;\n\nclass MyMiddleware\n{\n    /**\n    * Handle an incoming request.\n    *\n    * @param  \\Illuminate\\Http\\Request  $request\n    * @param  \\Closure  $next\n    * @return mixed\n    */\n    public function handle($request, Closure $next)\n    {\n        return $next($request);\n    }   \n}\n</code></pre> <p>El codi generat per Artisan ja ve preparat perqu\u00e8 puguem escriure directament la implementaci\u00f3 del filtre a realitzar dins de la funci\u00f3 handle. Com podem veure, aquesta funci\u00f3 solament inclou el valor de tornada amb una trucada a return $next($request); , que el que fa \u00e9s continuar amb la petici\u00f3 i executar el m\u00e8tode que ha de processar-la. Com a entrada la funci\u00f3 handle rep dos par\u00e0metres:</p> <ul> <li>$request: En la qual ens v\u00e9nen tots els par\u00e0metres d'entrada de la peticion.</li> <li>$next: El m\u00e8tode o funci\u00f3 que ha de processar la petici\u00f3.</li> </ul> <p>Per exemple podr\u00edem crear un filtre que redirigisca al home si l'usuari t\u00e9 menys de 18 anys i en un altre cas que li permeta accedir a la ruta:</p> <pre><code>public function handle($request, Closure $next) {\n    if ($request-&gt;input('age') &lt; 18) { \n        return redirect('home');\n    }\n    return $next($request); \n}\n</code></pre> <p>Com hem dit abans, podem fer tres coses amb una petici\u00f3:</p> <ul> <li>Si tot \u00e9s correcte permetre que la petici\u00f3 continue retornant: return $next($request);</li> <li>Realitzar una redirecci\u00f3 a una altra ruta per a no permetre l'acc\u00e9s amb: return redirect('home');</li> <li>Llan\u00e7ar una excepci\u00f3 o cridar al m\u00e8tode abort per a mostrar una p\u00e0gina d'error: abort(403, 'Unauthorized action.');</li> </ul>"},{"location":"Antics/Middleware%20o%20filtres.html#us-de-middleware","title":"\u00das de Middleware","text":"<p>De moment hem vist perqu\u00e8 val i com es defineix un Middleware, en aquesta secci\u00f3 veurem com utilitzar-los. Laravel permet la utilitzaci\u00f3 de Middleware de tres formes diferents: global, associat a rutes o grups de rutes, o associat a un controlador o a un m\u00e8tode d'un controlador.  En els tres casos ser\u00e0 necessari registrar primer el Middleware en la classe app/Http/Kernel.php.</p>"},{"location":"Antics/Middleware%20o%20filtres.html#middleware-global","title":"Middleware global","text":"<p>Per a fer que un Middleware s'execute amb totes les peticions HTTP realitzades a una aplicaci\u00f3 simplement ho hem de registrar en el array $middleware definit en la classe app/Http/Kernel.php. </p> <p>Per exemple:</p> <pre><code>protected $middleware = \n[ \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class, \n    \\App\\Http\\Middleware\\EncryptCookies::class, \n    \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class, \n    \\Illuminate\\Session\\Middleware\\StartSession::class, \n    \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n    \\App\\Http\\Middleware\\VerifyCsrfToken::class, \n    \\App\\Http\\Middleware\\MyMiddleware::class,\n];\n</code></pre> <p>En aquest exemple hem registrat la classe MyMiddleware al final del array. Si volem que el nostre middleware s'execute abans que un altre filtre simplement haurem de col\u00b7locar-ho abans en la posici\u00f3 del array.</p>"},{"location":"Antics/Middleware%20o%20filtres.html#middleware-associat-a-rutes","title":"Middleware associat a rutes","text":"<p>En el cas de voler que el nostre middleware s'execute solament quan es cride a una ruta o a un grup de rutes tamb\u00e9 haurem de registrar-ho en el fitxer app/Http/Kernel.php, per\u00f2 en el array $routeMiddleware. En afegir-ho a aquest array a m\u00e9s haurem d'assignar-li un nom o clau, que ser\u00e0 el que despr\u00e9s utilitzarem associar-ho amb una ruta.</p> <p>En primer lloc afegim el nostre filtre al array i li assignem el nom \"CheckAge\":</p> <pre><code>protected $routeMiddleware = [\n'auth' =&gt; \\App\\Http\\Middleware\\Authenticate::class,\n'auth.basic' =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class, \n'guest' =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n'CheckAge' =&gt; \\App\\Http\\Middleware\\MyMiddleware::class,\n];\n</code></pre> <p>Una vegada registrat el nostre middleware ja ho podem utilitzar en el fitxer de rutes app/Http/routes.php mitjan\u00e7ant la clau o nom assignat, per exemple:</p> <pre><code>Route::get('profile', [\n'middleware' =&gt; 'checkAge',\n'uses' =&gt; 'Usercontroller@showprofile'\n]);\n</code></pre> <p>Si volem associar diversos middleware amb una ruta simplement hem d'afegir un array amb les claus. Els filtres s'executaran en l'ordre indicat en aquest array:</p> <pre><code>Route::get('profile', [\n'middleware' =&gt; ['Auth','checkAge'],\n'uses' =&gt; 'Usercontroller@showprofile'\n]);\n</code></pre> <p>Laravel tamb\u00e9 permet associar els filtres amb les rutes usant el m\u00e8tode middleware() sobre la definici\u00f3 de la ruta de la forma:</p> <pre><code>Route::get('/', function () { // ...})-&gt;middleware(['first', 'second']);\n\n// O sobre un controlador:\n\nRoute::get('profile', 'Usercontroller@showprofile')-&gt;middleware('auth');\n</code></pre>"},{"location":"Antics/Middleware%20o%20filtres.html#middleware-dins-de-controladors","title":"Middleware dins de controladors","text":"<p>Tamb\u00e9 \u00e9s possible indicar el middleware a utilitzar des de dins d'un controlador. En aquest cas els filtres tamb\u00e9 hauran d'estar registrador en el array $routeMiddleware del fitxer app/Http/Kernel.php. </p> <p>Per a utilitzar-los es recomana realitzar l'assignaci\u00f3 en el constructor del controlador i assignar els filtres usant la seua clau mitjan\u00e7ant el m\u00e8tode middleware. Podrem indicar que es filtren tots els m\u00e8todes, solament alguns, o tots excepte els indicats, per exemple:</p> <pre><code>class UserController extends Controller {\n/\nInstantiate a new UserController instance. \n@return void\n/\npublic function __construct() {\n    // Filtrar tots els m\u00e8todes \n    $this-&gt;middleware('auth');\n    // Filtrar solament aquests m\u00e8todes...\n    $this-&gt;middleware('log', ['only' =&gt; ['fooAction', 'barAction']]);\n    // Filtrar tots els m\u00e8todes excepte...\n    $this-&gt;middleware('subscribed', ['except' =&gt; ['fooAction', 'barAction']]); }\n}\n</code></pre>"},{"location":"Antics/Middleware%20o%20filtres.html#revisar-els-filtres-assignats","title":"Revisar els filtres assignats","text":"<p>En crear una aplicaci\u00f3 Web \u00e9s important assegurar-se que totes les rutes definides s\u00f3n correctes i que les parts privades realment estan protegides. Per a a\u00e7\u00f2 Laravel inclou el seg\u00fcent m\u00e8tode de Artisan:</p> <pre><code>php artisan route:list\n</code></pre> <p>Aquest m\u00e8tode mostra una taula amb totes les rutes, m\u00e8todes i accions. A m\u00e9s per a cada ruta indica els filtres associats, tant si estan definits des del fitxer de rutes com des de dins d'un controlador. Per tant \u00e9s molt \u00fatil per a comprovar que totes les rutes i filtres que hem definit s'hagen creat correctament.</p>"},{"location":"Antics/Middleware%20o%20filtres.html#pas-de-parametres","title":"Pas de par\u00e0metres","text":"<p>Un Middleware tamb\u00e9 pot rebre par\u00e0metres. Per exemple, podem crear un filtre per a comprovar si l'usuari loguejat t\u00e9 un determinat rol indicat per par\u00e0metre. Per a a\u00e7\u00f2 el primer que hem de fer \u00e9s afegir un tercer par\u00e0metre a la funci\u00f3 handle del Middleware:</p> <pre><code>&lt;?php\n\nnamespace App\\Http\\Middleware;\nuse Closure;\n\n    class CheckRole\n    {\n    /**\n    * Handle the incoming request.\n    *\n    * @param  \\Illuminate\\Http\\Request  $request\n    * @param  \\Closure  $next\n    * @param  string  $role\n    * @return mixed\n    */\n        public function handle($request, Closure $next, $role)\n        {\n            if (! $request-&gt;user()-&gt;hasRole($role)) {\n            // Redirect...\n        }\n            return $next($request);\n        }\n\n    }\n</code></pre> <p>En el codi anterior d'exemple s'ha afegit el tercer par\u00e0metre $role a la funci\u00f3. Si el nostre filtre necessita rebre m\u00e9s par\u00e0metres simplement haur\u00edem d'afegir-los de la mateixa forma a aquesta funci\u00f3.</p> <p>Per a passar un par\u00e0metre a un middleware en la definici\u00f3 d'una ruta ho haurem d'afegir a continuaci\u00f3 del nom del filtre separat per dos punts, per exemple:</p> <pre><code>Route::put('post/{id}', ['middleware' =&gt;    'role:editor', function ($id) { //\n}]);\n</code></pre> <p>Si hem de passar m\u00e9s d'un par\u00e0metre al filtre els separarem per comes, per exemple: role:editor,admin.</p>"},{"location":"Antics/Middleware%20o%20filtres.html#rutes-avancades","title":"Rutes avan\u00e7ades","text":"<p>Laravel permet crear grups de rutes per a especificar opcions comunes a totes elles, com per exemple un middleware, un prefix, un subdomini o un espai de noms que s'ha d'aplicar sobre totes elles.</p> <p>A continuaci\u00f3 anem a veure algunes d'aquestes opcions, en tots els casos usarem el m\u00e8tode Route::group, el qual rebr\u00e0 com a primer par\u00e0metre les opcions a aplicar sobretot el grup i com a segon par\u00e0metre una clausula amb la definici\u00f3 de les rutes.</p>"},{"location":"Antics/Middleware%20o%20filtres.html#middleware-sobre-un-grup-de-rutes","title":"Middleware sobre un grup de rutes","text":"<p>Aquesta opci\u00f3 \u00e9s molt \u00fatil per a aplicar un filtre sobretot un conjunt de rutes, d'aquesta forma solament haurem d'especificar el filtre una vegada i a m\u00e9s ens permetr\u00e0 dividir les rutes en seccions (distingint millor al fet que seccions se'ls est\u00e0 aplicant un filtre):</p> <pre><code>Route::group(['middleware' =&gt; 'auth'], function ()      { \n    Route::get('/', function () {\n    // Ruta filtrada pel middleware });\n    Route::get('user/profile', function () { // Ruta        filtrada pel middleware\n    }); \n});\n</code></pre>"},{"location":"Antics/Middleware%20o%20filtres.html#grups-de-rutes-amb-prefix","title":"Grups de rutes amb prefix","text":"<p>Tamb\u00e9 podem utilitzar l'opci\u00f3 d'agrupar rutes per a indicar un prefix que s'afegir\u00e0 a totes les URL del grup. Per exemple, si volem definir una secci\u00f3 de rutes que comencen pel prefix dashboard haur\u00edem de fer el seg\u00fcent:</p> <pre><code>Route::group(['prefix' =&gt; 'dashboard'], function ()         { Route::get('catalog', function ()         { / ... / }); Route::get('users', function ()       { / ... / });\n});\n</code></pre> <p>Tamb\u00e9 podem crear grups de rutes dins d'altres grups. Per exemple per a definir un grup de rutes a utilitzar en una API i crear diferents rutes segons la versi\u00f3 de la API podr\u00edem fer:</p> <pre><code>Route::group(['prefix' =&gt; 'api'], function() {\n    Route::group(['prefix' =&gt; 'v1'], function() {\n    // Rutes amb el prefix api/v1\n        Route::get('recurs', 'ControllerAPIv1@getRecurso'); \n        Route::post('recurs', 'ControllerAPIv1@postRecurso'); \n        Route::get('recurs/{id}', 'ControllerAPIv1@putRecurso');\n    });\n    Route::group(['prefix' =&gt; 'v2'], function() {\n    // Rutes amb el prefix api/v2\n        Route::get('recurs', 'ControllerAPIv2@getRecurso'); \n        Route::post('recurs', 'ControllerAPIv2@postRecurso'); \n        Route::get('recurs/{id}', 'ControllerAPIv2@putRecurso');\n    }); \n});\n</code></pre> <p>D'aquesta forma podem crear seccions dins del nostre fitxer de rutes per a agrupar, per exemple, totes les rutes p\u00fabliques, totes les de la secci\u00f3 privada d'administraci\u00f3, secci\u00f3 privada d'usuari, les rutes de les diferents versions de la API del nostre lloc, etc.</p>"},{"location":"Antics/test.html","title":"Test","text":"<pre><code>-- phpMyAdmin SQL Dump\n-- version 4.6.6deb5\n-- https://www.phpmyadmin.net/\n--\n-- Servidor: localhost:3306\n-- Tiempo de generaci\u00f3n: 14-10-2019 a las 14:57:26\n-- Versi\u00f3n del servidor: 5.7.27-0ubuntu0.18.04.1\n-- Versi\u00f3n de PHP: 7.3.9-1+ubuntu18.04.1+deb.sury.org+1\n\nSET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\";\nSET time_zone = \"+00:00\";\n\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;\n/*!40101 SET NAMES utf8mb4 */;\n\n--\n-- Base de datos: `test`\n--\nCREATE DATABASE IF NOT EXISTS `test` DEFAULT CHARACTER SET latin1 COLLATE latin1_swedish_ci;\nUSE `test`;\n\n-- --------------------------------------------------------\n\n--\n-- Estructura de tabla para la tabla `clientes`\n--\n\nCREATE TABLE `clientes` (\n  `dni` varchar(9) NOT NULL,\n  `nombre` varchar(60) NOT NULL,\n  `direccion` varchar(100) NOT NULL,\n  `telefono` varchar(12) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n\n--\n-- Volcado de datos para la tabla `clientes`\n--\n\nINSERT INTO `clientes` (`dni`, `nombre`, `direccion`, `telefono`) VALUES\n('12436598A', 'Otilio Silvante', 'C/ Rue del percebe 12', '234567890'),\n('21445678V', 'Ignasi Gomis', 'C/Serralo 12', '123456789'),\n('32456712Z', 'Manolo Botera', 'Rue del percebe 13', '987654321'),\n('43167890Z', 'Mortadelo', 'TIA', '345434567');\n\n-- --------------------------------------------------------\n\n--\n-- Estructura de tabla para la tabla `usuarios`\n--\n\nCREATE TABLE `usuarios` (\n  `usuario` varchar(15) NOT NULL,\n  `email` varchar(60) NOT NULL,\n  `password` varchar(150) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n\n--\n-- Volcado de datos para la tabla `usuarios`\n--\n\nINSERT INTO `usuarios` (`usuario`,`email`, `password`) VALUES\n('igomis','igomis@cipfpbatoi.es', '81dc9bdb52d04dc20036dbd8313ed055');\n\n--\n-- \u00cdndices para tablas volcadas\n--\n\n--\n-- Indices de la tabla `clientes`\n--\nALTER TABLE `clientes`\n  ADD PRIMARY KEY (`dni`);\n\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;\n/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;\n/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;\n</code></pre>"},{"location":"Examens/Examen-1-Laravel.html","title":"Examen 1 Laravel","text":""},{"location":"Examens/Examen-1-Laravel.html#bloc-2-i-3-examen-de-prova","title":"Bloc 2 i 3: Examen de prova","text":"<p>Ganga Severa:</p> <ul> <li>Crea un nou repositori per al projecte</li> <li>Configura el .gitignore per a no incloure en el repositori els seg\u00fcents arxius i carpetes:</li> <li>carpeta vendor i node_modules</li> <li>arxius .*env </li> <li>Partin de la plantilla sumministrada s'han de fer algunes coses:</li> </ul> <p>Base de dades i models (2p)</p> <ul> <li>Crea la base de dades ganga_severa.</li> <li>Modifica el .env per a poder connectar-te a ella.</li> <li>Configura la base de dades amb migracions, seeder i factories , oblida't d'usar la consola mysql </li> <li>La taula Ganga ha de contindre les seg\u00fcents columnes (0,5p):<ul> <li>id \u00fanic i autoincremental</li> <li>title: un t\u00edtol per a la ganga</li> <li>description: descripcion de la ganga</li> <li>url: un camp per a introduir la URL externa de la ganga</li> <li>id_category: albergar\u00e0 la categoria de les gangues</li> <li>points: un nombre enter que indique la puntuaci\u00f3 de la ganga</li> <li>price: preu per a albergar el preu de la ganga</li> <li>discount_price: preu descompte per a albergar el nou preu</li> <li>available: disponible de tipus boolean</li> </ul> </li> <li>Haur\u00e0s de crear una taula de categories (0,25p):<ul> <li>id unic i autoincremental</li> <li>title: un titol per a la categoria</li> </ul> </li> <li>Haur\u00e0 d'afegir un camp admin als usuaris per saver si son administradors. (0,25p)</li> <li>Has de crear 60 ganges,3 categories i 5 usuaris (1 administrador). (0,5p)</li> <li>S'han de crear els models i les relacions (0,5p)</li> </ul> <p>Imatges (0,5p)</p> <ul> <li>Cada ganga ha de contindre una imatge que estar\u00e0 guardada en public/img</li> <li>El nom de les imatges ha d'estar composta per la seg\u00fcent f\u00f3rmula idGanga-ganga-severa.extensio Per exemple: 25-ganga-severa.jpg</li> <li>Les imatges les pots possar al principi autom\u00e0ticament encara que siga la mateixa </li> </ul> <p>Plantilla i P\u00e0gina principal (2,5p)</p> <ul> <li>Elements est\u00e0tics. Hi ha uns certs elements que sempre es mostren en totes les vistes del lloc web. A continuaci\u00f3 es llisten els elements que han d'estar si o si en totes les plantilles que creeu. (0,5p)</li> <li>Barra de dalt</li> <li>Menu</li> <li>Peu de p\u00e0gina</li> <li>El login ha de redirigir a la p\u00e0gina de login de laravel </li> <li>Crea un fitxer de configuraci\u00f3 on posses les dades del teu contacte del lloc web i fes que isquen en compte de les que hi ha (0,25p)</li> <li>Fes que el copyright l'agafe de la data actual (0,25p)</li> <li>Quan l'usuari es administrador ix la part del men\u00fa per a crear noves ganges.(0,25p)</li> <li>El nom de les categories han de substituir als que hi ha per defecte (0,25p)</li> <li>Per construir la p\u00e0gina principal has de crear totes les fitxes del producte. (has de tindre en compte que primer es creen les d'una categoria i aix\u00ed sucesivament). Una forma de fer-ho \u00e9s utilitzar els agrupaments en una collecci\u00f3 de laravel (groupBy)[https://laravel.com/docs/8.x/collections#method-groupby]) (1p)</li> </ul> <p>Pagina de contacte (0,25p)</p> <ul> <li>Crea p\u00e0gina de contacte amb la plantilla i les dades de contacte del fitxer de configuraci\u00f3 creat dalt.</li> </ul> <p>P\u00e0gina de Ganga (0,75p)</p> <ul> <li>Quan punxem en un de les gangues del llistats hem de ser redirigits a aquesta vista on podrem veure tota la informaci\u00f3 del taula ganga. Pots maquetar-la com vulgues. (0,5p)</li> <li>Cada ganga ha de contindre els seus botons d'editar i esborrar que fa\u00e7a les funcions que toquen quan l'usuari autenticat tinga permisos per a fer-ho. Pots utilitzar icones per a cadascun dels botons. (0,25p)</li> </ul> <p>Crear i Modificar Nova Ganga (1,5p)</p> <ul> <li>Formularis i m\u00e8todes en el control\u00b7lador. (0,5p)</li> <li>Soles pot fer-ho l'administrador (0,5p). S'han de validar el camps (tots s\u00f3n requerits, el discount price ha de ser menor que el price, la categoria ha d'existir) (0,5p)</li> </ul> <p>P\u00e0gina d'ofertes (0,5p)</p> <ul> <li>Fes una p\u00e0gina d'ofertes per als usuaris loguejats on isquen els productes amb m\u00e9s descompte.</li> </ul> <p>API (2p)</p> <ul> <li>Crear un apiGangaController per a que funcionen les rutes b\u00e0siques de la ganga (no cal autenticaci\u00f3) (0,25p cada ruta) </li> <li>Validaci\u00f3 en el servidor (0,25p) igual que dalt.</li> <li>Torna missatge d'error en json (0,25p)</li> <li>Autenticaci\u00f3 per a post, put i delete (0,25p)</li> </ul>"},{"location":"Examens/Examen-1.html","title":"Examen 1","text":""},{"location":"Examens/Examen-1.html#bloc-1-examen-de-prova","title":"Bloc 1: Examen de prova","text":"<p>Coses a fer:</p> <ol> <li> <p>Crea una BD music i importa el fitxer music.sql. Estableix la connexi\u00f3 amb la BD music (0,25p) i prepara la web per a poder vore-ho (0,25p)</p> </li> <li> <p>Modifica la funci\u00f3 loadTemplate($vista,$params) del myHelpers per tal que accepte la vista en el format (directori.fitxer en compte de directori/fitxer). </p> <p>Example: Si vull carregar la vista article.view.php dins del directori templates ara he de fer loadTemplate('templates/article') i l'exercici demana que es fa\u00e7a de la seg\u00fcent manera loadTemplate('templates.article'). </p> <p>Canvia la vista index.view.php per a adoptar eixe format. (1p)</p> </li> <li> <p>Completa la classe albums amb el m\u00e8todes:</p> <ul> <li>getArtistName()   (0,5p)   Nom de l'artista de l'album</li> <li>getCompany            (0,5p)  Nom de la discografica de l'album</li> <li>Best()                (0,5p)   Els 12 albums amb m\u00e9s vots</li> </ul> </li> <li> <p>Modifica la vista main.view.php per a que carregue 12 vistes de article.view.php amb els 12 articles m\u00e9s puntuats. (0,5p)</p> </li> <li>Modifica la vista article.view.php per a mostrar l'article en q\u00fcesti\u00f3. (0,5p)</li> <li>Quan un usuari s'identifica:<ul> <li>Es dona d'alta en la tabla usuaris (si no existeix) (0,75p)</li> <li>Es mostra el nom en compte del formulari d'identificaci\u00f3 (footer.php) (0,5p)</li> <li>Ja pot votar, o siga la p\u00e0gina votes.php queda activada. Fins eixe moment la p\u00e0gina votes.php rediriguia a index.php. (0,25p)</li> </ul> </li> <li>Modifica la vista menu per a que agafe les dades de l'array menu que est\u00e0 en config/menu.php. Has de tindre en compte que una opci\u00f3 del menu eixir\u00e0 depenent de l'opci\u00f3 auth de l'array i de si l'usuari est\u00e0 identificat o no. Un auth 1 en un opci\u00f3 del men\u00fa sera visible quan l'usuari estiga identificat i el contrari en la 0. (1p)</li> <li>Un usuari pot votar nom\u00e9s 3 vegades (1p). Ho far\u00e0 polsant sobre una imatge (votes.php) i que cada vot incrementar\u00e0 el valor del camp votes de la taula albums (0,5p). Si intenta votar m\u00e9s voltes se li comunicar\u00e0 a l'usuari que ja ha votat tres vegades. (0,25p)</li> <li>Un usuari pot desfer el seu vot amb l'opci\u00f3 corresponent del men\u00fa. Si l'utilitza els vots quedaran anul\u00b7lats  i s'hauran de descomptar de la BD (0,75p). L'usuari podr\u00e0 tornar a votar (0,25p)</li> <li>Crear el logout.php (0,5p)</li> <li>Crea la funcion last($taula) (0,75p) en el queryBuilder per a que mostre l'ultim registre d'una taula i mostra l'ultim missatge en la p\u00e0gina principal. **SELECT * FROM table ORDER by id DESC LIMIT 1 ** </li> </ol>"},{"location":"Examens/Examen.php.html","title":"Examen.php","text":""},{"location":"Examens/Examen.php.html#bloc-1-examen","title":"Bloc 1: Examen","text":"<ol> <li>Borra el directori examen i fes un git del repostori de la manera: git clone nom_repositori examen estan en el directori code. </li> <li>Crea una BD employees i importa el fitxer employees.sql. Estableix la connexi\u00f3 amb la BD employees i prepara la web per a poder vore-ho.</li> <li>En el queryBuilder crea la funci\u00f3 find(taula,primaryKey,id) per a buscar en una taula per clau primaria (0,5p)</li> <li>Completa la classe employees amb el m\u00e8todes:<ul> <li>getDepartment()   (0,5p)   Nom del departament actual de l'empleat</li> <li>getTitle()            (0,5p)  Nom del title actual de l'empleat</li> <li>isManager()           (0,5p) Es manager de un departament o no</li> <li>Managers() (0,5p) Array d'objectes employees amb els managers de l'empresa (no managers de departament)</li> </ul> </li> <li>Modifica la vista employees.view.php per a mostrar un empleat. (0,5p)</li> <li>Modificat la vista menu.view.php per a mostrar tots els departaments.(0,5p) L'enlla\u00e7 que al que ha de redirigir en cada departament ser\u00e0 index.php?dep=claudep (0,5p). Al polsar en un departament els empleats de le p\u00e0gina principal canviaran i es mostraran els de eixe departament.  Hi ha un metode en Employee::Members(dept) que trau tots els empleats del departament.   (0,5p). Si no hi ha cap departament seleccionat es mostraran els managers.</li> <li>Per a identificar a un usuari s'utilitza el numero d'empleat i el nom. Si no coincidix no es far\u00e0 res. Si coincidix en el peu eixir\u00e0 el nom de l'usuari i un bot\u00f3 per a fer logout (0,75p). El logout.php ha de funcionar (0,25p)</li> </ol> <p>Pots triar una de le seg\u00fcents coses:</p> <ol> <li>Els emplats poden votar l'empleat de l'any. Han de votar a un membre del seu departament, a un de fora i a un manager (1p) i s'incrementar\u00e0 el camp votes. Soles pot votar una volta (hi ha un camp vote en la taula employees per a saver si ha votat) (0.5p). Les possibles errades es control\u00b7laran per exempcions que rediguiran a un p\u00e0gina amb l'error produ\u00eft i ammb un enlla\u00e7 per tornar a la p\u00e0gina principal. (1p). Es mostrar\u00e0 en el peu de p\u00e0gina els vots que ha fet l'usuari: nom,departament,title (1p). Es podran esborrar els vots actuals i tornar a votar (1p).</li> <li>Els managers tindran un enlla\u00e7 en el peu (on ara posa vots actuals i que redigir\u00e0 a una p\u00e0gina on hi haura un crud de la taula employees) <ul> <li>Es mostrar\u00e0 una taula amb els empleats del seu departament (0,5p)</li> <li>Es pot donar d'alta un empleat (1p)</li> <li>Es pot donar de baixa un empleat. No es borarr\u00e0, canviar\u00e0 la data corresponent. (0,5p)</li> <li>Es pot modificar un empleat. Si un empleat es canvia de departament, no es donar\u00e0 de baixa la relaci\u00f3 sino que s'afegiran les dades de finalitzaci\u00f3 en un departament i es crear\u00e0 la relaci\u00f3 de l'altre.(1,5p)</li> <li>Es validaran els camps mostrant els errors en el formulari i mantenint els camps originals (1p)  Nota : Si voleu provar si funcionen el 3 i els tres primers m\u00e8todes del 4 cal que poseu ./vendor/bin/phpunit tests en la linea de comandos.         </li> </ul> </li> </ol>"},{"location":"Exemple/VideoClub.html","title":"Exemple","text":""},{"location":"Exemple/VideoClub.html#videoclub","title":"Videoclub","text":"<p>Com a exemple anem a desenvolupar una xicoteta web per a la gesti\u00f3 interna d'un videoclub, comen\u00e7arem per definir les rutes i vistes del lloc i a poc a poc en els seg\u00fcents exercicis l'anirem completant fins a acabar el lloc web complet.</p> <p>L'objectiu \u00e9s realitzar un lloc web per a la gesti\u00f3 interna en un videoclub, el qual estar\u00e0 protegit mitjan\u00e7ant usuari i contrasenya. Una vegada autoritzat l'acc\u00e9s, l'usuari podr\u00e0 llistar el cat\u00e0leg de pel\u00b7l\u00edcules, veure informaci\u00f3 detallada d'una pel\u00b7l\u00edcula, realitzar cerques o filtrats i algunes operacions m\u00e9s de gesti\u00f3.</p>"},{"location":"Exemple/VideoClub.html#definicio-de-les-rutes","title":"Definici\u00f3 de les rutes","text":"<p>Video</p> <p>En aquest exercici anem a definir les rutes principals que va a tenir el nostre lloc web. Per a comen\u00e7ar simplement indicarem que les rutes retornen una cadena (aix\u00ed podrem comprovar que s'han creat correctament). A continuaci\u00f3 s'inclou una taula amb les rutes a definir (totes de tipus  GET) i el text que han de mostrar:</p> Ruta Text a mostrar / Pantalla principal login Login usuari logout Logout usuari catalog Llistat pel\u00b7l\u00edcules catalog/show/{id} Vista detall pel\u00b7l\u00edcula catalog/create Afegir pel\u00b7l\u00edcula catalog/edit/{id} Modificar pel\u00b7l\u00edcula"},{"location":"Exemple/VideoClub.html#solucio","title":"Soluci\u00f3:","text":"<pre><code>   Route::get('/', function () { return 'Pagina principal';});\n    Route::get('login', function () { return 'Login usuari';});\n    Route::get('logout', function () { return 'Logout usuari';});\n    Route::get('catalog', function () { return 'Llistat pel.licules';});\n    Route::get('catalog/show/{id}', function () { return \"Vista detall pel.licula $id\";});\n    Route::get('catalog/create', function () { return 'Afegir pel.licula';});\n    Route::get('catalog/edit/{id}', function () {return \"Modificar pel.licula $id\";});\n</code></pre> <p>Per a comprovar que les rutes s'hagen creat correctament utilitza el comando de  artisan que retorna un llistat de rutes i a m\u00e9s prova tamb\u00e9 les rutes en el navegador.</p> <p><pre><code>php artisan route:list\n</code></pre> </p>"},{"location":"Exemple/VideoClub.html#layout-principal-de-les-vistes-amb-bootstrap","title":"Layout principal de les vistes amb  Bootstrap","text":"<p>En aquest exercici anem a crear el  layout base que van a utilitzar la resta de vistes del lloc web i a m\u00e9s inclourem la llibreria  Bootstrap per a utilitzar-la com a estil base. Laravel 5.8 ja inclou bootstrap per\u00f2 laravel 6.0 no. Aix\u00ed que cal instalar-lo:</p> <ul> <li>Fes composer require laravel/ui</li> <li> <p>Despres php artisan ui bootstrap</p> </li> <li> <p>Fes npm install des de la linea de comanaments. Ac\u00f2 instal.lar\u00e0 tots els paquets que est\u00e0n en el packaje.son en el directori node_modules</p> </li> <li> <p>Fes npm run-dev des de la linea de comanaments. A\u00e7o compilar\u00e0 totes les depend\u00e8ncies i les ficar\u00e0 en els fitxers public/css/app.cs i public/js/app.js. </p> </li> </ul> <p>Dels materials que ens hem descarregat copiem la plantilla per a la barra de navegaci\u00f3 principal (navbar.blade.php) i l'emmagatzemem en la carpeta  resources/views/partials. A continuaci\u00f3 anem a crear el layout principal del nostre lloc:</p> <ul> <li>Anem a crear el fitxer resources/views/layouts/master.blade.php.</li> <li>Li afegim com contingut la plantilla base HTML que proposa  Bootstrap en la seua documentaci\u00f3 , modificant els seg\u00fcents elements:</li> <li> <p>Canviem les rutes per a la c\u00e0rrega dels  assets que venen en laravel per defecte. Per a generar la ruta completa i que trobe els recursos haurem d'escriure els seg\u00fcents comandos:</p> <pre><code>    .....\n    &lt;!-- Bootstrap --&gt;\n    &lt;meta name=\"csrf-token\" content=\"{{ \"{{ csrf_token() \" }}}}\"&gt;\n    &lt;link href=\"{{ \"{{ asset('css/app.css') \" }}}}\" rel=\"stylesheet\"&gt;\n    .....\n    &lt;script src=\"{{ \"{{ asset('js/app.js') \" }}}}\" &gt;&lt;/script&gt;\n</code></pre> </li> <li> <p>Dins de la secci\u00f3  de l'HTML, eliminem el text que ve d'exemple (\\ Hello,  world! \\) i incloem la barra de navegaci\u00f3 que hem guardat abans utilitzant el seg\u00fcent codi: <pre><code>@include('partials.navbar')\n</code></pre> <li> <p>A continuaci\u00f3 de la barra de navegaci\u00f3 afegim la secci\u00f3 principal on apareixer\u00e0 el contingut de la web:</p> <pre><code>&lt;div class=\"container\"&gt; @yield('content')&lt;/div&gt;\n</code></pre> </li> <p>Amb a\u00e7\u00f2 ja hem definit el layout principal, no obstant a\u00e7\u00f2 encara no podem provar-ho ja que no est\u00e0 associat a cap ruta. </p>"},{"location":"Exemple/VideoClub.html#solucio_1","title":"Soluci\u00f3:","text":"<pre><code>&lt;!DOCTYPE html&gt;\n    &lt;html lang=\"es\"&gt;\n      &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n        &lt;!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags --&gt;\n        &lt;title&gt;Video Club&lt;/title&gt;\n        &lt;meta name=\"csrf-token\" content=\"{{ \"{{ csrf_token() \" }}}}\"&gt;\n        &lt;!-- Bootstrap --&gt;\n         &lt;link href=\"{{ \"{{ asset('css/app.css') \" }}}}\" rel=\"stylesheet\"&gt;\n      &lt;/head&gt;\n      &lt;body&gt;\n        @include('partials.navbar')\n        &lt;div id='app' class=\"container\"&gt; @yield('content')&lt;/div&gt;\n\n        &lt;!-- Scripts --&gt;\n        &lt;script src=\"{{ \"{{ asset('js/app.js') \" }}}}\" &gt;&lt;/script&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>"},{"location":"Exemple/VideoClub.html#crear-la-resta-de-vistes","title":"Crear la resta de vistes","text":"<p>En aquest exercici anem acabar una primera versi\u00f3 estable de la web. En primer lloc crearem les vistes associades a cada ruta, les quals hauran d'estendre del  layout que hem fet en l'exercici anterior i mostrar (en la secci\u00f3 de  content del  layout) el text d'exemple que hav\u00edem definit per a cada ruta en l'exercici 2. En general totes les vistes tindran un codi similar al seg\u00fcent (variant \u00fanicament la secci\u00f3  content):</p> <pre><code>@extends('layouts.master')\n@section('content')\n    Pantalla principal \n@stop\n</code></pre> <p>Per a organitzar millor les vistes les anem a agrupar en  sub-carpetes dins de la carpeta  resources/views seguint la seg\u00fcent estructura:</p> Vista Carpeta Ruta associada home.blade.php resources/views/ / login.blade.php resources/views/auth/ login index.blade.php resources/views/catalog/ catalog show.blade.php resources/views/catalog/ catalog/show/{ id} create.blade.php resources/views/catalog/ catalog/ create edit.blade.php resources/views/catalog/ catalog/edit/{id} <p>Creem una vista separada per a totes les rutes excepte para la ruta \" logout\", la qual no tindr\u00e0 cap vista. Finalment anem a actualitzar les rutes del fitxer  routes/web.php perqu\u00e8 es carreguen les vistes que acabem de crear. Acordar-vos que per a referenciar les vistes que estan dins de carpetes la barra / de separaci\u00f3 es transforma en un punt, i que a m\u00e9s, com a segon par\u00e0metre, podem passar dades a la vista. A continuaci\u00f3 s'inclouen alguns exemples:</p> <pre><code>return view('home');\nreturn view('catalog.index');\nreturn view('catalog.show',array('id'=&gt;$id));\n</code></pre> <p>Una vegada fets aquests canvis ja podem provar-ho en el navegador, el qual hauria de mostrar en tots els casos la plantilla base amb la barra de navegaci\u00f3 principal i els estils de  Bootstrap aplicats. En la secci\u00f3 principal de contingut de moment solament podrem veure els textos que hem posat d'exemple.</p>"},{"location":"Exemple/VideoClub.html#solucio_2","title":"Soluci\u00f3:","text":"<p>web.php</p> <pre><code>    Route::get('/', function () { return view('home');});\n    Route::get('login', function () {return view('login');});\n    Route::get('logout', function () { return 'Logout usuari';});\n    Route::get('catalog', function () { return view('index');});\n    Route::get('catalog/show/{id}', function ($id) { return view('show',['pelicula'=&gt;$id]);});\n    Route::get('catalog/create', function () { return view('create');});\n    Route::get('catalog/edit/{id}', function ($id) {return view('edit',['pelicula' =&gt;$id]);});\n</code></pre> <p>edit.blade</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n        Editar pel.licula id {{ \"{{$pelicula\" }}}}\n    @stop\n</code></pre> <p>show.blade</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n        Mostrar pel.licula id {{ \"{{$pelicula\" }}}}\n    @stop\n</code></pre> <p>create.blade</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n        Crear pel.licula \n    @stop\n</code></pre> <p>home.blade</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n        Pagina principal \n    @stop\n</code></pre> <p>index.blade</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n        Catalogo\n    @stop\n</code></pre> <p>login.blade</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n        Login\n    @stop\n</code></pre> <p></p>"},{"location":"Exemple/VideoClub.html#crear-les-proves","title":"Crear les proves","text":"<p>Crea un fitxer de proves en la consola del  artisan</p> <pre><code>php artisan make:test BasicTest\n</code></pre> <p>Crea un prova per a  comprobrar que va la pantalla d'inici:</p> <p><pre><code>public function testLoadHomePage(){ \n    $this-&gt;get('/')-&gt;assertStatus(200)-&gt;assertSee('Pantalla principal');\n}\n</code></pre> Comprova totes les vistes:</p>"},{"location":"Exemple/VideoClub.html#solucio_3","title":"Soluci\u00f3","text":"<pre><code>class BasicTest extends TestCase\n{\n    public function testLoadHomePage(){ \n        $this-&gt;get('/')-&gt;assertStatus(200)-&gt;assertSee('Pantalla principal');\n    }\n    public function testLoadCatalogPage(){ \n        $this-&gt;get('/catalog')-&gt;assertStatus(200)-&gt;assertSee('Catalogo');\n    }\n    public function testLoadCreatePage(){ \n        $this-&gt;get('/catalog/create')-&gt;assertStatus(200)-&gt;assertSee('Crear pel.licula');\n    }\n    public function testLoadEditPage(){ \n        $this-&gt;get('/catalog/edit/2')-&gt;assertStatus(200)-&gt;assertSee('Editar pel.licula id 2');\n    }\n    public function testLoadShowPage(){ \n        $this-&gt;get('/catalog/show/2')-&gt;assertStatus(200)-&gt;assertSee('Mostrar pel.licula id 2');\n    }\n}\n</code></pre>"},{"location":"Exemple/VideoClub.html#definint-controladors","title":"Definint Controladors","text":"<p>Video</p> <p>En aquest primer exercici anem a crear els controladors necessaris per a gestionar la nostra aplicaci\u00f3 i a m\u00e9s actualitzarem el fitxer de rutes perqu\u00e8 els utilitze. Comencem per afegir els dos controladors que ens van a fer falta: CatalogController.php i HomeController.php.  Per a a\u00e7\u00f2 heu d'utilitzar el comando de Artisan que permet crear un controlador buit (sense m\u00e8todes). A continuaci\u00f3 anem a afegir els m\u00e8todes d'aquests controladors. En la seg\u00fcent taula resumeixen podem veure un llistat dels m\u00e8todes per controlador i les rutes que tindran associades:</p> Ruta Controlador M\u00e8tode / HomeController getHome catalog CatalogController getIndex catalog/show/{id} CatalogController getShow catalog/create CatalogController getCreate catalog/edit/{id} CatalogController getEdit <p>Acordeu-vos que els m\u00e8todes getShow i getEdit hauran de rebre com a par\u00e0metre el \\$id de l'element a mostrar o editar, per la qual cosa la definici\u00f3 del m\u00e8tode en el controlador haur\u00e0 de ser com la seg\u00fcent:</p> <pre><code>public function getShow($id) {\nreturn view('catalog.show', array('id'=&gt;$id)); }\n</code></pre> <p>Finalment anem a canviar el fitxer de rutes routes/web.php per tal que totes les rutes que ten\u00edem definides (excepte les de login i logout que les deixarem com estan) apunten als nous m\u00e8todes dels controladors, per exemple:</p> <pre><code>Route::get('/', 'Homecontroller@gethome');\n</code></pre> <p>El codi que ten\u00edem posat per a cada ruta amb el return amb la generaci\u00f3 de la vista ho heu de moure al m\u00e8tode del controlador corresponent.</p> <p>Comprova que les proves segueixen funcionant. En cas contrari corregeix les fallades.</p> <p>routes.php</p> <pre><code>Route::get('/','homeController@getHome');\nRoute::get('login', function () {return view('login');});\nRoute::get('logout', function () { return 'Logout usuari';});\nRoute::get('catalog','catalogController@getIndex');\nRoute::get('catalog/show/{id}', 'catalogController@getShow');\nRoute::get('catalog/create','catalogController@getCreate');\nRoute::get('catalog/edit/{id}','catalogController@getEdit');\n</code></pre>"},{"location":"Exemple/VideoClub.html#renderitzant-les-vistes","title":"Renderitzant les vistes","text":"<p>catalogController.php</p> <pre><code>    &lt;?php\n    namespace App\\Http\\Controllers;\n    use Illuminate\\Http\\Request;\n\n    class catalogController extends Controller\n    {\n        public function getIndex(){\n            return view('index');\n        }\n        public function getShow($id){\n            return view('show',['pelicula'=&gt;$id]);\n        }\n        public function getCreate(){\n            return view('create');\n        }\n        public function getEdit($id){\n            return view('edit',['pelicula' =&gt;$id]);\n        }\n    }\n</code></pre> <p>homeController.php</p> <pre><code>&lt;?php\n\n    namespace App\\Http\\Controllers;\n\n    use Illuminate\\Http\\Request;\n\n    class homeController extends Controller\n    {\n        public function getHome()\n        {\n            return redirect()-&gt;action('Catalogcontroller@getindex');\n        }\n}\n</code></pre>"},{"location":"Exemple/VideoClub.html#completant-les-vistes","title":"Completant les vistes","text":"<p>En aquest exercici anem a acabar els m\u00e8todes dels controladors que hem creat en l'exercici anterior i a m\u00e9s completarem les vistes associades:</p> <p>M\u00e8tode Homecontroller@gethome</p> <p>En aquest m\u00e8tode de moment solament anem a fer una redirecci\u00f3 a l'acci\u00f3 que mostra el llistat de pel\u00b7l\u00edcules del cat\u00e0leg: </p> <pre><code>return redirect()-&gt;action('Catalogcontroller@getindex');\n</code></pre> <p>M\u00e9s endavant haurem de comprovar si l'usuari est\u00e0 logueado o no, i en cas que no l'aquest redirigir-li al formulari de login.</p> <p>M\u00e8tode CatalogController@index</p> <p>Aquest m\u00e8tode ha de mostrar un llistat de totes les pel\u00b7l\u00edcules que t\u00e9 el videoclub. El llistat de pel\u00b7l\u00edcules ho podeu obtenir del fitxer array_peliculas.php facilitat amb els materials. Aquest array de pel\u00b7l\u00edcules ho heu de copiar com a variable membre de la classe (m\u00e9s endavant les emmagatzemarem en la base de dades). En el m\u00e8tode del controlador simplement haurem de modificar la generaci\u00f3 de la vista per a passar-li aquest array de pel\u00b7l\u00edcules complet ($this-&gt;arrayPeliculas).</p> <p>I en la vista corresponent simplement haurem d'incloure el seg\u00fcent tros de codi en la seua secci\u00f3 content: </p> <pre><code>    &lt;div class=\"row\"&gt;\n        @foreach( $arrayPeliculas as $key =&gt; $pelicula )        \n            &lt;div class=\"col-xs-6 col-sm-4 col-md-3 text-center\"&gt;\n                &lt;a href=\"{{ \"{{  url('/catalog/show/'.$key) \" }}}}\"&gt;\n                    &lt;img src=\"{{ \"{{ $pelicula['poster']\" }}}}\" style=\"height:200px\"/&gt; \n                    &lt;h4 style=\"min-height:45px;margin:5px 0 10px 0\"&gt;\n                    {{ \"{{ $pelicula['title']\" }}}} &lt;/h4&gt;\n                &lt;/a&gt;\n            &lt;/div&gt; \n        @endforeach\n    &lt;/div&gt;\n</code></pre> <p>Com es pot veure en el codi, en primer lloc es crea una fila (usant el sistema de reixeta de Bootstrap) i a continuaci\u00f3 es realitza un bucle foreach utilitzant la notaci\u00f3 de Blade per a iterar per totes les pel\u00b7l\u00edcules. Per a cada pel\u00b7l\u00edcula obtenim la seua posici\u00f3 en el array i les seues dades associades, i generem una columna per a mostrar-los. </p> <p>\u00c9s important que ens fixem en com s'itera pels elements d'un array de dades i en la forma d'accedir als valors. A m\u00e9s s'ha incl\u00f2s un enlla\u00e7 perqu\u00e8 en pr\u00e9mer sobre una pel\u00b7l\u00edcula ens porte a l'adre\u00e7a /catalog/show/{\\$key}, sent key la posici\u00f3 d'aqueixa pel\u00b7l\u00edcula en el array.</p> <p>M\u00e8tode Catalogcontroller@show</p> <p>Aquest m\u00e8tode s'utilitza per a mostrar la vista detall d'una pel\u00b7l\u00edcula. Hem de tenir en compte que el m\u00e8tode corresponent rep un identificador que (de moment) es refereix a la posici\u00f3 de la pel\u00b7l\u00edcula en el array. Per tant, haurem d'agafar aquesta pel\u00b7l\u00edcula del array ($this-&gt;arrayPeliculas[$id]) i passar-li-la a la vista.</p> <p>En aquesta vista anem a crear dues columnes, la primera columna per a mostrar la imatge de la pel\u00b7l\u00edcula i la segona per a incloure tots els detalls. A continuaci\u00f3 s'inclou l'estructura HTML que hauria de tenir aquesta pantalla:</p> <pre><code>    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-sm-4\"&gt;\n            {{ \"{{ -- TOT: Imatge de la pel\u00b7l\u00edcula --\" }}}}\n        &lt;/div&gt;\n        &lt;div class=\"col-sm-8\"&gt;\n            {{ \"{{ -- TOT: Dades de la pel\u00b7l\u00edcula --\" }}}}\n        &lt;/div&gt; \n    &lt;/div&gt;\n</code></pre> <p>En la columna de l'esquerra completem el TOT per a inserir la imatge de la pel\u00b7l\u00edcula. En la columna de la dreta s'hauran de mostrar totes les dades de la pel\u00b7l\u00edcula: t\u00edtol, any, director, resum i el seu estat. </p> <p>Per a mostrar l'estat de la pel\u00b7l\u00edcula consultarem el valor rented del array, el qual podr\u00e0 tenir dos casos:</p> <ul> <li>En cas d'estar disponible (false) apareixer\u00e0 l'estat \"Pel\u00b7l\u00edcula disponible\" i un bot\u00f3 blau per a \"Llogar pel\u00b7l\u00edcula\".</li> <li>En cas d'estar llogada (true) apareixer\u00e0 l'estat \"Pel\u00b7l\u00edcula actualment llogada\" i un bot\u00f3 roig per a \"Retornar pel\u00b7l\u00edcula\".</li> </ul> <p>A m\u00e9s hem d'incloure dos botons m\u00e9s, un bot\u00f3 que ens portar\u00e0 a editar la pel\u00b7l\u00edcula i un altre per a tornar al llistat de pel\u00b7l\u00edcules.</p> <p>Nota: els botons de llogar/retornar de moment no han de funcionar. Acordeu-vos que en Bootstrap podem transformar un enlla\u00e7 en un bot\u00f3, simplement aplicant les classes \"btn btn-default\" (m\u00e9s info en). Aquesta pantalla finalment hauria de tenir una aparen\u00e7a similar a la seg\u00fcent:   </p> <p>M\u00e8tode Catalogcontroller@create</p> <p>Aquest m\u00e8tode retorna la vista \"catalog.create\" per a afegir una nova pel\u00b7l\u00edcula. Per a crear aquest formulari en la vista corresponent ens podem basar en el contingut de la plantilla \"catalog_create.php\". Aquesta plantilla t\u00e9 una s\u00e8rie de ToDo's que cal completar. En total haur\u00e0 de tenir els seg\u00fcents camps:</p> Label Name Tipus de camp T\u00edtol title text Any year text Director director text Poster poster text Resum synopsis textarea <p>A m\u00e9s tindr\u00e0 un bot\u00f3 al final amb el text \"Afegir pel\u00b7l\u00edcula\". De moment el formulari no funcionar\u00e0. M\u00e9s endavant ho acabarem.</p> <p>M\u00e8tode Catalogcontroller@edit</p> <p>Aquest m\u00e8tode permetr\u00e0 modificar el contingut d'una pel\u00b7l\u00edcula. El formulari ser\u00e0 exactament igual al d'afegir pel\u00b7l\u00edcula, aix\u00ed que ho podem copiar i pegar en aquesta vista i simplement canviar els seg\u00fcents punts: * El t\u00edtol per \"Modificar pel\u00b7l\u00edcula\". * El text del bot\u00f3 d'enviament per \"Modificar pel\u00b7l\u00edcula\". * Afegir just sota l'obertura del formulari el camp ocult per a indicar que es va a enviar per PUT. Recordeu que Laravel inclou el m\u00e8tode  @method('PUT') que ens ajudar\u00e0 a fer a\u00e7\u00f2. De moment no haurem de fer res m\u00e9s, m\u00e9s endavant ho completarem perqu\u00e8 s'emplene amb les dades de la pel\u00b7l\u00edcula a editar.</p> <p>homeController.php</p> <pre><code>    &lt;?php\n\n    namespace App\\Http\\Controllers;\n\n    use Illuminate\\Http\\Request;\n\n    class HomeController extends Controller\n    {\n        public function getHome(){\n            return redirect()-&gt;action('CatalogController@getIndex');\n        }\n    }\n</code></pre> <p>catalogController.php</p> <pre><code>    ..\n    private $arrayPeliculas = ...\n\n    public function index(){\n        return view('index',['arrayPeliculas'=&gt;$this-&gt;arrayPeliculas]);\n    }\n    public function show($id){\n        $pelicula = $this-&gt;arrayPeliculas[$id];\n        return view('show',compact('pelicula','id'));\n    }\n    public function create(){\n        return view('create');\n    }\n    public function edit($id){\n        return view('edit',['pelicula' =&gt;$id]);\n    }\n</code></pre> <p>show.blade.php</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-sm-4\"&gt;\n                        &lt;img src=\"{{ \"{{ $pelicula['poster']\" }}}}\" alt=\"{{ \"{{ $pelicula['title']\" }}}}\"/&gt;\n            &lt;/div&gt;\n            &lt;div class=\"col-sm-8\"&gt;\n                        &lt;h2&gt;{{ \"{{ $pelicula['title']\" }}}}&lt;/h2&gt;\n                        &lt;h4&gt;{{ \"{{ $pelicula['year']\" }}}}&lt;/h4&gt;\n                        &lt;h4&gt;{{ \"{{ $pelicula['director']\" }}}}&lt;/h4&gt;\n                        &lt;p&gt;&lt;strong&gt;Resumen: &lt;/strong&gt;{{ \"{{ $pelicula['synopsis']\" }}}}&lt;/p&gt;\n                        &lt;p&gt;&lt;strong&gt;Estado: &lt;/strong&gt;Pel.l\u00edcula @if ($pelicula['rented'])  Actualment llogada @else disponible @endif&lt;/p&gt;\n                        &lt;p&gt;\n                           @if ($pelicula['rented']) \n                            &lt;a href='' class=\"btn btn-info\"&gt;Tornar Pel.l\u00edcula&lt;/a&gt; \n                           @else \n                            &lt;a href='' class=\"btn btn-danger\"&gt;Llogar Pel.l\u00edcula&lt;/a&gt;\n                           @endif \n                           &lt;a href=\"{{ \"{{ route('catalog.edit',$id)\" }}}}\" class=\"btn btn-warning\"&gt;&lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt;Editar Pel.l\u00edcula&lt;/a&gt;\n                           &lt;a href=\"\\catalog\" class=\"btn btn-default\"&gt;Tornar cat\u00e0leg&lt;/a&gt;\n                        &lt;/p&gt;\n            &lt;/div&gt; \n        &lt;/div&gt;\n    @stop\n</code></pre> <p>create.blade.php</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n    &lt;div class=\"row\" style=\"margin-top:20px\"&gt;\n        &lt;div class=\"col-md-offset-3 col-md-6\"&gt;\n            &lt;div class=\"panel panel-default\"&gt;\n                &lt;div class=\"panel-heading\"&gt;\n                    &lt;h3 class=\"panel-title text-center\"&gt;\n                        &lt;span class=\"glyphicon glyphicon-film\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                        Afegir pel.l\u00edcula\n                    &lt;/h3&gt;\n                &lt;/div&gt;\n                &lt;div class=\"panel-body\" style=\"padding:30px\"&gt;\n                    &lt;form method='POST'&gt;\n                        @csrf\n                        &lt;div class=\"form-group\"&gt;\n                            &lt;label for=\"title\"&gt;T\u00edtulo&lt;/label&gt;\n                            &lt;input type=\"text\" name=\"title\" id=\"title\" class=\"form-control\"&gt;\n                        &lt;/div&gt;\n\n                        &lt;div class=\"form-group\"&gt;\n                            &lt;label for='year'&gt;Any:&lt;/label&gt;\n                            &lt;input type='number' name='year' /&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"form-group\"&gt;\n                            &lt;label for='director'&gt;Director:&lt;/label&gt;\n                            &lt;input type='text' name='director' /&gt;\n                        &lt;/div&gt;\n\n                        &lt;div class=\"form-group\"&gt;\n                            &lt;label for='poster'&gt;Poster:&lt;/label&gt;\n                            &lt;input type='url' name='poster' /&gt;\n                        &lt;/div&gt;\n\n                        &lt;div class=\"form-group\"&gt;\n                            &lt;label for=\"synopsis\"&gt;Resumen&lt;/label&gt;\n                            &lt;textarea name=\"synopsis\" id=\"synopsis\" class=\"form-control\" rows=\"3\"&gt;&lt;/textarea&gt;\n                        &lt;/div&gt;\n\n                        &lt;div class=\"form-group text-center\"&gt;\n                            &lt;button type=\"submit\" class=\"btn btn-primary\" style=\"padding:8px 100px;margin-top:25px;\"&gt;\n                                Afegir pel.l\u00edcula\n                            &lt;/button&gt;\n                        &lt;/div&gt;\n                    &lt;/form&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    @stop\n</code></pre> <p>edit.blade.php</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n    &lt;div class=\"row\" style=\"margin-top:20px\"&gt;\n        &lt;div class=\"col-md-offset-3 col-md-6\"&gt;\n            &lt;div class=\"panel panel-default\"&gt;\n                &lt;div class=\"panel-heading\"&gt;\n                    &lt;h3 class=\"panel-title text-center\"&gt;\n                        &lt;span class=\"glyphicon glyphicon-film\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                        Modificar pel.l\u00edcula\n                    &lt;/h3&gt;\n                &lt;/div&gt;\n                &lt;div class=\"panel-body\" style=\"padding:30px\"&gt;\n                    &lt;form method='POST'&gt;\n                        @csrf\n                        @method('PUT')\n                        &lt;div class=\"form-group\"&gt;\n                            &lt;label for=\"title\"&gt;T\u00edtulo&lt;/label&gt;\n                            &lt;input type=\"text\" name=\"title\" id=\"title\" class=\"form-control\"&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"form-group\"&gt;\n                            &lt;label for='year'&gt;Any:&lt;/label&gt;\n                            &lt;input type='number' name='year' /&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"form-group\"&gt;\n                            &lt;label for='director'&gt;Director:&lt;/label&gt;\n                            &lt;input type='text' name='director' /&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"form-group\"&gt;\n                            &lt;label for='poster'&gt;Poster:&lt;/label&gt;\n                            &lt;input type='url' name='poster' /&gt;\n                        &lt;/div&gt;\n\n                        &lt;div class=\"form-group\"&gt;\n                            &lt;label for=\"synopsis\"&gt;Resumen&lt;/label&gt;\n                            &lt;textarea name=\"synopsis\" id=\"synopsis\" class=\"form-control\" rows=\"3\"&gt;&lt;/textarea&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"form-group text-center\"&gt;\n                            &lt;button type=\"submit\" class=\"btn btn-primary\" style=\"padding:8px 100px;margin-top:25px;\"&gt;\n                                Modificar pel.l\u00edcula\n                            &lt;/button&gt;\n                        &lt;/div&gt;\n                    &lt;/form&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    @stop\n</code></pre>"},{"location":"Exemple/VideoClub.html#modificant-les-proves","title":"Modificant les proves","text":"<p>Perqu\u00e8 totes seguisquen funcionant.</p> <pre><code>class BasicTest extends TestCase\n    {\n        public function testLoadHomePage(){ \n            $this-&gt;get('/')-&gt;assertStatus(302);\n        }\n        public function testLoadCatalogPage(){ \n            $this-&gt;get('/catalog')-&gt;assertStatus(200)-&gt;assertSee('Cat\u00e0leg');\n        }\n        public function testLoadCreatePage(){ \n            $this-&gt;get('/catalog/create')-&gt;assertStatus(200)-&gt;assertSee('Afegir pel.l\u00edcula');\n        }\n        public function testLoadEditPage(){ \n            $this-&gt;get('/catalog/edit/2')-&gt;assertStatus(200)-&gt;assertSee('Modificar pel.l\u00edcula');\n        }\n        public function testLoadShowPage(){ \n            $this-&gt;get('/catalog/show/2')-&gt;assertStatus(200)-&gt;assertSee('Editar Pel.l\u00edcula');\n        }\n    }\n</code></pre>"},{"location":"Exemple/VideoClub.html#configuracio-de-la-base-de-dades","title":"Configuraci\u00f3 de la base de dades","text":"<p>Video</p> <p>En primer lloc anem a configurar correctament la base de dades. Per a a\u00e7\u00f2 hem d'actualitzar els fitxers config/database.php i .env per a indicar que anem a usar una base de dades tipus MySQL cridada \"videoclub\" juntament amb el nom d'usuari i contrasenya d'acc\u00e9s (homestead i secret)</p> <p>A continuaci\u00f3 obrim PHPMyAdmin i creem una nova base de dades anomenada videoclub. Per a comprovar que tot s'ha configurat correctament anem a un terminal en la carpeta del nostre projecte i executem el comando que crea la taula de migracions. </p> <p>Si tot va b\u00e9 podrem actualitzar des de PHPMyAdmin i comprovar que s'ha creat aquesta taula dins de la nostra nova base de dades.</p> <p>Si ens donara algun error haurem de revisar els valors indicats en el fitxer .env. </p> <p>Ara anem a crear la taula que utilitzarem per a emmagatzemar el cat\u00e0leg de pel\u00b7l\u00edcules. Executa el comando de Artisan per a crear la migraci\u00f3 anomenada create_movies_table per a la taula movies. </p> <p>Una vegada creat edita aquest fitxer per a afegir tots els camps necessaris, aquests s\u00f3n:</p> Camp Tipus Valor per defecte id Autoincremental title String year String de longitud 8 director String de longitud 64 poster String rented Boole\u00e0 false synopsis Text timestamps Timestamps de Eloquent <p>Recorda que en el m\u00e8tode down de la migraci\u00f3 has de desfer els canvis que has fet en el m\u00e8tode up, en aquest cas seria eliminar la taula.</p> <p>Finalment executarem el comando de Artisan que afig les noves migracions i comprovarem en PHPMyAdmin que la taula s'ha creat correctament amb els camps que li hem indicat.</p> <p>.env</p> <pre><code>...\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=videoclub\nDB_USERNAME=homestead\nDB_PASSWORD=secret\n...\n</code></pre> <p></p> <p>create_movies_table.php</p> <pre><code>&lt;?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateMoviesTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('movies', function (Blueprint $table) {\n            $table-&gt;increments('id');\n            $table-&gt;string('title');\n            $table-&gt;string('year',8);\n            $table-&gt;string('director',64);\n            $table-&gt;string('poster');\n            $table-&gt;boolean('rented')-&gt;default(false);\n            $table-&gt;text('synopsis');\n            $table-&gt;timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('movies');\n    }\n}\n</code></pre>"},{"location":"Exemple/VideoClub.html#model-de-dades","title":"Model de dades","text":"<p>Video</p> <p>Anem a crear el model de dades associat amb la taula movies. Per a a\u00e7\u00f2 usarem el comando apropiat de Artisan per a crear el model anomenat Movie.</p> <p>Una vegada creat aquest fitxer ho obrirem i comprovarem que el nom de la classe siga el correcte i que herete de la classe Model.  I ja est\u00e0, no \u00e9s necessari fer res m\u00e9s, el cos de la classe pot estar buit ({}), tot la resta es fa autom\u00e0ticament!</p> <p></p>"},{"location":"Exemple/VideoClub.html#seeders","title":"Seeders","text":"<p>Ara anem a procedir a emplenar la taula de la base de dades amb les dades inicials. Per a a\u00e7\u00f2 editem el fitxer de llavors situat en database/seeds/DatabaseSeeder.php i seguirem els seg\u00fcents passos:</p> <ul> <li>Crear un m\u00e8tode privat (dins de la mateixa classe) anomenat seedCatalog() que s'haur\u00e0 de cridar des del m\u00e8tode run de la forma:</li> </ul> <pre><code>public function run() {\n    self::seedCatalog();\n    $this-&gt;command-&gt;info('Taula cat\u00e0leg inicialitzada amb dades!'); \n}\n</code></pre> <ul> <li>Movem el array de pel\u00b7l\u00edcules que es facilitava en els materials i que hav\u00edem copiat dins del controlador CatalogController a la classe de llavors (DatabaseSeeder.php), guardant-ho de la mateixa forma, com a variable privada de la classe.</li> <li>Dins del nou m\u00e8tode seedCatalog() realitzem les seg\u00fcents accions:<ul> <li>En primer lloc esborrem el contingut de la taula movies amb DB::table('movies')-&gt;delete();</li> <li>I a continuaci\u00f3 afegim el seg\u00fcent codi:</li> </ul> </li> </ul> <pre><code>foreach( $this-&gt;arrayPeliculas as $pelicula) { \n    $p = new Movie;\n    $p-&gt;title = $pelicula['title'];\n    $p-&gt;year = $pelicula['year'];\n    $p-&gt;director = $pelicula['director']; \n    $p-&gt;poster = $pelicula['poster']; \n    $p-&gt;rented = $pelicula['rented']; \n    $p-&gt;synopsis = $pelicula['synopsis']; \n    $p-&gt;save();\n}\n</code></pre> <p>Finalment haurem d'executar el comando de Artisan que processa les llavors i una vegada realitzat obrirem PHPMyAdmin per a comprovar que s'emplenat la taula movies amb el llistat de pel\u00b7l\u00edcules.</p> <p>Si t'apareix l'error \"Fatal error: Class 'Movie' not found\" revisa si has indicat l'espai de noms del model que vas a utilitzar (use App\\Movie;).</p> <pre><code>use Illuminate\\Database\\Seeder;\nuse App\\Movie;\n\nclass DatabaseSeeder extends Seeder\n{\nprivate $arrayPeliculas = \n..\npublic function run()\n        {\n            self::seedCatalog();\n            $this-&gt;command-&gt;info('Taula cat\u00e0leg inicialitzada amb dades!');\n        }\n\n\n    private function seedCatalog()\n    {\n        DB::table('movies')-&gt;delete();\n\n        foreach ($this-&gt;arrayPeliculas as $pelicula) {\n            $p = new Movie;\n            $p-&gt;title = $pelicula['title'];\n            $p-&gt;year = $pelicula['year'];\n            $p-&gt;director = $pelicula['director'];\n            $p-&gt;poster = $pelicula['poster'];\n            $p-&gt;rented = $pelicula['rented'];\n            $p-&gt;synopsis = $pelicula['synopsis'];\n            $p-&gt;save();\n        }\n    }\n}    \n</code></pre> <p></p>"},{"location":"Exemple/VideoClub.html#us-de-la-base-de-dades","title":"\u00das de la base de dades","text":"<p>Anem a actualitzar els m\u00e8todes del controlador CatalogController perqu\u00e8 obtinguen les dades des de la base de dades. Seguirem els seg\u00fcents passos:</p> <ul> <li>Modificar el m\u00e8tode index perqu\u00e8 obtinga tota la llista de pel\u00b7l\u00edcules des de la base de dades usant el model Movie i que li la passe a la vista.</li> <li>Modificar el m\u00e8tode show perqu\u00e8 obtinga la pel\u00b7l\u00edcula passada per par\u00e0metre usant el m\u00e8tode findOrFail i li la passe a la vista.</li> <li>Modificar el m\u00e8tode edit perqu\u00e8 obtinga la pel\u00b7l\u00edcula passada per par\u00e0metre usant el m\u00e8tode findOrFail i li la passe a la vista.</li> </ul> <p>Si en provar-ho t'apareix l'error \"Class 'Videoclub\\Http\\Controllers\\Movie' not found\" revisa si has indicat l'espai de noms del model que vas a utilitzar (use Videoclub\\Movie;).</p> <p>Ja no necessitarem m\u00e9s el array de pel\u00b7l\u00edcules (\\$arrayPeliculas) que hav\u00edem posat en el controlador, aix\u00ed que ho podem comentar o eliminar.</p> <p>Ara haurem d'actualitzar les vistes perqu\u00e8 en lloc d'accedir a les dades del array els obtinga de l'objecte amb la pel\u00b7l\u00edcula. Per a a\u00e7\u00f2 canviarem en tots els llocs on h\u00e0gem posat \\$pelicula['camp'] per \\$pelicula-&gt;camp.</p> <p>A m\u00e9s, en la vista catalog/index.blade.php, en comptes d'utilitzar l'\u00edndex del array (\\$key) com a identificador per a crear l'enlla\u00e7 a catalog/show/{id}, haurem d'utilitzar el camp id de la pel\u00b7l\u00edcula (\\$pelicula-&gt;id).  El mateix en la vista catalog/show.blade.php, per a generar l'enlla\u00e7 d'editar pel\u00b7l\u00edcula haurem d'afegir l'identificador de la pel\u00b7l\u00edcula a la ruta catalog/edit.</p> <p>catalogController.php</p> <pre><code>    use Illuminate\\Http\\Request;\n    use App\\Movie;\n\n    class CatalogController extends Controller\n    {\n        public function getIndex(){\n            $arrayPeliculas = Movie::all();\n            return view('index',compact('arrayPeliculas'));\n        }\n        public function getShow($id){\n            $pelicula = Movie::findOrFail($id);\n            return view('show',compact('pelicula'));\n        }\n        public function getCreate(){\n            return view('create');\n        }\n        public function getEdit($id){\n            $pelicula = Movie::findOrFail($id);\n            return view('edit',compact('pelicula'));\n        }\n    }\n</code></pre> <p>index.blade.php</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n    &lt;h2 &gt;Cat\u00e0leg&lt;/h2&gt;\n        &lt;div class=\"row\"&gt;\n        @foreach( $arrayPeliculas as $pelicula )        \n            &lt;div class=\"col-xs-6 col-sm-4 col-md-3 text-center\"&gt;\n                &lt;a href=\"{{ \"{{ url('/catalog/show/'.$pelicula-&gt;id) \" }}}}\"&gt;\n                    &lt;img src=\"{{ \"{{$pelicula['poster']\" }}}}\" style=\"height:200px\"/&gt; \n                    &lt;h4 style=\"min-height:45px;margin:5px 0 10px 0\"&gt;\n                    {{ \"{{$pelicula-&gt;title\" }}}} &lt;/h4&gt;\n                &lt;/a&gt;\n            &lt;/div&gt; \n        @endforeach\n        &lt;/div&gt;  \n    @stop\n</code></pre> <p>show.blade.php</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col-sm-4\"&gt;\n                        &lt;img src=\"{{ \"{{$pelicula-&gt;poster\" }}}}\" alt=\"{{ \"{{$pelicula-&gt;title\" }}}}\"/&gt;\n            &lt;/div&gt;\n            &lt;div class=\"col-sm-8\"&gt;\n                        &lt;h2&gt;{{ \"{{$pelicula-&gt;title\" }}}}&lt;/h2&gt;\n                        &lt;h4&gt;{{ \"{{$pelicula-&gt;year\" }}}}&lt;/h4&gt;\n                        &lt;h4&gt;{{ \"{{$pelicula-&gt;director\" }}}}&lt;/h4&gt;\n                        &lt;p&gt;&lt;strong&gt;Resumen: &lt;/strong&gt;{{ \"{{$pelicula-&gt;synopsis\" }}}}&lt;/p&gt;\n                        &lt;p&gt;&lt;strong&gt;Estado: &lt;/strong&gt;Pel.l\u00edcula @if ($pelicula-&gt;rented)  Actualment llogada @else disponible @endif&lt;/p&gt;\n                        &lt;p&gt;\n                           @if ($pelicula-&gt;rented) \n                            &lt;a href='' class=\"btn btn-info\"&gt;Tornar Pel.l\u00edcula&lt;/a&gt; \n                           @else \n                            &lt;a href='' class=\"btn btn-danger\"&gt;Llogar Pel.l\u00edcula&lt;/a&gt;\n                           @endif \n                           &lt;a href=\"\\catalog\\edit\\{{ \"{{$pelicula-&gt;id\" }}}}\" class=\"btn btn-warning\"&gt;&lt;i class=\"fa fa-pencil\"&gt;&lt;/i&gt;Editar Pel.l\u00edcula&lt;/a&gt;\n                           &lt;a href=\"\\catalog\" class=\"btn btn-default\"&gt;Tornar cat\u00e0leg&lt;/a&gt;\n                        &lt;/p&gt;\n            &lt;/div&gt; \n        &lt;/div&gt;\n    @stop\n</code></pre>"},{"location":"Exemple/VideoClub.html#afegir-i-editar-pellicules","title":"Afegir i editar pel\u00b7l\u00edcules","text":"<p>Video</p> <p>En primer lloc anem a afegir les rutes que ens van a fer falta per a arreplegar les dades en enviar els formularis. Per a a\u00e7\u00f2 editem el fitxer de rutes i afegim dues rutes (tamb\u00e9 protegides pel filtre auth):</p> <ul> <li>Una ruta de tipus POST per a la url catalog/create que apuntar\u00e0 al m\u00e8tode postCreate del controlador CatalogController.</li> <li>I una altra ruta tipus PUT per a la url catalog/edit/{id} que apuntar\u00e0 al m\u00e8tode putEdit del controlador CatalogController.</li> </ul> <p>A continuaci\u00f3 anem a editar la vista catalog/edit.blade.php amb els seg\u00fcents canvis:</p> <ul> <li>Revisar que el m\u00e8tode d'enviament del formulari siga tipus PUT.</li> <li>Hem de modificar tots els inputs perqu\u00e8 com a valor del camp pose el valor corresponent de la pel\u00b7l\u00edcula. Per exemple en el primer input haur\u00edem d'afegir value=\"{{$pelicula-&gt;title}}\". </li> <li>Realitza el mateix per a la resta de camps: year, director, poster i synopsis. L'\u00fanic camp diferent ser\u00e0 el de synopsis ja que el input \u00e9s tipus textarea, en aquest cas el valor ho haurem de posar directament entre l'etiqueta d'obertura i la de tancament.</li> <li> <p>Finalment hem d'actualitzar el controlador CatalogController amb els dos nous m\u00e8todes. En tots dos casos hem d'usar la injecci\u00f3 de depend\u00e8ncies per a afegir la classe Request com a par\u00e0metre d'entrada (revisa la secci\u00f3 \"Dades d'entrada\" de la teoria). A m\u00e9s per a cada m\u00e8tode farem:</p> </li> <li> <p>En el m\u00e8tode postCreate vam crear una nova inst\u00e0ncia del model Movie, assignem el valor de tots els camps d'entrada (title, year, director, poster i synopsis) i els guardem. Finalment, despr\u00e9s de guardar, fem una redirecci\u00f3 a la ruta /catalog.</p> </li> <li>En el m\u00e8tode putEdit cerquem la pel\u00b7l\u00edcula amb l'identificador passat per par\u00e0metre, actualitzem els seus camps i els guardem. Finalment realitzem una redirecci\u00f3 a la pantalla amb la vista detalle de la pel\u00b7l\u00edcula editada. Nota: de moment en cas d'error no es mostrar\u00e0 res.</li> </ul> <p>** web.php **</p> <pre><code>    Auth::routes();\n    Route::get('/','HomeController@getHome');\n    Route::group(['middleware'=&gt;'auth'],function(){\n        Route::get('/logout','Auth\\Logincontroller@logout');\n        Route::get('catalog','CatalogController@getIndex');\n        Route::get('catalog/show/{id}', 'CatalogController@getShow');\n        Route::get('catalog/create','CatalogController@getCreate');\n        Route::post('catalog/create','CatalogController@postCreate');\n        Route::get('catalog/edit/{id}','CatalogController@getEdit');\n        Route::put('catalog/edit/{id}','CatalogController@putEdit');\n    });\n</code></pre> <p></p> <p>** HomeController **</p> <pre><code>    &lt;?php\n\n    namespace App\\Http\\Controllers;\n\n    use Illuminate\\Http\\Request;\n    use Illuminate\\Support\\Facades\\Auth;\n\n    class HomeController extends Controller\n    {\n\n        public function getHome()\n        {\n            if (Auth::user())\n                return redirect()-&gt;action('CatalogController@getIndex');\n            else \n                return redirect('login');\n        }\n    }\n</code></pre> <p>** CatalogController **</p> <pre><code>    &lt;?php\n\n    namespace App\\Http\\Controllers;\n\n    use Illuminate\\Http\\Request;\n    use App\\Movie;\n\n    class CatalogController extends Controller\n    {\n        public function getIndex(){\n            $arrayPeliculas = Movie::all();\n            return view('index',compact('arrayPeliculas'));\n        }\n        public function getShow($id){\n            $pelicula = Movie::findOrFail($id);\n            return view('show',compact('pelicula'));\n        }\n        public function getCreate(){\n            return view('create');\n        }\n        public function postCreate(Request $request){\n            $movie = new Movie();\n            $movie-&gt;title = $request-&gt;title;\n            $movie-&gt;year = $request-&gt;year;\n            $movie-&gt;director = $request-&gt;director;\n            $movie-&gt;poster = $request-&gt;poster;\n            $movie-&gt;synopsis = $request-&gt;synopsis;\n            $movie-&gt;save();\n            return redirect('/catalog');\n        }\n        public function getEdit($id){\n            $pelicula = Movie::findOrFail($id);\n            return view('edit',compact('pelicula'));\n        }\n        public function putEdit(Request $request,$id){\n            $movie = Movie::findOrFail($id);\n            $movie-&gt;title = $request-&gt;title;\n            $movie-&gt;year = $request-&gt;year;\n            $movie-&gt;director = $request-&gt;director;\n            $movie-&gt;poster = $request-&gt;poster;\n            $movie-&gt;synopsis = $request-&gt;synopsis;\n            $movie-&gt;save();\n            return redirect(\"/catalog/show/$id\");\n        }\n    }\n</code></pre>"},{"location":"Exemple/VideoClub.html#validacio-formulari","title":"Validaci\u00f3 Formulari","text":"<p>Video</p>"},{"location":"Exemple/VideoClub.html#proves","title":"Proves","text":"<p>Ara fallen totes les proves en les quals hem d'estar autenticats. Per a corregir a\u00e7\u00f2 hem d'executar el get una vegada que ens h\u00e0gem loguejat. Per a fer a\u00e7\u00f2 tenim actuar com un usuari.</p> <pre><code>private function defaultUser(){ \n    return User::find(1);\n}\n\npublic function testLoadCreatePage(){ \n   $this-&gt;actingAs($this-&gt;defaultUser())-&gt;get('/catalog/create')-&gt;assertStatus(200)-&gt;assertSee('Afegir pel.l\u00edcula');\n}\n</code></pre> <p>Fes que totes les proves tornen a funcionar.</p>"},{"location":"Exemple/VideoClub.html#installacio-de-paquets","title":"Instal.laci\u00f3 de paquets","text":"<p>Video</p> <p>Els paquets s\u00f3n la manera prim\u00e0ria d'afegir funcionalitat a Laravel. Els paquets podrien ser qualsevol cosa d'una manera: des de un gran de treballar amb dates com Carbon, o un marc de testatge de BDD sencer com Behat.</p> <p>Naturalment, hi ha tipus diferents de paquets. Alguns paquets s\u00f3n independent del framework, treballen amb qualsevol marc de PHP. Qualssevol d'aquests paquets poden ser utilitzats amb Laravel afegint-los dins el vostre arxiu composer.json o amb composer require</p> <p>D'altra banda, altres paquets s\u00f3n per \u00fas amb Laravel. Aquests paquets poden tenir rutes, controladors, vistes, i la configuraci\u00f3 concretament per a Laravel. </p>"},{"location":"Exemple/VideoClub.html#exemple-stydenet-html-package","title":"Exemple: StydeNet Html package","text":"<p>Aquest paquet cont\u00e9 una col\u00b7lecci\u00f3 de classes de PHP per generar components d'HTML com\u00fa, com:</p> <ul> <li>Menus</li> <li>Missatges d'Alerta</li> <li>Col.leccions en formularis</li> <li>Camps de r\u00e0dios i checkboxes en formulari</li> </ul> <p>\u00c9s una extensi\u00f3 del paquet HTML de Laravel Colective i ser\u00e0 molt \u00fatil per generar formularis i HTML din\u00e0micament.</p> <ul> <li> <p>Per Instal\u00b7lar fes c\u00f3rrer el composer require \"styde/html=~1.8\" o afegint \"styde/html\": \"~1.8\" a l'arxiu composer.json.</p> </li> <li> <p>Tamb\u00e9, necessites registrar en el app/Http/Kernel.php el middleware \\Styde\\Html\\Alerta\\Middleware::class despres del middleware StartSession . </p> <pre><code>// Per Laravel superior a 5.4\nprotected $middlewareGroups = [\n    \\Styde\\Html\\Alert\\Middleware::class,\n    //...\n];\n</code></pre> </li> </ul> <p>Aquest middleware \u00e9s necessitat per fer els missatges d'alerta persistents entre sessions, despr\u00e9s de que cada petici\u00f3 \u00e9s completada.</p> <p>Ara tindr\u00e0s autom\u00e0ticament disponibles el seg\u00fcents components:</p> <pre><code>Alert =&gt; Styde\\Html\\Facades\\Alert\nField =&gt; Styde\\Html\\Facades\\Field\nMenu  =&gt; Styde\\Html\\Facades\\Menu\nForm  =&gt; Collective\\Html\\FormFacade\nHtml  =&gt; Collective\\Html\\HtmlFacade\n</code></pre> <p>Opcionalment, pots tamb\u00e9 executar php artisan vendor:publish --provider='Styde\\Html\\HtmlServiceProvider' per publicar l'arxiu de configuraci\u00f3 en config/html.php i revisar les seves opcions i valors.</p>"},{"location":"Exemple/VideoClub.html#installa-el-component-styde","title":"Instal.la el component styde","text":"<p>Ja est\u00e0 explicat dalt.</p>"},{"location":"Exemple/VideoClub.html#refactorizar-el-formulari","title":"Refactorizar el formulari","text":"<p>En primer lloc, anem a canviar el formulari 'create'. Substitu\u00efm tot el codi html per este que utilitza la classe Form dels components instal.lats. El formulari est\u00e0 associat est\u00e0 associat a un model i posse els camps que en fan falta. No cal possar el @csfr doncs es possa autom\u00e0ticament.</p> <pre><code>    * {!! Form::model(new App\\Movie(),['class'=&gt;'form-horizontal form-label-left','enctype'=&gt;\"multipart/form-data\"]) !!}\n        {!! Field::text('title') !!}\n        {!! Field::text('year') !!}\n        {!! Field::text('director') !!}\n        {!! Field::text('poster') !!}\n        {!! Field::textarea('synopsis') !!}\n        {!! Form::submit('Enviar',['class'=&gt;'btn btn-success','id'=&gt;'submit']) !!}\n    {!! Form::close() !!}   *\n</code></pre> <p>Canviarem, de la mateixa forma, el formulari de modificaci\u00f3, tenint en compte que si en conte de passar-li el model li passe un element del model, el valors s'afegisen al formulari.</p> <pre><code>    {!! Form::model($pelicula,['class'=&gt;'form-horizontal form-label-left','enctype'=&gt;\"multipart/form-data\",'method'=&gt;'PUT']) !!}\n        {!! Field::text('title') !!}\n        {!! Field::text('year') !!}\n        {!! Field::text('director') !!}\n        {!! Field::select('id_genre') !!}\n        {!! Field::text('poster') !!}\n        {!! Field::textarea('synopsis') !!}\n    {!! Form::submit('Enviar',['class'=&gt;'btn btn-success','id'=&gt;'submit']) !!}\n    {!! Form::close() !!}\n</code></pre>"},{"location":"Exemple/VideoClub.html#refactoritzar-els-metodes-create-i-update","title":"Refactoritzar els m\u00e8todes create i update","text":"<p>Anem a utilitzar l'assignament massiu per a omplir tots els camp a l'hora. Pots fer-ho declarant en el model la variable $fillable o la variable $guard</p> <p>Despr\u00e9s haur\u00e0s de substituir l'assignaci\u00f3 de tots els camps, en el metodes create i update, per l'instrucci\u00f3:</p> <pre><code>$movie-&gt;fill($request-&gt;toArray());\n</code></pre> <p>storeMovie.php</p> <pre><code>    &lt;?php\n\n    namespace App\\Http\\Requests;\n\n    use Illuminate\\Foundation\\Http\\FormRequest;\n    use DateTime;\n\n    class StoreMovie extends FormRequest\n    {\n        /**\n         * Determine if the user is authorized to make this request.\n         *\n         * @return bool\n         */\n        public function authorize()\n        {\n            return true;\n        }\n\n        /**\n         * Get the validation rules that apply to the request.\n         *\n         * @return array\n         */\n        public function rules()\n        {\n            $now = new DateTime;\n            $year = $now-&gt;format(\"Y\");\n            return [\n                'title' =&gt; 'required|max:255',\n                'year' =&gt; \"required|numeric|min:1900|max:$year\",\n                'poster' =&gt; 'required'\n            ];\n        }\n    }\n</code></pre> <p>catalogController.php</p> <pre><code>    ...\n    public function postCreate(StoreMovie $request){\n        $movie = new Movie();\n        $movie-&gt;fill($request-&gt;toArray());\n        $movie-&gt;save();\n        return redirect('/catalog');\n    }\n    public function putEdit(StoreMovie $request,$id){\n        $movie = Movie::findOrFail($id);\n        $movie-&gt;fill($request-&gt;toArray());\n        $movie-&gt;save();\n        return redirect(\"/catalog/show/$id\");\n    }\n    ... \n</code></pre> <p>movie.php</p> <pre><code>protected $guarded = [];\n</code></pre>"},{"location":"Exemple/VideoClub.html#afegir-relacio-u-a-molts","title":"Afegir relaci\u00f3 u a molts.","text":"<p>Video</p> <ul> <li>Crea un taula, mitjan\u00e7ant una migraci\u00f3(create_genres_table) que es diga genres (gener\u00e8 en angl\u00e9s) ('id','titulo') </li> </ul> <pre><code>&lt;?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateGenresTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('genres', function (Blueprint $table) {\n            $table-&gt;increments('id');\n            $table-&gt;string('title');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('genres');\n    }\n}\n</code></pre> <ul> <li> <p>Anem a crear una migraci\u00f3 alter_movies_table per afegir un camp (id_genre) i crear la clau for\u00e0nia amb genres.</p> <pre><code>&lt;?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass AlterMoviesTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('movies', function (Blueprint $table) {\n            $table-&gt;integer('id_genre')-&gt;unsigned()-&gt;nullable();\n            $table-&gt;foreign('id_genre')-&gt;references('id')-&gt;on('genres')-&gt;onUpdate('CASCADE')-&gt;onDelete('SET NULL');\n    });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('movies', function (Blueprint $table) {\n            $table-&gt;dropForeign('movies_id_genre_foreign');\n            $table-&gt;dropColumn('id_genre');\n        });\n    }\n</code></pre> <p>}</p> </li> <li> <p>Executa la migraci\u00f3 i comprova que tot s'ha executat correctament.</p> </li> <li>Emplena la taula Genres amb uns quants.</li> <li>Afegix el model Genre.</li> <li> <p>Afegix la rel.laci\u00f3 belongsTo al model Movie per vincular-la al model Genre.</p> <pre><code>public function Genre(){\n        return $this-&gt;belongsTo(Genre::class,'id_genre');\n    }\n</code></pre> </li> <li> <p>Afegix la rel.laci\u00f3 HasMany al model Genre.</p> </li> </ul> <pre><code>public function movies(){\n        return $this-&gt;belongsToMany(Movie::class);\n}\n</code></pre> <ul> <li>Per tal que en la vista es motre el titol del g\u00e8nere:</li> </ul> <pre><code>        &lt;p&gt;&lt;strong&gt;Genere:&lt;/strong&gt;\n         @if ($pelicula-&gt;Genre)  {{ $pelicula-&gt;Genre-&gt;title @if ($pelicula-&gt;rented)\n                    &lt;form action= {{action('catalogController@putReturn',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n                        {{ method_field('PUT') }}\n                        @csrf\n                        &lt;button type=\"submit\" class=\"btn btn-info\" &gt; Tornar Pel\u00edcula&lt;/button&gt;\n                    &lt;/form&gt;\n                @else\n                    &lt;form action= {{action('catalogController@putRent',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n                        {{ method_field('PUT') }}\n                        @csrf\n                        &lt;button type=\"submit\" class=\"btn btn-secondary\" &gt; Llogar Pel\u00edcula&lt;/button&gt;\n                    &lt;/form&gt;\n                    &lt;form action= {{action('catalogController@deleteMovie',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n                        {{ method_field('DELETE') }}\n                        @csrf\n                        &lt;button type=\"submit\" class=\"btn btn-danger\"  &gt; Esborrar Pel\u00edcula&lt;/button&gt;\n                    &lt;/form&gt;\n                @endif}} \n         @else Desconocido\n         @endif\n        &lt;/p&gt;\n</code></pre>"},{"location":"Exemple/VideoClub.html#afegir-el-camp-genere-al-formulari","title":"Afegir el camp G\u00e8nere al formulari.","text":"<p>Video</p> <p>Anem a utilitza el component d'Styde:</p> <pre><code>{!! Field::select('id_genre') !!}\n</code></pre> <p>que posarem a les vistes. Si a este component li passem un array de par\u00e0metres, es possar\u00e0 com a valors seleccionables:</p> <pre><code>{!! Field::select('id_genre',['terror','musical','thriller']) !!}\n</code></pre> <p>Tamb\u00e9 es pot declarar una funci\u00f3 en el model Movie per a que torne els valors.</p> <pre><code>    public function getIdGenreOptions(){\n        return ['terror','musical','thriller']\n    }\n</code></pre> <p>Per\u00f2 el que volem \u00e9s que els valor s'agafem de la taula Genres. Tal i com aix\u00ed:</p> <pre><code>public function getIdGenreOptions()\n{\n        return Genre::all()-&gt;toArray();\n}\n</code></pre> <p>Per\u00f2 a\u00e7o no acaba de funcionar perqu\u00e8 torna un array d'esta forma</p> <pre><code>    array:2 [\u25bc\n      0 =&gt; array:2 [\u25bc\n        \"id\" =&gt; 1\n        \"titulo\" =&gt; \"Terror\"\n      ]\n      1 =&gt; array:2 [\u25bc\n        \"id\" =&gt; 2\n        \"titulo\" =&gt; \"Fant\u00e1stico\"\n      ]\n    ]\n</code></pre> <p>per\u00f2 per a que funcionara hauria de ser d'aquesta altra</p> <pre><code>    array:2 [\u25bc\n      1 =&gt; \"Terror\"\n      2 =&gt; \"Fant\u00e1stico\"\n      ]\n    ]\n</code></pre> <p>Aix\u00ec que anem a fer una funci\u00f3 gen\u00e8rica php que donada una col.lecci\u00f3 d'objectes i dos camps del mateix, genere un array per a l'option.</p> <pre><code>function hazArray($elementos,'campo1','campo2')\n{\n    return $array\n}\n</code></pre> <p>i la cridariem de la seg\u00fcent forma:</p> <pre><code>    public function getIdGenreOptions()\n    {\n        return hazArray(Genre::all(),'id','titulo');\n    }\n</code></pre> <p>De moment declara-la com a privada en el model per a provar que funciona.</p> <p>Nota: en Laravel, per a poder vore el valor d'una variable i para l'execuci\u00f3 del programa s'utilitza la funci\u00f3 dd($variable) </p>"},{"location":"Exemple/VideoClub.html#helperserviceprovider","title":"HelperServiceProvider","text":"<p>Video</p> <p>Per\u00f2, esta funci\u00f3 ha de poser ser visible en tota la  aplicaci\u00f3. Per tal de aconseguir-ho anem a crear un fitxer on guardar les nostres funcions gen\u00e8riques.</p> <ul> <li>Crea una carpeta Helpers dins de app</li> <li>Crea un fitxer myHelpers dins d'aquesta carpeta.</li> <li>copia la funci\u00f3 hazArray</li> </ul> <pre><code>&lt;?php\n\nfunction hazArray($elementos, $campo1, $campo2)\n    {\n        $todos = [];\n        foreach ($elementos as $elemento)\n            $todos[$elemento-&gt;$campo1] = $elemento-&gt;$campo2;\n        return $todos;\n    }\n</code></pre> <p>Per a que les funcions d'aquest fitxer siguen visibles en l'aplicaci\u00f3 anem a crear un ServiceProvider i a registrar-lo:</p> <pre><code>php artisan make:provider HelperServiceProvider\n</code></pre> <p>Crear\u00e0 un fitxer en la carpeta Providers. L'editem per afegir el nostre Helper.</p> <pre><code>    /**\n         * Register services.\n         *\n         * @return void\n         */\n        public function register()\n        {\n            require_once base_path() . '/app/Helpers/myHelpers.php';\n        }\n</code></pre> <p>I ara registrem el ServiceProvider en el fitxer config/app.php</p> <pre><code>'providers' =&gt; [\n\n        /*\n         * Laravel Framework Service Providers...\n         */\n        Illuminate\\Auth\\AuthServiceProvider::class,\n\n        .....\n\n        /*\n         * Package Service Providers...\n         */\n\n        /*\n         * Application Service Providers...\n         */\n        App\\Providers\\AppServiceProvider::class,\n        App\\Providers\\AuthServiceProvider::class,\n        // App\\Providers\\BroadcastServiceProvider::class,\n        App\\Providers\\EventServiceProvider::class,\n        App\\Providers\\RouteServiceProvider::class,\n        App\\Providers\\HelperServiceProvider::class,\n\n    ],\n</code></pre> <p>I com cada volta que toquen un fitxer de configuraci\u00f3 executem</p> <pre><code>php artisan config:cache\n</code></pre> <p>I tot ha de funcionar. Ja podem triar un g\u00e8nere en cada pel.licula.</p>"},{"location":"Exemple/VideoClub.html#el-component-de-menu-styde","title":"El component de menu styde.","text":"<p>Video</p> <p>Anem a fer el menu des d'un fitxer de text utilitzan el component de menu del paquet instal.lat</p> <p>Substitu\u00efm el navbar per :</p> <pre><code>    &lt;nav class=\"navbar navbar-expand-md navbar-light navbar-laravel\"&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;a class=\"navbar-brand\" href=\"{{url('/')}}\"&gt;\n                &lt;span class=\"glyphicon glyphicon-tower\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                Videoclub\n            &lt;/a&gt;\n            &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"{{ __('Toggle navigation') }}\"&gt;\n                    &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n            &lt;/button&gt;\n            @if( Auth::check() )\n                {!! Menu::make(config('menu'), 'navbar-nav mr-auto') !!}\n            @endif\n        &lt;/div&gt;\n    &lt;/nav&gt;\n</code></pre> <p>on config('menu') enlla\u00e7a en un fitxer que hem de crear en la carpeta config i de nom menu.php. Este haur\u00e0 de contindre:</p> <pre><code>    &lt;?php\n\n    return [\n        'catalogo' =&gt; ['url' =&gt; '/catalog'],\n        'nueva' =&gt; ['title' =&gt; 'Nueva Pel\u00edcula', 'url' =&gt; '/catalog/create'],\n        'logout' =&gt; ['title' =&gt; 'Cerrar Sesion' ,'url' =&gt; '/logout']\n    ];\n</code></pre> <p>Cal fer php artisan config:cache</p> <p>On estan les opcions de menu.</p>"},{"location":"Exemple/VideoClub.html#completant-botons","title":"Completant botons","text":"<p>En aquest exercici anem a afegir la funcionalitat dels botons de llogar, retornar i eliminar pel\u00b7l\u00edcules. En tots els casos haurem de crear una nova ruta, un nou m\u00e8tode en el controlador , actualitzar el boton en la vista i mostrar una notificaci\u00f3 despres de realitzar l'acci\u00f3. En la seg\u00fcent taula es mostra un resum de la nova ruta a afegir:</p> Ruta Tipus Controlador/Acci\u00f3 /catalog/rent/{id} PUT CatalogController@putRent /catalog/return/{id} PUT CatalogController@putReturn /catalog/delete/{id} DELETE CatalogController@deleteMovie <p>Aquests tres m\u00e8todes s\u00f3n similars al m\u00e8tode que ja hav\u00edem implementat abans per a editar les dades d'una pel.l\u00edcula. En el cas de putRent i putReturn \u00fanicament modificarem el camp rented assignant-li el valor true i false respectivament i una vegada guardat crearem la notificaci\u00f3 i realitzarem una redirecci\u00f3 a la pantalla amb la vista detalle de la pel.l\u00edcula. En el m\u00e8tode deleteMovie tamb\u00e9 obtindrem el registre de la pel\u00b7l\u00edcula per\u00f2 haurem de cridar al m\u00e8tode delete() de la mateixa, una vegada fet a\u00e7\u00f2 afegirem la notificaci\u00f3 i realitzarem una redirecci\u00f3 al llistat general de pel\u00b7l\u00edcules.</p> <p>A continuaci\u00f3 hem d'editar la vista detalle de pel\u00b7l\u00edcules per a modificar els botons (show.blade). At\u00e8s que les accions han de realitzaren utilitzant peticions HTTP tipus PUT i DELETE no podem posar un enlla\u00e7 normal (ja que seria de tipus GET). Per a solucionar-ho hem de crear un formulari al voltant del bot\u00f3 i assignar al formulari el m\u00e8tode corresponent.</p> <p>Per exemple:</p> <pre><code>    &lt;form action= {{action('CatalogController@putReturn',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n        {{ method_field('PUT') }}\n        {{ csrf_field() }}\n        &lt;button type=\"submit\" class=\"btn btn-danguer\" style= \"display:inline\" &gt; Devolver Pel\u00edcula&lt;/button&gt;\n    &lt;/form&gt;\n</code></pre>"},{"location":"Exemple/VideoClub.html#fes-un-manteniment-per-a-la-taula-de-generes-i-fica-la-al-menu","title":"Fes un manteniment per a la taula de g\u00e8neres i fica-la al menu.","text":"<p>Per a fer submenus amb styde :</p> <pre><code>    return [\n        'catalogo' =&gt; [ 'submenu' =&gt; [\n                'lista' =&gt;[ 'title'=&gt; 'Cat\u00e1logo', 'url' =&gt; '/catalog'],\n                'nueva' =&gt; ['title' =&gt; 'Nueva Pel\u00edcula', 'url' =&gt; '/catalog/create'],\n            ]],\n            'genero' =&gt; ['submenu' =&gt; [ \n                'genre' =&gt; ['title' =&gt; 'Mantenimiento Generos' , 'url' =&gt; '/genre'],\n                'nuevo' =&gt; ['title' =&gt; 'Nuevo Genero', 'url' =&gt; '/genre/create']\n                ]],\n        'logout' =&gt; ['title' =&gt; 'Cerrar Sesion' ,'url' =&gt; '/logout']\n    ];\n</code></pre> <p>web.php</p> <pre><code>        Route::put('catalog/return/{id}','catalogController@putReturn');\n    Route::put('catalog/rent/{id}','catalogController@putRent');\n    Route::delete('catalog/{id}','catalogController@deleteMovie'); \n</code></pre> <p>catalogController</p> <pre><code>public function putRent($id){\n        $pelicula = Movie::findOrFail($id);\n        $pelicula-&gt;rented = true;\n        $pelicula-&gt;save();\n        return redirect(\"/catalog/show/$id\");\n    }\n    public function putReturn($id){\n        $pelicula = Movie::findOrFail($id);\n        $pelicula-&gt;rented = false;\n        $pelicula-&gt;save();\n        return redirect(\"/catalog/show/$id\");\n    }\n    public function deleteMovie($id){\n        Movie::findOrFail($id)-&gt;delete();\n        return redirect(\"/catalog\");\n    }\n</code></pre> <p>show.blade.php</p> <pre><code> @if ($pelicula-&gt;rented)\n                    &lt;form action= {{action('catalogController@putReturn',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n                        {{ method_field('PUT') }}\n                        @csrf\n                        &lt;button type=\"submit\" class=\"btn btn-info\" &gt; Tornar Pel\u00edcula&lt;/button&gt;\n                    &lt;/form&gt;\n                @else\n                    &lt;form action= {{action('catalogController@putRent',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n                        {{ method_field('PUT') }}\n                        @csrf\n                        &lt;button type=\"submit\" class=\"btn btn-secondary\" &gt; Llogar Pel\u00edcula&lt;/button&gt;\n                    &lt;/form&gt;\n                    &lt;form action= {{action('catalogController@deleteMovie',$pelicula-&gt;id)}} method=\"POST\" style=\"display:inline\"&gt;\n                        {{ method_field('DELETE') }}\n                        @csrf\n                        &lt;button type=\"submit\" class=\"btn btn-danger\"  &gt; Esborrar Pel\u00edcula&lt;/button&gt;\n                    &lt;/form&gt;\n                @endif\n    @endif\n</code></pre> <p>web.php</p> <pre><code>Route::get('genre','genreController@getIndex');\nRoute::get('genre/create','genreController@getCreate');\nRoute::post('genre/create','genreController@postCreate');\nRoute::get('genre/edit/{id}','genreController@getEdit');\nRoute::put('genre/edit/{id}','genreController@putEdit');\nRoute::get('genre/delete/{id}','genreController@delete');\n</code></pre> <p>genreController.php</p> <pre><code>&lt;?php\n\n    namespace App\\Http\\Controllers;\n\n    use Illuminate\\Http\\Request;\n    use App\\Genre;\n\n\n    class GenreController extends Controller\n    {\n        public function getIndex(){\n            $generos = Genre::all();\n            return view('genre.index',compact('generos'));\n        }\n\n        public function getCreate(){\n            return view('genre.create');\n        }\n        public function postCreate(Request $request){\n            $genre = new Genre();\n            $genre-&gt;fill($request-&gt;toArray());\n            $genre-&gt;save();\n            return redirect('/genre');\n        }\n        public function getEdit($id){\n            $genre = Genre::findOrFail($id);\n            return view('genre.edit',compact('genre'));\n        }\n        public function putEdit(Request $request,$id){\n            $genre = Genre::findOrFail($id);\n            $genre-&gt;fill($request-&gt;toArray());\n            $genre-&gt;save();\n            return redirect(\"/genre\");\n        }\n        public function delete($id){\n            Genre::findOrFail($id)-&gt;delete();\n            return redirect(\"/genre\");\n        }\n    }\n</code></pre> <p>create.blade.php</p> <pre><code>@extends('layouts.master')\n    @section('content')\n    &lt;div class=\"row\" style=\"margin-top:20px\"&gt;\n        &lt;div class=\"col-md-offset-3 col-md-6\"&gt;\n            &lt;div class=\"panel panel-default\"&gt;\n                &lt;div class=\"panel-heading\"&gt;\n                    &lt;h3 class=\"panel-title text-center\"&gt;\n                        &lt;span class=\"glyphicon glyphicon-film\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                        Afegir g\u00e8nere\n                    &lt;/h3&gt;\n                &lt;/div&gt;\n                &lt;div class=\"panel-body\" style=\"padding:30px\"&gt;\n                    {!! Form::model(new App\\Genre,['class'=&gt;'form-horizontal form-label-left','enctype'=&gt;\"multipart/form-data\"]) !!}\n                        {!! Field::text('title') !!}\n                        {!! Form::submit('Enviar',['class'=&gt;'btn btn-success','id'=&gt;'submit']) !!}\n                    {!! Form::close() !!}\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    @stop\n</code></pre> <p>edit.blade.php</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n    &lt;div class=\"row\" style=\"margin-top:20px\"&gt;\n        &lt;div class=\"col-md-offset-3 col-md-6\"&gt;\n            &lt;div class=\"panel panel-default\"&gt;\n                &lt;div class=\"panel-heading\"&gt;\n                    &lt;h3 class=\"panel-title text-center\"&gt;\n                        &lt;span class=\"glyphicon glyphicon-film\" aria-hidden=\"true\"&gt;&lt;/span&gt;\n                        Modificar Genere\n                    &lt;/h3&gt;\n                &lt;/div&gt;\n                {!! Form::model($genre,['class'=&gt;'form-horizontal form-label-left','enctype'=&gt;\"multipart/form-data\"]) !!}\n                    @method('PUT')\n                    {!! Field::text('title') !!}\n                {!! Form::submit('Enviar',['class'=&gt;'btn btn-success','id'=&gt;'submit']) !!}\n                {!! Form::close() !!}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n    @stop\n</code></pre> <p>index.blade.php</p> <pre><code>    @extends('layouts.master')\n    @section('content')\n    &lt;h2 &gt;G\u00e8neres&lt;/h2&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;table class=\"table-bordered table-info\"&gt;\n                &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;Titulo&lt;/th&gt;&lt;th&gt;Operacion&lt;/th&gt;&lt;/tr&gt;\n                @foreach( $generos as $genero )        \n                &lt;tr&gt;\n                    &lt;td&gt;{{$genero-&gt;id}}&lt;/td&gt;\n                    &lt;td&gt;{{$genero-&gt;title}}&lt;/td&gt;\n                    &lt;td&gt;&lt;a href='/genre/edit/{{$genero-&gt;id}}'&gt;&lt;i class='fa fa-edit'&gt;&lt;/i&gt;&lt;/a&gt;\n                        &lt;a href='/genre/delete/{{$genero-&gt;id}}'&gt;&lt;i class='fa fa-trash'&gt;&lt;/i&gt;&lt;/a&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                @endforeach\n            &lt;/table&gt;\n        &lt;/div&gt;  \n    @stop\n</code></pre>"},{"location":"Exemple/VideoClub.html#alertes","title":"Alertes","text":"<p>Video</p> <p>El component d'Styde te un sistema de notificacions. Per a fer-lo servir cal possar en la vista on volem que ixquen les notificacions. En el nostre cas ser\u00e0 en la plantilla, despr\u00e9s de mostrar el contingut:</p> <p>master.blade.php</p> <pre><code>    ...\n    &lt;div id='app' class=\"container\"&gt; \n        @yield('content')\n        {!! Alert::render() !!}\n    &lt;/div&gt;\n    ...\n</code></pre> <p>I ara quan guardem una pel.licula podem mostrar una notificaci\u00f3 a l'usuari:</p> <p>CatalogController.php</p> <pre><code>    ...\n    public function postCreate(StoreMovie $request){\n        $movie = new Movie();\n        $movie-&gt;fill($request-&gt;toArray());\n        $movie-&gt;save();\n        Alert::success(\"S'ha guardat la pel.licula\");\n        return redirect('/catalog');\n    }\n    ...\n</code></pre>"},{"location":"Exemple/VideoClub.html#acces-login-en-una-app-amb-socialite","title":"ACC\u00c9S (LOGIN) EN UNA APP AMB SOCIALITE","text":"<p>Video</p> <p>Laravel disposa d'un paquet oficial, anomenat Laravel Socialite que ens ofereix una via r\u00e0pida i f\u00e0cil, per a oferir una forma d'autenticaci\u00f3 amb prove\u00efdors de OAuth, suportant de forma oficial a la data, Facebook, Twitter, LinkedIn, Google, GitHub i Bitbucket. Pot ser est\u00e8s amb facilitat implementant el paquet Socialite Providers</p> <p>Per fer un sistema d'autenticaci\u00f3 per Facebook</p>"},{"location":"Exemple/VideoClub.html#control-de-qui-lloga-la-pellicula","title":"Control de qui lloga la pel.licula.","text":"<p>Video</p> <p>Cada volta que un usuari lloga un pel.licula anem a apuntar-ho en una taula rents. </p> <pre><code>php artisan make:migration create_rents_table\n</code></pre> <ul> <li>Crearem la migraci\u00f3 amb els camps per a la taula rents: id, id_user, id_movie, dateRent, dateReturn i amb les claus fon\u00e0nies corresponents i creem les relaciones molts a molts entre els models movie i users. </li> </ul> <pre><code>    &lt;?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateRentsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('rents', function (Blueprint $table)\n        {\n            $table-&gt;increments('id');\n            $table-&gt;integer('id_movie')-&gt;unsigned();\n            $table-&gt;integer('id_user')-&gt;unsigned();\n            $table-&gt;date('dateRent')-&gt;nullable();\n            $table-&gt;date('dateReturn')-&gt;nullable();\n            $table-&gt;foreign('id_movie')-&gt;references('id')-&gt;on('movies')-&gt;onUpdate('CASCADE')-&gt;onDelete('CASCADE');\n            $table-&gt;foreign('id_user')-&gt;references('id')-&gt;on('users')-&gt;onUpdate('CASCADE')-&gt;onDelete('CASCADE');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('rents');\n    }\n}\n</code></pre> <p>Movie.php</p> <pre><code>public function users(){\n        return $this-&gt;belongstoMany(User::class,'rents','id_movie', 'id_user')-&gt;withPivot(['dateRent','dateReturn']);\n    }\n</code></pre> <p>User.php</p> <pre><code>public function movies(){\n        return $this-&gt;belongstoMany(Movie::class,'rents','id_user', 'id_movie')-&gt;withPivot(['dateRent','dateReturn']);\n    }\n</code></pre> <ul> <li> <p>Fem que quan un usuari llogue s'afegisca un enlla\u00e7 de la rel.laci\u00f3:</p> <ul> <li>Utilitzarem la funci\u00f3 attach de la rel.laci\u00f3 i transaccions per fer les dos operacions o cap.</li> <li>Utilitza la funci\u00f3 updateExistingPivot per a tornar la pel.licula, ja que la relaci\u00f3 ja existeix.</li> </ul> </li> </ul> <pre><code> public function putRent($id){\n        DB::transaction(function () use($id) {\n            $pelicula = Movie::findOrFail($id);\n            $pelicula-&gt;rented = true;\n            $pelicula-&gt;save();\n            $pelicula-&gt;users()-&gt;attach(Auth::id(), ['dateRent' =&gt; date('Y/m/d')]);\n        });\n\n        return redirect(\"/catalog/show/$id\");\n    }\n    public function putReturn($id){\n        DB::transaction(function () use($id){\n            $pelicula = Movie::findOrFail($id);\n            $pelicula = Movie::findOrFail($id);\n            $pelicula-&gt;rented = false;\n            $pelicula-&gt;save();\n            $pelicula-&gt;users()-&gt;updateExistingPivot(Auth::id(), ['dateReturn' =&gt;date('Y/m/d')]);\n        });\n        return redirect(\"/catalog/show/$id\");\n    }\n</code></pre>"},{"location":"Exemple/VideoClub.html#que-un-usuari-no-puga-retornar-una-pellicula-que-no-te-llogada","title":"Que un usuari no puga retornar una pel.licula que no te llogada.","text":"<ul> <li>Per a fer-ho m\u00e9s senzill anem a definir una altra rel.laci\u00f3 en la taula users que incloga les pel.licules de l'usuari que el camp dateReturn siga null</li> </ul> <pre><code> public function rent_movies(){\n        return $this-&gt;belongsToMany(Movie::class,'rents','id_user', 'id:movie')-&gt;withPivot(['dateRent','dateReturn'])-&gt;wherePivot('dateReturn',null);\n    }\n</code></pre> <ul> <li>Utilitzan esta relaci\u00f3 en la vista mostrarem el bot\u00f3 de retornar soles si la pel.licula est\u00e0 entre les llogades per l'usuari. Una rel.laci\u00f3 torna una col.lecci\u00f3 (collection). Anem a utilitzar el m\u00e8todo contains de la col.lecci\u00f3:<pre><code>@if (Auth::user()-&gt;rent_movies-&gt;contains($pelicula))\n</code></pre> </li> </ul>"},{"location":"Exercisis/Exercisi-1.1.html","title":"Exercisi 1.1","text":""},{"location":"Exercisis/Exercisi-1.1.html#bloc-1-php-ut2-introduccio","title":"Bloc 1: PHP UT.2: Introducci\u00f3","text":""},{"location":"Exercisis/Exercisi-1.1.html#exercisis-curts","title":"Exercisis curts","text":""},{"location":"Exercisis/Exercisi-1.1.html#exercisi-1a","title":"Exercisi 1.A","text":"<ul> <li>Escriu un programa (calculadora.php) que accepte per la direcci\u00f3 les variables $x i $y i que:<ul> <li>Mostra per pantalla:<ul> <li>El valor de l'array $_GET (utilitza la funci\u00f3 print_r())</li> <li>La suma, resta, multiplicaci\u00f3 i divisi\u00f3 de x e y.</li> <li>El valors de la variable $_SERVER. <ul> <li>\u00bfQuin \u00e9s l'ordinador que fa la petici\u00f3? </li> <li>En quina variable estan els par\u00e0metres de la petici\u00f3.</li> <li>\u00bfQuina \u00e9s la ruta del lloc web en l'ordinador local ?</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Exercisis/Exercisi-1.1.html#exercisi-1b","title":"Exercisi 1.B","text":"<ul> <li>Utilitza una vista per a mostrar el resultat de l'exercisi anterior</li> </ul>"},{"location":"Exercisis/Exercisi-1.2.html","title":"Exercisi 1.2","text":""},{"location":"Exercisis/Exercisi-1.2.html#bloc-1-php-ut2-introduccio","title":"Bloc 1: PHP UT.2: Introducci\u00f3","text":""},{"location":"Exercisis/Exercisi-1.2.html#exercisis-curts","title":"Exercisis curts","text":""},{"location":"Exercisis/Exercisi-1.2.html#exercisi-1c","title":"Exercisi 1.C","text":"<ul> <li> <p>Escriu un programa (cadenes.php) que accepte per la direcci\u00f3 un par\u00e0metre anomenat nom i:</p> </li> <li> <p>Mostra-lo eliminant els car\u00e0cters '/' del principi i el final si els hi haguera (funci\u00f3 trim). </p> </li> <li>En cas de que el par\u00e0metre nom no estiga definit utilitza el teu nom de pila.</li> <li>Mostra la longitud del par\u00e0metre nom (funci\u00f3 strlen)</li> <li>Mostra el nom en maj\u00fascules (funci\u00f3 strtoupper)</li> <li>Mostra el nom en min\u00fascules (funci\u00f3 strtolower)</li> <li>Mostra el nom substituint les lletres \u2018o\u2019 pel n\u00famero zero (siga maj\u00fascula o min\u00fascula) (funci\u00f3 str_ireplace).</li> <li>Mostra el nombre de vegades que apareix la lletra a (maj\u00fascula o min\u00fascula)(funcions substr_count + (strtoupper o strtolower)).</li> <li>Mostra la posici\u00f3 de la primera a existent en el nom (siga maj\u00fascula o min\u00fascula). Si no hi ha cap mostrar\u00e0 un text indicant-ho (funci\u00f3 stripos).</li> </ul> <p>Passa un segon par\u00e0metre per querystring anomenat prefix (per a passar m\u00e9s d'un par\u00e0metre per la querystring has de separar-los utilitzant el car\u00e0cter &amp;). Despr\u00e9s:</p> <ul> <li>Indica si el nom comen\u00e7a pel prefix passat o no (funci\u00f3 strpos), es distingir\u00e0 entre maj\u00fascules i min\u00fascules. </li> <li>Si no es passa el prefix no es realitzar\u00e0 aquesta operaci\u00f3.</li> </ul>"},{"location":"Exercisis/Exercisi-1.2.html#exercisi-1d","title":"Exercisi 1.D","text":"<p>La funci\u00f3 parse_url ens permet extraure diferents parts d'una url. A partir d'una variable que continga una url, per exemple: $url = 'http://username:password@hostname:9090/path?arg=value'; Utilitza la funci\u00f3 parse_url per a extraure i mostrar per pantalla les seg\u00fcents parts de la variable url de l'exemple:</p> <ul> <li>El querystring de la url (en l'exemple arg=value)</li> <li>El protocol utilitzat (en l'exemple http).</li> <li>El nom d'usuari (en l'exemple username).</li> <li>El path de la url (en l'exemple /path)</li> </ul>"},{"location":"Exercisis/Exercisi-1.3.html","title":"Exercisi 1.3","text":""},{"location":"Exercisis/Exercisi-1.3.html#bloc-1-php-ut2-introduccio","title":"Bloc 1: PHP UT.2: Introducci\u00f3","text":""},{"location":"Exercisis/Exercisi-1.3.html#exercisis-curts","title":"Exercisis curts","text":""},{"location":"Exercisis/Exercisi-1.3.html#exercisi-1e","title":"Exercisi 1.E","text":"<p>El llenguatge PHP disposa d'una gran quantitat de funcions de tractament d'arrays.  Escriu un programa(arrays.php) i resol els seg\u00fcents exercicis:</p>"},{"location":"Exercisis/Exercisi-1.3.html#array-simple","title":"array simple","text":"<ul> <li>Crea un array que continga diversos noms</li> <li>Mostra el nombre d'elements que t\u00e9 l'array (funci\u00f3 count)</li> <li>Crea una cadena que continga els noms existents en l'array separats per un espai i mostra-la (funci\u00f3 de strings implode)</li> <li>Mostra l'array ordenat alfab\u00e8ticament (funci\u00f3 asort)</li> <li>Mostra l'array en l'ordre invers al que es va crear (funci\u00f3 array_reverse)</li> <li>Mostra la posici\u00f3 que t\u00e9 el teu nom en l'array (funci\u00f3 array_search)</li> <li>Per a imprimir un array crea un funci\u00f3 (mostrar_array) que els mostre com una llista.</li> </ul>"},{"location":"Exercisis/Exercisi-1.3.html#array-multiple","title":"array multiple","text":"<ul> <li>Crea un array d'alumnes on cada element siga un altre array que continga el dni, nom i edat de l'alumne.</li> <li>Crea una taula html en la qual es mostren totes les dades dels alumnes. </li> <li>Utilitza la funci\u00f3 array_column per a obtenir un array indexat que continga \u00fanicament els noms dels alumnes i mostra-ho per pantalla.</li> </ul>"},{"location":"Exercisis/Exercisi-1.3.html#array-associatiu","title":"array associatiu","text":"<ul> <li>Mostra per pantalla 10 paraules en angl\u00e9s i la seua traducci\u00f3. Les paraules han d'estar distribuides en dos columnes.  Les paraules i les traduccions estar\u00e0n en un array associatiu.</li> </ul>"},{"location":"Exercisis/Exercisi-1.4.html","title":"Exercisi 1.4","text":""},{"location":"Exercisis/Exercisi-1.4.html#bloc-1-php-ut2-introduccio","title":"Bloc 1: PHP UT.2: Introducci\u00f3","text":""},{"location":"Exercisis/Exercisi-1.4.html#exercisis-curts","title":"Exercisis curts","text":"<p>Crea un programa php funcions.php  i resol els seg\u00fcents exercicis :</p>"},{"location":"Exercisis/Exercisi-1.4.html#exercisi-1f","title":"Exercisi 1.F","text":"<p>Crea un funcio php contrasenyaSegura() que retorne si contrase\u00f1a \u00e9s o no segura. Comprovar\u00e0:</p> <ul> <li>que la seua longitud siga major o igual de 8 car\u00e0cters</li> <li>que cont\u00e9 alguna maj\u00fascula</li> <li>que cont\u00e9 alguna min\u00fascula</li> <li>que cont\u00e9 algun n\u00famero</li> <li>que cont\u00e9 algun d'aquests car\u00e0cters: gui\u00f3, barra baixa, igual, asterisc, mes, d\u00f2lar, arrova o coixinet</li> </ul>"},{"location":"Exercisis/Exercisi-1.4.html#exercisi-1g","title":"Exercisi 1.G","text":"<p>Crea una funci\u00f3 anomenada insert() que ens genere una sent\u00e8ncia insert into en sql. Per a a\u00e7\u00f2 la funci\u00f3 rebr\u00e0 dos par\u00e0metres: El nom de la taula i un array associatiu que contindr\u00e0 els noms i valors dels camps de la taula. La sent\u00e8ncia resultant tindr\u00e0 la seg\u00fcent forma: \"insert into nom_taula (noms camps separats per comes) values (valors separats per comes amb comilles)\". </p> <p>Ajuda: utilitza les funcions sprintf, implode i array_keys.</p>"},{"location":"Exercisis/Exercisi-1.4.html#exercisi-1h","title":"Exercisi 1.H","text":"<p>Modifica la calculadora per a que es puga passar un tercer par\u00e0metre amb l'operaci\u00f3 a realitzar.</p> <ul> <li>l'operaci\u00f3 sera un string que pot valdre ('suma','resta','multiplicacio','divisio')</li> <li>si el par\u00e0metre no est\u00e0 o no val una d'estes coses se li recordar\u00e0 a l'usuari de que el pose.</li> <li>la funci\u00f3 per a calcular el resultat tindr\u00e0 tres par\u00e0metres, el primer ser\u00e0 una funci\u00f3.</li> <li>haur\u00e0s de fer una funci\u00f3 per operaci\u00f3.</li> </ul>"},{"location":"Exercisis/Exercisi-2.1.html","title":"Exercisi 2.1","text":""},{"location":"Exercisis/Exercisi-2.1.html#bloc-1-php-ut3-formularis","title":"Bloc 1: PHP UT.3: Formularis","text":""},{"location":"Exercisis/Exercisi-2.1.html#exercisis-curts","title":"Exercisis curts","text":"<p>Crea el seg\u00fcents programes:</p>"},{"location":"Exercisis/Exercisi-2.1.html#exercisi-2a","title":"Exercisi 2.A","text":"<ul> <li>Crea una calculadora amb dos operands i un operador, utilitza les funciones fetes en exercicis anteriors.</li> </ul>"},{"location":"Exercisis/Exercisi-2.1.html#exercisi-2b","title":"Exercisi 2.B","text":"<ul> <li>Fes un formulari per a introduir les dades de persones amb les seg\u00fcents dades:         * Nom (required)         * Data de naixement (anterior a hui)         * Sexe (check)         * Hobbies (desplegable amb les dades en un array $hobbies)          * Foto (guardaras a una carpeta del servidor)         * Mostra per pantalla l'\u00faltim introdu\u00eft.</li> </ul>"},{"location":"Exercisis/Exercisi-2.2.html","title":"Exercisi 2.2","text":""},{"location":"Exercisis/Exercisi-2.2.html#bloc-1-php-ut3-fitxers","title":"Bloc 1: PHP UT.3: Fitxers","text":""},{"location":"Exercisis/Exercisi-2.2.html#exercisis-curts","title":"Exercisis curts","text":"<p>Crea el seg\u00fcents programes:</p>"},{"location":"Exercisis/Exercisi-2.2.html#exercisi-2c","title":"Exercisi 2.C","text":"<ul> <li> <p>Importa el fitxer i mostra el planter de l'Atletic de Madrit en una taula ordenat per dorsal.</p> </li> <li> <p>No cal que mostres totes les dades, tan sols els de nom, la edat, el pais, el dorsal , la posici\u00f3 i els gols.</p> </li> </ul>"},{"location":"Exercisis/Exercisi-3.1.html","title":"Exercisi 3.1","text":""},{"location":"Exercisis/Exercisi-3.1.html#bloc-1-php-ut4-objectes","title":"Bloc 1: PHP UT.4: Objectes","text":""},{"location":"Exercisis/Exercisi-3.1.html#exercisis-curts","title":"Exercisis curts","text":"<p>Crea el seg\u00fcents programes:</p>"},{"location":"Exercisis/Exercisi-3.1.html#exercisi-3a","title":"Exercisi 3.A","text":"<ul> <li> <p>Crea un clase Player, amb els camps:</p> <pre><code>*  Name\n*  BirthDay\n*  Country\n*  Dorsal\n*  Position\n*  Goals\n*  Matches\n*  Minutes\n*  YellowCard\n*  RedCard\n</code></pre> <ul> <li>Crea els m\u00e8todes<ul> <li>Age()</li> <li>Score()</li> <li>AddCard(int Colour)</li> <li>PlayMinutes(int min)</li> <li>Render() per mostrar un fitxa del jugador</li> <li>Construct()</li> </ul> </li> </ul> </li> <li> <p>Crea un clase Team, amb el seg\u00fcents camps:</p> <pre><code>* Name\n* Players \n* Matches\n* Won\n* Lost\n* Tie\n* ScoreGoals\n* ConcededGoals\n</code></pre> <ul> <li>Crea els m\u00e8todes<ul> <li>Construct()</li> <li>Render() per mostrar pantalla de l'equip</li> <li>SignPlayer(Player)</li> </ul> </li> </ul> </li> <li> <p>Importa el fitxer i carrega el Team de l'Atletic de Madrit i mostra el planter en una pantalla en un estil tarjeta i utilitzant la funci\u00f3 render de la classe Team.</p> </li> </ul>"},{"location":"Exercisis/Exercisi-3.2.html","title":"Exercisi 3.2","text":""},{"location":"Exercisis/Exercisi-3.2.html#bloc-1-php-ut4-objectes","title":"Bloc 1: PHP UT.4: Objectes","text":""},{"location":"Exercisis/Exercisi-3.2.html#exercisis-curts","title":"Exercisis curts","text":"<p>Crea el seg\u00fcents programes:</p>"},{"location":"Exercisis/Exercisi-3.2.html#exercisi-3b","title":"Exercisi 3.B","text":"<ul> <li>Crea un clase abstracta Member de la que heretaran Player i Trainer.</li> <li>Passa a eixa classe els attributs: Name, Birthday, Country, YellowCard, RedCard.</li> <li>Passa a eixa classe els m\u00e8todes: Age, AddCard</li> <li>Crea el m\u00e8tode abstracte render().</li> <li>Crea una classe Trainer amb els attributs.         * Charge</li> <li>Fes que el trainer mostre color i caracteristica diferents al jugador en el render. </li> <li>Modifica la clase Team, per a poder incloure tant jugador com entrenador (Nota: no pots utilitzar un altre attribut)</li> </ul>"},{"location":"Exercisis/Exercisi-4.1.html","title":"Exercisi 4.1","text":""},{"location":"Exercisis/Exercisi-4.1.html#bloc-1-php-ut5-connexio-a-bd","title":"Bloc 1: PHP UT.5: Connexi\u00f3 a BD","text":""},{"location":"Exercisis/Exercisi-4.1.html#exercicis-curts","title":"Exercicis curts","text":"<p>Crea el seg\u00fcents programes:</p>"},{"location":"Exercisis/Exercisi-4.1.html#exercici-4a","title":"Exercici 4.A","text":"<ul> <li>Crea la classe Connection per establir una connexi\u00f3 a la BD mitjan\u00e7ant el m\u00e8tode static make, que accepta com a par\u00e0metre la BD a connectar.</li> <li>Desde phpmyadmin.dwes.my i en la BD test:<ul> <li>Crea la taula alumnes amb els seg\u00fcents camps:<ul> <li>dni (primaryKey CHAR(10))</li> <li>Nom (required CHAR(100))</li> <li>Data de naixement (required date)</li> <li>Sexe (CHAR (1)) DEFAULT ''</li> <li>Hobby (smallInt) DEFAULT 0</li> <li>Foto (CHAR(100)) NULLABLE</li> </ul> </li> <li>Donam d'alta 3 alumnes       </li> </ul> </li> <li>Crea una classe queryBuilder i fes un m\u00e8tode que torne tots els elements d'una taula</li> <li>Mostra tots els alumnes en una taula</li> </ul>"},{"location":"Exercisis/Exercisi-4.1.html#exercici-4b","title":"Exercici 4.B","text":"<ul> <li>Fes que el formulari creat en un exercici anterior inserte un element en la taula.</li> </ul>"},{"location":"Exercisis/Exercisi-4.1.html#exercici-4c","title":"Exercici 4.C","text":"<ul> <li>Crea dos dels seg\u00fcents m\u00e8todes en la classe queryBuilder i prova-los:<ul> <li>findById(nomTaula,id)</li> <li>selectWhere(nomTaula,nomcamp,value)</li> <li>insert(nomtaula,Array camps)</li> <li>update(nomtaula,Array camps,id)</li> <li>deleteById(nomTaula,id)</li> </ul> </li> </ul>"},{"location":"Exercisis/Exercisi-6.1.html","title":"Exercisi 6.1","text":""},{"location":"Exercisis/Exercisi-6.1.html#bloc-1-php-ut6-seguretat-en-php","title":"Bloc 1: PHP UT.6: Seguretat en PHP","text":""},{"location":"Exercisis/Exercisi-6.1.html#exercicis-curts","title":"Exercicis curts","text":"<p>Crea el seg\u00fcents programes:</p>"},{"location":"Exercisis/Exercisi-6.1.html#exercici-6a","title":"Exercici 6.A","text":"<ul> <li>Afig un fitxer .env al teu programa i posa els par\u00e0metres de connexi\u00f3 a la BD en ell. </li> <li>Instal\u00b7la el paquet per a poder importar-los i canvia la classe connectionnper a que els utilitze.</li> </ul>"},{"location":"Exercisis/Exercisi-6.1.html#exercici-6b","title":"Exercici 6.B","text":"<ul> <li>Crea el lloc de l'ofegat.</li> <li>Les paraules s'agafaran d'una taula de paraules.</li> <li>L'usuari nom\u00e9s pot triar una vocal.</li> <li>Els intents inv\u00e0lids permesos s\u00f3n 6.(O F E G A T) </li> <li>Cada vegada se li ha de mostrar a l'usuari els intents que li queden ( de vocals i consonants) i les que lletres que ja ha dit</li> </ul> <p>Pots utilitzar la seg\u00fcent classe</p> <p>```php &lt;?php</p> <p>namespace App;</p> <p>class Ofegat {     protected $paraula;     protected $vocal;     protected $letters;</p> <pre><code>/**\n * Ofegat constructor.\n * @param $paraula\n * @param $invalidsPermesos\n */\npublic function __construct($paraula)\n{\n    $this-&gt;paraula = strtoupper($paraula);\n    $this-&gt;letters = [];\n}\n\npublic function addLetter(String $letter)\n{\n    $letter = strtoupper($letter);\n    if (in_array($letter,$this-&gt;letters)) {\n        throw new \\Exception('Ja la has ficada abans');\n    }\n    $this-&gt;letters[] = $letter;\n    return (strpos($this-&gt;paraula,$letter)===false)?1:0;\n}\n\npublic function render(){\n    $fin = 1;\n    for($i=0;$i&lt;strlen($this-&gt;paraula);$i++){\n        if (in_array($this-&gt;paraula[$i],$this-&gt;letters)) {\n            echo $this-&gt;paraula[$i];\n        }\n        else {\n            echo \"_\";\n            $fin = 0;\n        }\n        echo \" \";\n    }\n    return $fin;\n}\n</code></pre> <p>}  ```</p> <p>El funcionament \u00e9s :  require_once ('../kernel.php'); use App\\Ofegat;</p> <pre><code>use App\\Ofegat;\n\n$intendInvalids = 0;\n$ofegat = new Ofegat('Imbecil');\n$intendInvalids += $ofegat-&gt;addLetter('i');\nvar_dump($intendInvalids,$ofegat-&gt;render());\n$intendInvalids += $ofegat-&gt;addLetter('b');\nvar_dump($intendInvalids,$ofegat-&gt;render());\n$intendInvalids += $ofegat-&gt;addLetter('z');\nvar_dump($intendInvalids,$ofegat-&gt;render());\n$intendInvalids += $ofegat-&gt;addLetter('e');\nvar_dump($intendInvalids,$ofegat-&gt;render());\n$intendInvalids += $ofegat-&gt;addLetter('m');\nvar_dump($intendInvalids,$ofegat-&gt;render());\n$intendInvalids += $ofegat-&gt;addLetter('c');\nvar_dump($intendInvalids,$ofegat-&gt;render());\n$intendInvalids += $ofegat-&gt;addLetter('l');\nvar_dump($intendInvalids,$ofegat-&gt;render());\n</code></pre>"},{"location":"Exercisis/Exercisi-6.1.html#exercici-6c","title":"Exercici 6.C","text":"<ul> <li>Crea un login per a poder jugar. Si no estas loguejat no pots jugar.</li> </ul>"},{"location":"Exercisis/Exercisi-7.1.html","title":"Exercisi 7.1","text":""},{"location":"Exercisis/Exercisi-7.1.html#bloc-1-php-ut7-laravel","title":"Bloc 1: PHP UT.7: Laravel","text":""},{"location":"Exercisis/Exercisi-7.1.html#exercicis-curts","title":"Exercicis curts","text":""},{"location":"Exercisis/Exercisi-7.1.html#exercisi-1-branca-v11","title":"Exercisi 1 (Branca v1.1)","text":"<ul> <li>Baixa el projecte blog del github classroom amb git clone dins del directori code. </li> <li> <p>Configura-lo en el domini blog.my en la teua m\u00e0quina real modificant el /etc/hosts.</p> </li> <li> <p>En el Homestead.yaml:</p> <ul> <li>Afegeix un domini:</li> </ul> </li> </ul> <pre><code>    - map: blog.my\n      to: /home/vagrant/code/blog/public\n</code></pre> <ul> <li>Configura el laravel </li> </ul> <pre><code>    cp .env.example .env\n    sudo chmod -R 777 bootstrap/cache\n    sudo chmod -R 777 storage\n    sudo chmod -R 777 storage/logs\n    php artisan key:generate\n    composer install\n</code></pre> <ul> <li> <p>Prova d'accedir a la p\u00e0gina d'inici d'aquest nou projecte. Edita el fitxer routes/web.php i afig una nova ruta a la URL posts. En accedir a aquesta ruta (http://blog/posts), haurem de veure un missatge amb el text \"Llistat de posts\". </p> </li> <li> <p>Genera la branca v1.1 i fes un commit i un push. A partir d'ara cada exercisi s'ha de pujar a la branca corresponent.</p> </li> </ul>"},{"location":"Exercisis/Exercisi-7.1.html#exercisi-2-branca-v12","title":"Exercisi 2 (Branca v1.2)","text":"<p>Afig una nova ruta parametritzada a posts/{id} , de manera que el par\u00e0metre id siga num\u00e8ric (\u00e9s a dir, nom\u00e9s continga d\u00edgits del 0 al 9) i obligatori. Fes que la ruta retorne el missatge \"Fitxa del post XXXX\", sent XXXX l'id que haja rebut com a par\u00e0metre.</p> <p>Posa un nom a les tres rutes que hi ha definides fins ara: </p> <ul> <li>a la p\u00e0gina d'inici posa-li el nom \"inici\"</li> <li>a la del llistat la direm \"posts_llistat\"</li> <li>a la de fitxa que acabes de crear, la direm \"posts_fitxa\".</li> </ul> <p>Definix una plantilla anomenada plantilla.blade.php en la carpeta de vistes del projecte ( resources/views ). Defineix una cap\u00e7alera amb una secci\u00f3 yield per al t\u00edtol, i una altra per al contingut de la p\u00e0gina, com la de l'exemple que hem vist anteriorment. Defineix en un arxiu a part en la subcarpeta partials , anomenat nav.blade.php , una barra de navegaci\u00f3 que ens permeta accedir a aquestes direccions de moment:</p> <pre><code>* P\u00e0gina d'inici\n* Llistat de posts\n</code></pre> <p>Inclou la barra de navegaci\u00f3 en la plantilla base que has definit abans A partir de la plantilla base, defineix altres dues vistes en una subcarpeta posts , anomenades posts/llistat.blade.php i posts/fitxa.blade.php . Com a t\u00edtol de cada p\u00e0gina posa un breu text del que s\u00f3n (per exemple, \"Llistat posts\" i \"Fitxa post\"), i com a contingut de moment deixa un encap\u00e7alat h1 que indique la p\u00e0gina en la qual estem: \"Llistat de posts\" o \"Fitxa del post XXXX\", on XXXX ser\u00e0 l'identificador del post que haurem passat per la URL (i que deur\u00e0s passar a la vista). </p> <p>Fes que les rutes corresponents de routes/web.php que ja has definit renderitzen aquestes vistes en lloc de retornar text pla.</p> <p>Instal\u00b7la amb composer la llibreria laravel/ui , i utilitza-la per a incorporar Bootstrap al projecte. Desc\u00e0rrega Bootstrap amb npm install , i actualitza els arxius CSS i Javascript amb npm run dev Incorpora els estils /css/app.css a la plantilla base del projecte, perqu\u00e8 els utilitzen totes les vistes que hereten d'ella. Edita l'arxiu partials/nav.blade.php per a modificar la barra de navegaci\u00f3 i deixar-la amb un estil particular de Bootstrap. Pots consultar aquesta p\u00e0gina per a prendre idees d'alguns dissenys que pots aplicar en la barra de navegaci\u00f3. Canvia de nom l'arxiu welcome.blade.php a inici.blade.php i canvia-ho perqu\u00e8 tamb\u00e9 herete de la plantilla base. Afig algun text introductori com a contingut. </p>"},{"location":"Exercisis/Exercisi-7.1.html#exercisi-3-branca-v13","title":"Exercisi 3 (Branca v1.3)","text":"<p>Sobre el projecte blog de la sessi\u00f3 anterior, afegirem aquests canvis:</p> <ul> <li>Crea un controlador de recursos (opci\u00f3 -r ) anomenat PostController , que ens servir\u00e0 per a gestionar tota la l\u00f2gica dels posts del blog.</li> <li>Assigna autom\u00e0ticament amb el m\u00e8tode resource cada ruta a la seua funci\u00f3 corresponent del controlador, en l'arxiu routes/web.php . Limita amb only les accions nom\u00e9s a les funcions de llistat (index), fitxa (show), creaci\u00f3 (create) i edici\u00f3 (edit).</li> <li>Canvia de nom les vistes de llistat i fitxa d'un post a index.blade.php i show.blade.php, dins de la seua carpeta posts, i fes que els m\u00e8todes corresponents del controlador de posts renderitzen aquestes vistes. </li> <li>Per als m\u00e8todes create i edit , simplement retorna un text pla indicant \"Nou post\" i \"Edici\u00f3 de post\", per exemple.</li> <li>Fes els canvis addicionals que siguen convenients (per exemple, en el men\u00fa de navegaci\u00f3) perqu\u00e8 els enlla\u00e7os continuen funcionant, i prova que les quatre rutes (llistat, fitxa, creaci\u00f3 i edici\u00f3) funcionen adequadament.</li> </ul>"},{"location":"Exercisis/Exercisi-7.1.html#exercisi-4-branca-v14","title":"Exercisi 4 (Branca v1.4)","text":"<p>Sobre el projecte blog anterior, afegirem aquests canvis:</p> <ul> <li>Fes que les funcions de create i edit del controlador de posts, en lloc de mostrar un missatge de text pla indicant que ac\u00ed va un formulari, redirigisquen a la p\u00e0gina d'inici, usant la instrucci\u00f3 redirect .</li> <li>Afig un helper al projecte que definisca una funci\u00f3 anomenada fechaActual . Rebr\u00e0 com a par\u00e0metre un format de data (per exemple, \"d/m/i\") i traur\u00e0 la data actual en aquest format. Utilitza-ho per a mostrar la data actual en format \"d/m/I\" en la plantilla base, sota la barra de navegaci\u00f3, alineada a la dreta.</li> </ul>"},{"location":"Exercisis/Exercisi-7.2.html","title":"Exercisi 7.2","text":""},{"location":"Exercisis/Exercisi-7.2.html#bloc-1-php-ut7-laravel","title":"Bloc 1: PHP UT.7: Laravel","text":""},{"location":"Exercisis/Exercisi-7.2.html#exercicis-curts","title":"Exercicis curts","text":""},{"location":"Exercisis/Exercisi-7.2.html#exercisi-1-branca-v21","title":"Exercisi 1 (Branca v2.1):","text":"<p>Sobre el projecte blog de la sessi\u00f3 anterior, afegirem aquests canvis:</p> <ul> <li> <p>Crea una base de dades anomenada blog en el teu servidor de bases de dades a trav\u00e9s de phpMyAdmin. Modifica tamb\u00e9 l'arxiu .env del projecte per a accedir a aquesta base de dades amb les credencials adequades.</p> </li> <li> <p>Elimina les migracions relatives a password_resets i failed_jobs, i edita la migraci\u00f3 de la taula users per a deixar-la \u00fanicament amb els camps login i password, a m\u00e9s de l'id i els timestamps.</p> </li> <li> <p>Crea una nova migraci\u00f3 anomenada crear_taula_posts , que crear\u00e0 una taula anomenada posts amb aquests camps:</p> <ul> <li>Id autonum\u00e9rico</li> <li>Titol del post (string )</li> <li>Contingut del post (text )</li> <li>Timestamps per a gestionar autom\u00e0ticament la data de creaci\u00f3 o modificaci\u00f3 del post</li> </ul> </li> <li> <p>Llan\u00e7a les migracions i comprova que es creen les taules corresponents amb els camps associats en la base de dades.    </p> </li> </ul>"},{"location":"Exercisis/Exercisi-7.2.html#exercisi-2-branca-v22","title":"Exercisi 2 (Branca v2.2):","text":"<p>Continuem amb el projecte blog anterior. Crea un nou model anomenat Post per als posts del nostre blog. Ha de quedar  juntament amb el model d'Usuari a la subcarpeta App\\Models del projecte. Despr\u00e9s, modifica els m\u00e8todes del controlador PostController creat en exercisis anteriors, d'aquesta manera:</p> <ul> <li>El m\u00e8tode index ha d'obtindre tots els posts de la taula, i mostrar la vista posts.index amb aqueix llistat de posts.<ul> <li>La vista posts.index , per part seua, rebr\u00e0 el llistat de posts i mostrar\u00e0 els t\u00edtols de cadascun, i un bot\u00f3 Veure per a mostrar la seua fitxa ( posts.show ).</li> <li>Has de mostrar el llistat de posts ordenat per t\u00edtol en ordre ascendent, i paginat de 5 en 5.</li> </ul> </li> <li>El m\u00e8tode show ha d'obtindre el post que el seu id es passar\u00e0 com a par\u00e0metre, i mostrar-lo en la vista posts.show .<ul> <li>La vista posts.show rebr\u00e0 l'objecte amb el post a mostrar, i mostrarem el t\u00edtol,contingut i data de creaci\u00f3 del post, amb el format que vulgues.</li> </ul> </li> <li>El m\u00e8tode destroy eliminar\u00e0 el post que el seu id rebr\u00e0 com a par\u00e0metre, i retornar\u00e0 la vista posts.index amb el llistat actualitzat. Per a provar aquest m\u00e8tode, recorda que has de definir un formulari en una vista (el pots fer per a cada post mostrat en la vista posts.index ) que envie a la ruta posts.destroy usant un m\u00e8tode DELETE, com hem explicat en un exemple anterior.</li> <li> <p>Els m\u00e8todes create , edit , store i update de moment els deixarem sense fer, fins que vegem com gestionar formularis.</p> </li> <li> <p>Per a simular la inserci\u00f3 i la modificaci\u00f3, crearem dos m\u00e8todes addicionals en el controlador, que usarem de manera temporal:</p> <ul> <li>Un m\u00e8tode anomenat nuevoPrueba , que cada vegada que el cridem crear\u00e0 un post amb un t\u00edtol a l'atzar (per exemple, \"T\u00edtol X\", sent X un enter aleatori), i un contingut a l'atzar (\"Contingut X\"). Pots emprar la funci\u00f3 rand de PHP per a generar aquests n\u00fameros aleatoris per a t\u00edtol i contingut.</li> <li>Un m\u00e8tode anomenat editarPrueba , que rebr\u00e0 com a par\u00e0metre un id i modificar\u00e0 el t\u00edtol i contingut del post altres generats aleat\u00f2riament, com en el punt anterior.</li> <li>Aquests dos m\u00e8todes (especialment el primer) ens serviran per a crear una s\u00e8rie de posts de prova que despr\u00e9s ens serviran per a provar el llistat i la fitxa dels posts.</li> </ul> </li> <li> <p>En l'arxiu routes/web.php , recorda afegir dues noves rutes temporals de tipus get per a provar aquestes insercions i modificacions. La primera pot apuntar a /movies/nuevoPrueba ,per exemple, i la segona a /movies/editarPrueba/{id} . Recorda tamb\u00e9 eliminar o editar la restricci\u00f3 only de les rutes del controlador que vas establir la sessi\u00f3 anterior, perqu\u00e8 no sols permeta les rutes index, show, create i edit, i a m\u00e9s permeta la de destroy (o totes les possibles, si vols, ja que tard o d'hora les utilitzarem).</p> </li> </ul>"},{"location":"Exercisis/Exercisi-7.2.html#exercisi-3-branca-v23","title":"Exercisi 3 (Branca v2.3):","text":"<p>Sobre el projecte blog de la sessi\u00f3 anterior, afegirem aquests canvis:</p> <ul> <li>Crea una relaci\u00f3 un a molts entre el model d'Usuari i el model de Post , tots dos ja existents en l'aplicaci\u00f3, de manera que un post \u00e9s d'un usuari, i un usuari pot tindre molts posts. Haur\u00e0s de definir una nova migraci\u00f3 de modificaci\u00f3 sobre la taula posts que afija un nou camp usuari_id , i establir a partir d'ell la relaci\u00f3.</li> <li> <p>Crea des de phpMyAdmin una s\u00e8rie d'usuaris de prova en la taula usuaris, i associa alguns d'ells als posts que hi haja.</p> </li> <li> <p>Modifica la vista posts/index.blade.php perqu\u00e8, al costat del t\u00edtol de cada post, entre par\u00e8ntesi, aparega el login de l'usuari que el va crear.</p> </li> </ul>"},{"location":"Exercisis/Exercisi-7.2.html#exercisi-4-branca-v24","title":"Exercisi 4 (Branca v2.4):","text":"<p>Continuem amb el projecte blog anterior. Ara afegirem el seg\u00fcent:</p> <ul> <li>Crea un seeder anomenat UsuariosSeeder , amb un factory associat anomenat UsuarioFactory (canvia de nom el que ve per defecte UserFactory per a aprofitar-ho). Crea amb aix\u00f2 3 usuaris de prova, amb logins que siguen \u00fanics i d'una sola paraula (usa el faker), i passwords tamb\u00e9 d'una sola paraula, sense encriptar (per a poder-los identificar despr\u00e9s, arribat el cas).</li> <li>Crea un altre seeder anomenat PostsSeeder amb un factory associat anomenat PostFactory . En el factory, defineix amb el faker t\u00edtols aleatoris (frases) i continguts aleatoris (textos llargs). Usa el seeder per a crear 3 posts per a cadascun dels usuaris existents.</li> <li>Utilitza l'opci\u00f3 php artisan migrate:fresh --seed per a esborrar tot contingut previ i poblar la base de dades amb aquests nous elements. Comprova despr\u00e9s des de la p\u00e0gina del llistat de posts, i des de phpmyAdmin que la informaci\u00f3 \u00e9s correcta.</li> </ul>"},{"location":"Exercisis/Exercisi-7.2.html#exercisi-5-branca-v25","title":"Exercisi 5 (Branca v2.5):","text":"<p>Afig al projecte blog un nou model anomenat Comentari , juntament amb la seua migraci\u00f3 i controlador associats. Cada comentari tindr\u00e0 com a camp el contingut del comentari, i estar\u00e0 relacionat un a molts amb el model Usuari , de manera que un usuari pot tindre molts comentaris, i cada comentari pertany a un usuari. Tamb\u00e9 tindr\u00e0 una relaci\u00f3 un a molts amb el model Post , de manera que un comentari pertany a un post, i un post pot tindre molts comentaris. Per tant, la migraci\u00f3 dels comentaris haur\u00e0 de tindre com a camps addicionals la relaci\u00f3 amb l'usuari ( usuario_id ) i amb el post al qual pertany ( post_id ).</p> <p>Aplica la migraci\u00f3 per a reflectir la nova taula en la base de dades, i utilitza un seeder i un factory per a crear 3 comentaris en cada post, amb l'usuari que siga. A l'hora d'aplicar tot aix\u00f2, esborra els continguts previs de la base de dades ( **migrate:fresh --seed ).</p> <p>AJUDA: si vols triar un usuari a l'atzar com a autor de cada comentari, pots fer una cosa aix\u00ed:</p> <pre><code>Usuario::inRandomOrder()-&gt;first();\n</code></pre> <p>En aquest cas, seria convenient que aqueix usuari aleatori s'afija directament en el factory del comentari, i no en el seeder, ja que en cas contrari \u00e9s possible que genere el mateix usuari per a tots els comentaris d'un post. En la fitxa dels posts (vista posts/show.blade.php ), afig el codi necessari per a mostrar el login de l'usuari que ha fet el post, i el llistat de comentaris associat al post, mostrant per a cadascun el login de l'usuari que el va fer, i el text del comentari en si. Utilitza tamb\u00e9 la [llibreria)(us-de-dates) Carbon per a mostrar la data de creaci\u00f3 del post (o la dels comentaris, com preferisques) en format d/m/Y .</p>"},{"location":"Exercisis/Exercisi-7.3.html","title":"Exercisi 7.3","text":""},{"location":"Exercisis/Exercisi-7.3.html#bloc-1-php-ut7-laravel","title":"Bloc 1: PHP UT.7: Laravel","text":""},{"location":"Exercisis/Exercisi-7.3.html#exercicis-curts","title":"Exercicis curts","text":""},{"location":"Exercisis/Exercisi-7.3.html#exercisi-1-branca-v31","title":"Exercisi 1 (Branca v3.1)","text":"<p>Sobre el projecte blog, afegirem aquests canvis:</p> <ul> <li> <p>Crea un formulari per a donar d'alta nous posts, en la vista resources/views/posts/create.blade.php . fig un parell de camps (un text curt i un text llarg) per a emplenar el t\u00edtol i el contingut, i com a autor o usuari del post de moment deixa un predefinit; per exemple, l'autor amb id = 1, o el primer autor que trobes en la base de dades ( Autor::get()-&gt;first() ). M\u00e9s endavant ja ho farem dependent de l'usuari que s'haja autenticat. Recorda definir el m\u00e8tode store en el controlador de posts per a donar d'alta el post, i redirigir despr\u00e9s al llistat principal de posts. Per a carregar el formulari, afig una nova opci\u00f3 en el men\u00fa principal de navegaci\u00f3.</p> </li> <li> <p>En la fitxa d'un post, afig un bot\u00f3 amb un formulari per a esborrar el post. Haur\u00e0s de definir el codi del m\u00e8tode destroy per a eliminar el post i redirigir de nou al llistat. Deur\u00e0s eliminar tots els comentaris associats a aqueix post, i despr\u00e9s esborrar el post. Per a filtrar els comentaris d'un post i esborrar-los, utilitza la cl\u00e0usula where.</p> </li> </ul> <pre><code>Comentario::where('post_id', $id)-&gt;delete();\n</code></pre>"},{"location":"Exercisis/Exercisi-7.3.html#exercisi-2-branca-v32","title":"Exercisi 2 (Branca v3.2)","text":"<p>Ara afegirem el formulari d'edici\u00f3 d'un post, tamb\u00e9 des de la vista de la fitxa del post. El formulari haur\u00e0 de mostrar les dades ja farcides del post. Aquestformulari es carrega a partir del m\u00e8tode edit (que haur\u00e0 de renderitzar la vista amb el formulari d'edici\u00f3, resources/views/posts/edit.blade.php ), i el formulari s'enviar\u00e0 al m\u00e8tode update del controlador, passant-li com a par\u00e0metre l'id del post a modificar.</p>"},{"location":"Exercisis/Exercisi-7.3.html#exercisi-3-branca-v33","title":"Exercisi 3 (Branca v3.3)","text":"<p>Crea un form request anomenat PostRequest , que valide les dades del post. En concret, han de complir-se aquests requisits:</p> <pre><code>* El t\u00edtol del post ha de ser obligatori, i d'almenys 5 car\u00e0cters de longitud\n* El contingut del post ha de ser obligatori, i d'almenys 50 car\u00e0cters de longitud\n</code></pre> <p>Defineix missatges d'error personalitzats per a cada possible error de validaci\u00f3, i mostra'ls al costat de cada camp afectat. A m\u00e9s, utilitza la funci\u00f3 old per a recordar el valor antic correcte, en el cas que un camp passe la validaci\u00f3 per\u00f2 un altre(s) no.</p>"},{"location":"Exercisis/Exercisi-7.3.html#exercisi-4-branca-v34","title":"Exercisi 4 (Branca v3.4)","text":"<p>Sobre el projecte blog de la sessi\u00f3 anterior, afegirem aquests canvis:</p> <ul> <li> <p>Modifica el factory d'usuaris perqu\u00e8 els passwords s'encripten amb bcrypt. Perqu\u00e8 siga f\u00e0cil de recordar, fes que cada usuari tinga com a password el seu mateix login encriptat. Executa despr\u00e9s php artisan migrate:fresh --seed per a actualitzar tota la base de dades.</p> </li> <li> <p>En el controlador de posts, protegeix totes les opcions menys les de index i show . </p> </li> <li> <p>Afig una opci\u00f3 de Login en el men\u00fa de navegaci\u00f3 superior, que nom\u00e9s estiga visible si l'usuari no s'ha autenticat encara.</p> </li> <li> <p>Fes que nom\u00e9s es mostren els enlla\u00e7os i botons de crear, editar o esborrar posts quan l'usuari estiga autenticat. En aqueix mateix cas, fes que tamb\u00e9 es mostre una opci\u00f3 de logout en el men\u00fa superior, que haur\u00e0s d'implementar.</p> </li> <li> <p>Finalment, afig la funcionalitat que l'usuari autenticat nom\u00e9s pot editar i esborrar els seus propis posts, per\u00f2 no els dels altres usuaris.</p> </li> </ul>"},{"location":"Exercisis/Exercisi-7.3.html#exercisi-5-branca-v35","title":"Exercisi 5 (Branca v3.5)","text":"<ul> <li> <p>Crea una nova migraci\u00f3 que modifique la taula d'usuaris per a afegir un nou camp anomenat rol, de tipus string. Assegura't que la migraci\u00f3 siga de modificaci\u00f3, i no de creaci\u00f3 de taula. Despr\u00e9s, executa-la per a crear el nou camp.</p> </li> <li> <p>Fes que algun dels usuaris de la taula tinga un rol de admin (edita'l a m\u00e0 des de phpMyAdmin), i la resta seran de tipus editor.</p> </li> <li> <p>Crea un nou middleware anomenat RolCheck , amb una funci\u00f3 que comprove si l'usuari t\u00e9 el rol indicat, com en l'exemple vist abans en les anotacions. Registra-ho adequadament en l'arxiu App/Http/Kernel.php , com s'ha explicat.</p> </li> <li> <p>Modifica les vistes necess\u00e0ries perqu\u00e8, si l'usuari \u00e9s de tipus admin puga veure els botons d'edici\u00f3 i esborrat de qualsevol post, encara que no siguen seus.</p> </li> <li> <p>Modifica els m\u00e8todes edit , update i destroy de PostController perqu\u00e8 redirigisquen a posts.index si l'usuari no \u00e9s administrador, o si no \u00e9s el propietari del post a editar o esborrar.</p> </li> </ul>"},{"location":"Moduls/AW/00.html","title":"Temporitzaci\u00f3","text":"<p>Aquesta \u00e9s la temporitzaci\u00f3 estimada del m\u00f2dul Aplicacions Web</p> UNITAT DE TREBALL RAs DURADA 1 Internet, caracter\u00edstiques i evoluci\u00f3 RA1-5 5 hores 2 HTML RA1-5 20 hores 3 CSS RA1-5 18 hores 4 Gestors de continguts RA1 12 hores 5 Servei de gesti\u00f3 d\u2019arxius web RA3 3 hores 6 Sistemes de gesti\u00f3 d\u2019aprenentatge a dist\u00e0ncia RA2 8 hores 7 JavaScript RA1-5 26 hores 8 Aplicacions ofim\u00e0tiques web RA4 5 hores 9 Aplicacions web d\u2019escriptori RA5 3 hores TOTAL HORES 100 TRIMESTRE UT- RA Data prevista inici 1er Trimestre UT1~ RA1-5 23/9/2024 UT2~ RA1-5 30/9/2024 UT3~ RA1-5 28/10/2024 UT4~ RA1 22/11/2024 UT5~ RA3 9/12/2024 UT6~ RA2 13/12/2024 2n Trimestre UT7~ RA1-5 7/1/2025 UT8~ RA4 12/2/2025 UT9~ RA5 16/2/2025"},{"location":"Moduls/AW/01.html","title":"Internet, caracter\u00edsticas y evoluci\u00f3n","text":"","tags":["aplicaciones web","smr","teor\u00eda"]},{"location":"Moduls/AW/01.html#1-introduccio","title":"1. Introducci\u00f3","text":"<p>En aquest article es tractar\u00e0 la hist\u00f2ria de la web aix\u00ed com el seu funcionament b\u00e0sic.</p>","tags":["aplicaciones web","smr","teor\u00eda"]},{"location":"Moduls/AW/01.html#2-historia-dinternet","title":"2. Hist\u00f2ria d'Internet","text":"<p>Llegir article Hist\u00f2ria d'Internet: com va n\u00e9ixer i quina va ser la seva evoluci\u00f3</p> <p>Pregunta 1: Com es deia el primer sat\u00e8l\u00b7lit artificial llan\u00e7at a lespai?</p> <p>Pregunta 2: En qu\u00e8 es basa la teoria de commutaci\u00f3 de paquets?</p> <p>Pregunta 3: Qu\u00e8 unia la xarxa ARPANET?</p> <p>Pregunta 4: Quines dues ciutats es van unir per primera vegada?</p> <p>Pregunta 5: Quin \u00e9s el pa\u00eds amb m\u00e9s penetraci\u00f3 d'Internet?</p> <p>Pregunta 6: Quin \u00e9s el lloc web m\u00e9s visitat del m\u00f3n?</p> <p>Pregunta 7: Quina va ser la primera xarxa social de la hist\u00f2ria?</p> <p>Leer art\u00edculo Historia de Internet hasta la secci\u00f3n \"Evoluci\u00f3n de Internet en cifras\" incluida.</p> <p>Leer art\u00edculo Historia de internet hasta la secci\u00f3n \"WWW\" incluida.</p>","tags":["aplicaciones web","smr","teor\u00eda"]},{"location":"Moduls/AW/01.html#3-historia-del-web","title":"3. Hist\u00f2ria del web","text":"<p>Veure fins l'any 2001...</p> Qu\u00e8 \u00e9s una p\u00e0gina web?   Una p\u00e0gina web \u00e9s un document HTML. Aquest document HTML \u00e9s interpretat per un navegador:  - Google Chrome - Mozilla Firefox - Internet Explorer - Microsoft Edge - Opera - Safari   \u00c9s el mateix Internet que la web?   No. WEB = INTERNET + HTTP","tags":["aplicaciones web","smr","teor\u00eda"]},{"location":"Moduls/AW/01.html#4-la-web-10","title":"4. La web 1.0","text":"<p>El web primitiu, el del segle 20, era el que es caracteritza principalment per ser unidireccional i realitzat sobre continguts est\u00e0tics. Les primeres p\u00e0gines que vam veure a Internet publicaven continguts de text que, una vegada publicats, no s'actualitzaven llevat que el webmaster modifiqu\u00e9s aquests continguts i torn\u00e9s a pujar el web de nou a internet.</p> <p>La web 1.0 tenia un car\u00e0cter principalment divulgatiu i es van comen\u00e7ar a penjar d'internet documents i informaci\u00f3 principalment cultural. A poc a poc les empreses van comen\u00e7ar a prendre-hi part i les primeres webs d'empresa van sorgir, amb dissenys molt pobres (no hi havia eines, ni tecnologia, ni connexi\u00f3 suficient per fer-ho millor) i continguts que r\u00e0pidament quedaven antiquats en ser complex actualitzar-los.</p>","tags":["aplicaciones web","smr","teor\u00eda"]},{"location":"Moduls/AW/01.html#5-la-web-20","title":"5. La web 2.0","text":"<p>La web 2.0 es va consolidar a mitjans de la primera d\u00e8cada d'aquest segle. Sustentada sota unes connexions a internet evolucionades (ja ten\u00edem ADSL), i millors eines per desenvolupar web, millors servidors, etc., la web 2.0, tamb\u00e9 anomenada \"la xarxa social\", omple Internet de blocs, wikis, f\u00f2rums i finalment, xarxes socials. L'objectiu de la web 2.0 \u00e9s la compartici\u00f3 del coneixement, \u00e9s la web col\u00b7laborativa i ha estat un dels atractius principals per atraure usuaris (basta veure els usuaris de facebook que, fins a facebook, no tocaven un ordinador).</p> <p>Pregunta: El web de Homer Simpson \u00e9s 1.0 o 2.0?</p>","tags":["aplicaciones web","smr","teor\u00eda"]},{"location":"Moduls/AW/01.html#6-web-30","title":"6. Web 3.0","text":"<p>La web 3.0 \u00e9s:</p> <ul> <li>Web sem\u00e0ntica</li> <li>Experi\u00e8ncia de navegaci\u00f3 personalitzada a trav\u00e9s de:</li> <li>Analitzar l'historial de cada usuari</li> <li>Analitzar dades de conducta web de cada usuari</li> <li>Desenvolupar tecnologies 3.0 com la Intel\u00b7lig\u00e8ncia Artificial.</li> <li>Crear una base de dades global.</li> <li>Analitzar la geolocalitzaci\u00f3 de lusuari.</li> <li>Etc.</li> </ul> <p>Llegir article \u00bfEn qu\u00e9 consiste la web sem\u00e1ntica?.</p> Quin va ser el motiu de l'\u00e8xit de Google?   La resposta de l'\u00e8xit actual de Google \u00e9s senzilla: va ser el primer cercador, com a tal, que es va prendre seriosament la feina.  Google va n\u00e9ixer a finals dels anys 90, com la tesi doctoral de Larry Page i Sergey Brin. El 1998 es va estrenar a Internet i des de llavors s'ha consagrat com el principal motor de cerca al m\u00f3n.  La seva innovaci\u00f3 principal va ser tenir en compte l'autoritat de les p\u00e0gines, guanyada a trav\u00e9s d'enlla\u00e7os. Google va desenvolupar un sistema per quantificar aquesta autoritat, i el va anomenar \"PageRank\".  Tot i que cal afegir que, a conseq\u00fc\u00e8ncia de la gran import\u00e0ncia que Google atorgava als enlla\u00e7os, molts -si no \u00e9s que tots- llocs web han estat creant enlla\u00e7os no org\u00e0nics durant anys, aconseguint m\u00e9s autoritat de la que correspondria de forma natural.  Per aix\u00f2, i per intentar combatre aquest problema, les actualitzacions m\u00e9s recents de l'algorisme de Google s'han centrat en altres m\u00e8triques, com ara senyals socials, interacci\u00f3 de l'usuari i qualitat dels continguts, entre d'altres.","tags":["aplicaciones web","smr","teor\u00eda"]},{"location":"Moduls/AW/01.html#8-arquitectura-client-servidor","title":"8. Arquitectura client-servidor","text":"<p>El web t\u00e9 una arquitectura client-servidor.</p> <p> Arquitectura client-servidor</p> Quina difer\u00e8ncia hi ha entre una arquitectura client servidor i una arquitectura p2p?   **Client-Servidor**: \u00e9s un model d'aplicaci\u00f3 distribu\u00efda en qu\u00e8 les tasques es reparteixen entre els prove\u00efdors de recursos o serveis, anomenats servidors, i els demandants, anomenats clients. Un client fa peticions a un altre programa, el servidor, que li d\u00f3na resposta. Aquesta idea tamb\u00e9 es pot aplicar a programes que s'executen sobre un ordinador, encara que \u00e9s m\u00e9s avantatjosa en un sistema operatiu multiusuari distribu\u00eft a trav\u00e9s d'una xarxa d'ordinadors.  **P2P**: \u00e9s una xarxa d'ordinadors on tots o alguns aspectes funcionen sense clients ni servidors fixos, sin\u00f3 una s\u00e8rie de nodes que es comporten com a iguals entre si. \u00c9s a dir, actuen simult\u00e0niament com a clients i servidors respecte als altres nodes de la xarxa. Les xarxes P2P permeten lintercanvi directe dinformaci\u00f3, en qualsevol format, entre els ordinadors interconnectats.  Una de les difer\u00e8ncies, \u00e9s que al \u201cCS\u201d es necessita un servidor, i un client, a difer\u00e8ncia del \u201cP2P\u201d, que permet a qualsevol usuari ser client o servidor. Un dels avantatges del \"P2P\" \u00e9s que la connexi\u00f3 sempre estar\u00e0 activa, ja que amb que hi hagi un client, el servidor est\u00e0 actiu, per\u00f2 al \"CS\" es requereix que el servidor principal estigui actiu. Al \"P2P\" tot usuari o client t\u00e9 les mateixes funcions que un altre igual que ell, aspecte contrari al \"CS\" en el qual un servidor t\u00e9 les funcions que els clients no tenen.   <p>Pregunta: Sabr\u00edeu dir-me 5 navegadors web?</p> <p> Arquitectura client-servidor amb NAT</p> <p>Pregunta: Qu\u00e8 signifiquen les sigles NAT?</p>","tags":["aplicaciones web","smr","teor\u00eda"]},{"location":"Moduls/AW/01.html#9-adreces-dinternet","title":"9. Adreces d'Internet","text":"","tags":["aplicaciones web","smr","teor\u00eda"]},{"location":"Moduls/AW/01.html#91-adreces-ip","title":"9.1. Adreces IP","text":"Per qu\u00e8 fem servir dominis?   La IP del IES Polit\u00e8cnic \u00e9s 85.119.198.2. Com memoritzar aquests n\u00fameros \u00e9s poc pr\u00e0ctic es van crear els servidors DNS i aix\u00ed associar aquestes IPs a noms.   Qu\u00e8 \u00e9s un DNS i per a qu\u00e8 serveix?   Cada dispositiu connectat a Internet t\u00e9 una adre\u00e7a IP \u00fanica que altres equips poden fer servir per trobar-lo. Els servidors DNS (Domain Name System) suprimeixen la necessitat que els humans memoritzin adreces IP com ara 192.168.1.1 (en IPv4) o noves adreces IP alfanum\u00e8riques m\u00e9s complexes, com ara 2400:cb00:2048:1:c629:d7a2 (en IPv6).  ![Comunicaci\u00f3 client-servidor DNS b\u00e0sica](/assets/img/internet-caracteristicas-evolucion/servidorDns.png) _Comunicaci\u00f3 client-servidor DNS b\u00e0sica_  &lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/7XjJqUM0dvg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard- write; encrypted-media;  &lt;!-- Comentari perqu\u00e8 no es desquariringui la cosa --&gt;     ## 10. HTML  Llegir article [HTML](/posts/html/).  ## 11. Bibliografia  - [Per qu\u00e8 Google \u00e9s el cercador m\u00e9s utilitzat a tot el m\u00f3n?](http://eidos.com.mx/blog/per-que-google-es-el-buscador-mas-utilizado-en-todo- el-m\u00f3n/#:~:text=La%20resposta%20del%20%C3%A9xito%20actual,m%C3%A1s%20r%C3%A1demana%20i%20precisa%20possible.) - [En qu\u00e8 consisteix la web sem\u00e0ntica?](https://www.ionos.es/digitalguide/online-marketing/marketing-para-motores-de-busqueda/web-semantica/#:~:text=La% 20web%20set%C3%A1ntica%20a%C3%B1ade%20informaci%C3%B3n,poden%20tenir%20el%20mateix%20significat) - [Qu\u00e8 \u00e9s la Web 3.0?](https://www.ceupe.com/blog/que-es-la-web-3-0.html)","tags":["aplicaciones web","smr","teor\u00eda"]},{"location":"Moduls/AW/02.html","title":"HTML","text":""},{"location":"Moduls/AW/02.html#1-introduccio","title":"1. Introducci\u00f3","text":"<p>HTML (Llenguatge de Marques d'Hipertext, de l'angl\u00e8s HyperText Markup Language) \u00e9s el component m\u00e9s b\u00e0sic de la web. Defineix el significat i estructura del contingut web. A m\u00e9s d'HTML, generalment s'utilitzen altres tecnologies per descriure l'aparen\u00e7a/presentaci\u00f3 d'una p\u00e0gina web (CSS) o la funcionalitat/comportament (JavaScript).</p> <p>Hipertext fa refer\u00e8ncia als enlla\u00e7os que connecten p\u00e0gines web entre si, ja sigui dins d'un \u00fanic lloc web o entre llocs web. Els enlla\u00e7os s\u00f3n un aspecte fonamental de la web. En pujar contingut a Internet i vincular-lo a les p\u00e0gines creades per altres persones, et converteixes en un participant actiu a la \u201cWorld Wide Web\u201d (Xarxa Inform\u00e0tica Mundial).</p> <p>HTML utilitza \"marques\" per etiquetar text, imatges i un altre contingut per mostrar-lo en un navegador web. Les marques HTML inclouen \"elements\" especials com <code>&lt;head&gt;</code>, <code>&lt;title&gt;</code>, <code>&lt;body&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;aside&gt;</code>, <code>&lt;audio&gt;</code>, <code>&lt;canvas&gt;</code>, <code>&lt;datalist&gt;</code>, <code>&lt;details&gt;</code>, <code>&lt;embed&gt;</code>, <code>&lt;nav&gt;</code>, <code>&lt;output&gt;</code>, <code>&lt;progress&gt;</code>, <code>&lt;video&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;li&gt;</code> y muchos otros.</p> <p>Un element HTML es distingeix d'un altre text en un document mitjan\u00e7ant \"etiquetes\", que consisteixen en el nom de l'element envoltat per <code>&lt;</code> i <code>&gt;</code>. El nom d'un element dins d'una etiqueta no distingeix entre maj\u00fascules i min\u00fascules. \u00c9s a dir, es pot escriure en maj\u00fascules, min\u00fascules o barreja. Per exemple, l'etiqueta <code>&lt;title&gt;</code> es pot escriure com a <code>&lt;Title&gt;</code>, <code>&lt;TITLE&gt;</code> o de qualsevol altra manera.</p> Qu\u00e8 significa hipertext?   De la mateixa manera que un hipermercat \u00e9s millor que un mercat. L'hipertext \u00e9s millor que el text. De manera simplificada \u00e9s text amb enlla\u00e7os que us porten a altres documents.   \u00c9s HTML case sensitive?   Les etiquetes HTML no distingeixen entre maj\u00fascules i min\u00fascules: `<p>` significa el mateix que `<p>` . L'est\u00e0ndard HTML no requereix etiquetes en min\u00fascules, per\u00f2 W3C recomana min\u00fascules en HTML i exigeix min\u00fascules per a tipus de document m\u00e9s estrictes com XHTML."},{"location":"Moduls/AW/02.html#2-estructura-basica-html","title":"2. Estructura b\u00e0sica html","text":"<p>Ara veurem com combinar elements individuals per formar una p\u00e0gina html completa:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;T\u00edtol de la p\u00e0gina&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    &lt;h1&gt;Aix\u00f2 \u00e9s una cap\u00e7alera&lt;/h1&gt;\n    &lt;p&gt;Aix\u00f2 \u00e9s un par\u00e0graf.&lt;/p&gt;\n\n    &lt;p id=\"benvinguda\"&gt;Benvingut!&lt;/p&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li><code>&lt;!DOCTYPE html&gt;</code>: L'element doctype. Als seus inicis, quan l'HTML feia poc temps (al voltant de 1991-1992), els doctypes servien com a enlla\u00e7os al conjunt de regles que la p\u00e0gina HTML havia de seguir perqu\u00e8 fos considerat bon HTML. Actualment s'ignora i es considera un llegat hist\u00f2ric que cal incloure perqu\u00e8 tot funcioni correctament.</li> <li><code>&lt;html&gt;&lt;/html&gt;</code>: L'element <code>&lt;html&gt;</code>. Aquest element envolta tot el contingut de la p\u00e0gina. De vegades se'l coneix com l'element arrel.</li> <li><code>&lt;head&gt;&lt;/head&gt;</code>: L'element <code>&lt;head&gt;</code> (cap\u00e7alera). Aquest element actua com a contenidor per a tots els par\u00e0metres que vulguis incloure al document HTML que no seran visibles als visitants de la p\u00e0gina.</li> <li><code>&lt;meta charset=\"utf-8\"&gt;</code>: Aquest element estableix que el vostre document HTML utilitzar\u00e0 la codificaci\u00f3 UTF-8, que inclou la gran majoria de car\u00e0cters de tots els idiomes humans escrits.</li> <li><code>&lt;title&gt;&lt;/title&gt;</code>: L'element <code>&lt;title&gt;</code>. Aquest estableix el t\u00edtol de la p\u00e0gina, que \u00e9s el t\u00edtol que apareix a la pestanya del navegador on es carrega la p\u00e0gina.</li> <li><code>&lt;body&gt;&lt;/body&gt;</code>: L'element <code>&lt;body&gt;</code>. Cont\u00e9 tot el contingut que vols mostrar als usuaris quan visiten la teva p\u00e0gina, ja sigui text, imatges, v\u00eddeos, jocs, pistes d\u00e0udio reprodu\u00efbles o qualsevol altra cosa.</li> </ul> Com veiem el codi HTML d'una p\u00e0gina?   F12 o Click dret i inspeccionar"},{"location":"Moduls/AW/02.html#21-element","title":"2.1. Element","text":"<p>Els elements HTML s\u00f3n els components b\u00e0sics dun document HTML. En aquesta p\u00e0gina que llegiu, per exemple, el t\u00edtol, un par\u00e0graf i una imatge s\u00f3n elements H1, P i IMG, respectivament. No tots els tipus d'element s\u00f3n visibles: alguns tenen com a \u00fanica funci\u00f3 agrupar altres elements, per exemple.</p> <p>Explorem una mica l'element par\u00e0graf:</p> <p> Element i etiquetes HTML</p> <p>Les principals parts del nostre element s\u00f3n:</p> <ul> <li>L'etiqueta d'obertura: consisteix en el nom de l'element (en aquest cas, p), tancat entre par\u00e8ntesis angulars d'obertura i tancament. Aquesta etiqueta marca marca on comen\u00e7a l'element o comen\u00e7a a tenir efecte. En aquest exemple, precedeix al comen\u00e7ament del text del par\u00e0graf.</li> <li>El contingut: Aquest \u00e9s el contingut de l'element. En aquest exemple, \u00e9s el text del par\u00e0graf.</li> <li>L'etiqueta de tancament: \u00c9s el mateix que l'etiqueta d'obertura, excepte que inclou una barra diagonal abans del nom de l'element. Aix\u00f2 indica on s'acaba l'element; en aquest cas, on finalitza el par\u00e0graf. No incloure una etiqueta de tancament \u00e9s un error com\u00fa de principiant, i pot conduir a resultats estranys.</li> </ul> <p>L'element el conformen l'etiqueta d'obertura, seguida del contingut, seguit de l'etiqueta de tancament.</p> Com se diu un element que t\u00e9 clau per\u00f2 no t\u00e9 valor?   Element buit."},{"location":"Moduls/AW/02.html#22-atribut","title":"2.2. Atribut","text":"<p>Els elements tamb\u00e9 poden tindre atributs. Els atributs tenen aquest aspecte:</p> <p> Atribut HTML</p> <p>Els atributs contenen informaci\u00f3 extra sobre l'element que no es mostrar\u00e0 al contingut. En aquest cas, l'atribut class assigna a l'element un identificador que podeu utilitzar per dotar-lo d'informaci\u00f3 d'estil.</p> <p>Un atribut hauria de tenir:</p> <p>Un espai entre aquest i nom d'element. (Per a un element amb m\u00e9s d'un atribut, els atributs tamb\u00e9 han d'estar separats per espais). El nom de l'atribut seguit per un signe igual. Un valor de l'atribut, envoltat de cometes d'obertura i tancament.</p> <p> Nomenclatura HTML</p> Per qu\u00e8 serveix l'atribut alt o text alternatiu?   L'atribut ALT o l'etiqueta ALT \u00e9s un atribut HTML per a un text que descriu una imatge. L'atribut ALT es col\u00b7loca directament a l'etiqueta de la imatge. Si una imatge no es pot mostrar per alguna ra\u00f3, l'atribut ALT proporciona text alternatiu per mostrar al vostre lloc.   Qu\u00e8 \u00e9s un atribut boole\u00e0?   S\u00f3n atributs que tenen clau per\u00f2 no tenen cap valor. Per exemple, en aquest input `` l'atribut `checked` \u00e9s boole\u00e0.  Els valors true i false estan especificament prohibits als atributs booleans. Per representar el valor false, l'atribut no ha d'apar\u00e8ixer.  Tots els exemples seg\u00fcents s\u00f3n correctes i equivalents:  <pre><code>&lt;input type=\"checkbox\" name=\"vehicle\" value=\"car\" checked disabled&gt;\n&lt;input type=\"checkbox\" name=\"vehicle\" value=\"car\" checked=\"checked\" disabled=\"disabled\"&gt;\n&lt;input type=\"checkbox\" name=\"vehicle\" value=\"car\" checked disabled=\"\"&gt;\n</code></pre> <p>\u00c9s correcte l'element <code>&lt;a href=https://www.mozilla.org/&gt;el meu lloc web preferit&lt;/a&gt;</code>?</p> <p>\u00c9s correcte l'element <code>&lt;a href='http://www.exemple.com'&gt;Un enlla\u00e7 al meu exemple.&lt;/a&gt;</code>?</p> <p>\u00c9s correcte l'element <code>&lt;a href='http://www.exemple.com' title=\u00c9s correcte o no&gt;Un enlla\u00e7 al meu exemple.&lt;/a&gt;</code>?</p> <p>\u00c9s correcte l'element <code>&lt;a href=\"http://www.exemple.com\" title=\"\u00c9s 'correcte'?\"&gt;Un enlla\u00e7 al meu exemple.&lt;/a&gt;</code>?</p> <p>\u00c9s correcte l'element <code>&lt;a href='http://www.exemple.com' title='\u00c9s 'correcte'?'&gt;Un enlla\u00e7 al meu exemple.&lt;/a&gt;</code>?</p> Qu\u00e8 \u00e9s un llenguatge de programaci\u00f3?   Un llenguatge de programaci\u00f3 \u00e9s un llenguatge formal que proporciona a una persona, en aquest cas el programador, la capacitat d'escriure (o programar) una s\u00e8rie d'instruccions o seq\u00fc\u00e8ncies d'ordres en forma d'algorismes per controlar el comportament f\u00edsic o l\u00f2gic d'un sistema inform\u00e0tic, de manera que es puguin obtenir diverses classes de dades o executar determinades tasques.  Tot aquest conjunt d'ordres escrites mitjan\u00e7ant un llenguatge de programaci\u00f3 s'anomena programa inform\u00e0tic.   \u00c9s HTML un llenguatge de programaci\u00f3?    HTML \u00e9s una manera de representar la informaci\u00f3. No programes el comportament dun ordinador per tant no \u00e9s un llenguatge de programaci\u00f3.  HTML (\"Hypertext Markup Language\") no \u00e9s un llenguatge de programaci\u00f3. \u00c9s un llenguatge de marcatge que diu als navegadors web com estructurar les p\u00e0gines web que est\u00e0s visitant. Pot ser tan complex o tan simple com vulgui el desenvolupador web. L'HTML consisteix en una s\u00e8rie d'elements, que podeu utilitzar per tancar, delimitar o marcar diferents parts del contingut per fer que apareguin d'una certa manera, o actu\u00efn de manera determinada. Les etiquetes que delimiten un fragment de contingut poden fer que aquest contingut enlla\u00e7i amb una altra p\u00e0gina, poseu una paraula en cursiva, etc\u00e8tera. Per exemple, atesa la seg\u00fcent l\u00ednia de contingut:"},{"location":"Moduls/AW/02.html#formularios","title":"Formularios","text":"<p>Quines s\u00f3n les passes que he de seguir per poder veure quina informaci\u00f3 estaria enviant a un servidor des d'un formulari?</p>  Preguntes sobre el v\u00eddeo   1. Per qu\u00e8 serveix l'element `label`? 2. Per qu\u00e8 l'atribut for serveix en un element `label`? 3. Per qu\u00e8 l'atribut name serveix en un element `input`? 4. Per qu\u00e8 serveix l'atribut `placeholder`? 5. Se t'acudeix un cas real on necessitem utilitzar dos elements form dins d'un mateix html i tingui sentit? 6. Per qu\u00e8 serveix l'atribut `type=\"email\"`? 7. Per qu\u00e8 serveix l'atribut `type=\"password\"`? La contrasenya xifrada s'envia si posem l'atribut `type=\"password\"`? 8. L'atribut `type=\"submit\"` en qu\u00e8 dos elements el podem fer servir? Per qu\u00e8 serveix aquest atribut `type=\"submit\"`? 9. Per a qu\u00e8 serveix el `type=\"reset\"`? 10. Quins tipus d'input hi ha? text, password, email, etc. 11. Per a qu\u00e8 serveix l\u02bbatribut `name`? I el `value`? 12. El valor dels atributs ha d'anar sempre entre cometes dobles? 13. Quina difer\u00e8ncia hi ha entre els input `type=\"r\u00e0dio\"` i `type=\"checkbox\"`? 14. Quina difer\u00e8ncia hi ha entre `type=\"date\"` i `type=\"datetime-local\"` i `type=\"time\"`? 15. Podem en un input amb atribut `type=\"number\"` posar n\u00fameros negatius? I n\u00fameros decimals? 16. Quin \u00e9s l'atribut que fa que nom\u00e9s puguis triar una opci\u00f3 dins del tipus/categoria? 17. Dep\u00e8n el format de la data de la llengua en qu\u00e8 escrivim l'html (``)?"},{"location":"Moduls/AW/02.html#3-bibliografia","title":"3. Bibliograf\u00eda","text":"<ul> <li>HTML: Lenguaje de etiquetas de hipertexto (Developer Mozilla)</li> <li>HTML Tutorial (W3Schools)</li> <li>Lenguaje HTML5</li> <li>Atributos booleanos en HTML</li> </ul>"},{"location":"Moduls/AW/_AW2425.html","title":"Aplicacions Web - SMX","text":""},{"location":"Moduls/AW/_AW2425.html#resultats-daprenentatge-i-criteris-davaluacio","title":"Resultats d'aprenentatge i Criteris d'avaluaci\u00f3","text":"<p>En el Reial decret de ti\u0301tol (RD1691/2007) s'estableixen els criteris d'avaluacio\u0301 per a cadascun dels resultats d'aprenentatge de cada mo\u0300dul. Aquests criteris especifiquen allo\u0300 que s'ha d'avaluar per a comprovar si s'han aconseguit aquests resultats. Per al mo\u0300dul Seguretat informa\u0300tica, aquests so\u0301n els criteris d'avaluacio\u0301 (elements de capacitat) relacionats amb cada resultat d'aprenentatge:</p> <ol> <li> <p>Aplica mesures de seguretat passiva en sistemes informa\u0300tics descrivint caracteri\u0301stiques d'entorns i relacionant-les amb les seues necessitats.</p> <p>a)  S'ha valorat la importa\u0300ncia de mantenir la informacio\u0301 segura.</p> <p>b)  S'han descrit les difere\u0300ncies entre seguretat fi\u0301sica i lo\u0300gica.</p> <p>c)  S'han definit les caracteri\u0301stiques de la ubicacio\u0301 fi\u0301sica i condicions ambientals dels equips i servidors.</p> <p>d)  S'ha identificat la necessitat de protegir fi\u0301sicament els sistemes informa\u0300tics.</p> <p>e)  S'ha verificat el funcionament dels sistemes d'alimentacio\u0301 ininterrompuda.</p> <p>f)  S'han seleccionat els punts d'aplicacio\u0301 dels sistemes d'alimentacio\u0301 ininterrompuda.</p> <p>g)  S'han esquematitzat les caracteri\u0301stiques d'una poli\u0301tica de seguretat basada en llistes de control d'acce\u0301s.</p> <p>h)  S'ha valorat la importa\u0300ncia d'establir una poli\u0301tica de contrasenyes.</p> <p>i)  S'han valorat els avantatges que suposa la utilitzacio\u0301 de sistemes biome\u0300trics.</p> </li> <li> <p>Gestiona dispositius d'emmagatzematge descrivint els procediments efectuats i aplicant    te\u0300cniques per a assegurar la integritat de la informacio\u0301.</p> <p>a)  S'ha interpretat la documentacio\u0301 te\u0300cnica relativa a la poli\u0301tica d'emmagatzematge.</p> <p>b)  S'han tingut en compte factors inherents a l'emmagatzematge de la informacio\u0301 (rendiment, disponibilitat, accessibilitat, entre uns altres).</p> <p>c)  S'han classificat i enumerat els principals me\u0300todes d'emmagatzematge inclosos els sistemes d'emmagatzematge en xarxa.</p> <p>d)  S'han descrit les tecnologies d'emmagatzematge redundant i distribui\u0308t.</p> <p>e)  S'han seleccionat estrate\u0300gies per a la realitzacio\u0301 de co\u0300pies de seguretat.</p> <p>f)  S'ha tingut en compte la frequ\u0308e\u0300ncia i l'esquema de rotacio\u0301.</p> <p>g)  S'han realitzat co\u0300pies de seguretat amb diferents estrate\u0300gies.</p> <p>h)  S'han identificat les caracteri\u0301stiques dels mitjans d'emmagatzematge remots i extrai\u0308bles.</p> <p>i)  S'han utilitzat mitjans d'emmagatzematge remots i extrai\u0308bles.</p> <p>j)  S'han creat i restaurat imatges de respatler de sistemes en funcionament.</p> </li> <li> <p>Aplica mecanismes de seguretat activa descrivint les seues caracteri\u0301stiques i relacionant-les amb les necessitats d'u\u0301s del sistema informa\u0300tic.</p> <p>a)  S'han seguit plans de continge\u0300ncia per a actuar davant fallades de seguretat.</p> <p>b)  S'han classificat els principals tipus de programari malicio\u0301s.</p> <p>c)  S'han realitzat actualitzacions perio\u0300diques dels sistemes per a corregir possibles vulnerabilitats.</p> <p>d)  S'ha verificat l'origen i l'autenticitat de les aplicacions que s'instal\u00b7len en els sistemes.</p> <p>e)  S'han instal\u00b7lat, provat i actualitzat aplicacions especi\u0301fiques per a la deteccio\u0301 i eliminacio\u0301 de programari malicio\u0301s.</p> <p>f)  S'han aplicat te\u0300cniques de recuperacio\u0301 de dades.</p> </li> <li> <p>Assegura la privadesa de la informacio\u0301 transmesa en xarxes informa\u0300tiques descrivint    vulnerabilitats i instal\u00b7lant programari especi\u0301fic.</p> <p>a)  S'ha identificat la necessitat d'inventariar i controlar els serveis de xarxa.</p> <p>b)  S'ha contrastat la incide\u0300ncia de les te\u0300cniques d'enginyeria social en els fraus informa\u0300tics i robatoris d'informacio\u0301.</p> <p>c)  S'ha dedui\u0308t la importa\u0300ncia de minimitzar el volum de tra\u0300fic generat per la publicitat i el correu no desitjat.</p> <p>d)  S'han aplicat mesures per a evitar el monitoratge de xarxes cablejades.</p> <p>e)  S'han classificat i valorat les propietats de seguretat dels protocols usats en xarxes sense fils.</p> <p>f)  S'han descrit sistemes d'identificacio\u0301 com la signatura electro\u0300nica, certificat digital, entre uns altres.</p> <p>g)  S'han utilitzat sistemes d'identificacio\u0301 com la signatura electro\u0300nica, certificat digital, entre uns altres.</p> <p>h)  S'ha instal\u00b7lat i configurat un tallafocs en un equip o servidor.</p> </li> <li> <p>Reconeix la legislacio\u0301 i normativa sobre seguretat i proteccio\u0301 de dades analitzant les    repercussions del seu incompliment.</p> <p>a)  S'ha descrit la legislacio\u0301 sobre proteccio\u0301 de dades de cara\u0300cter personal.</p> <p>b)  S'ha determinat la necessitat de controlar l'acce\u0301s a la informacio\u0301 personal emmagatzemada.</p> <p>c)  S'han identificat les figures legals que intervenen en el tractament i manteniment dels fitxers de dades.</p> <p>d)  S'ha contrastat l'obligacio\u0301 de posar a la disposicio\u0301 de les persones les dades personals que els concerneixen.</p> <p>e)  S'ha descrit la legislacio\u0301 actual sobre els serveis de la societat de la informacio\u0301 i comerc\u0327 electro\u0300nic.</p> <p>f)  S'han contrastat les normes sobre gestio\u0301 de seguretat de la informacio\u0301.</p> </li> </ol>"},{"location":"Moduls/DWEC/index.html","title":"Index","text":"<p>Hola, correcte</p>"},{"location":"Moduls/DWEC/_DWEC2425.html","title":"Desenvolupament web en entorn client - DAW","text":"<p>Dins del cicle de DAW, el segon curs t\u00e9 3 m\u00f2duls \u00edntimament relacionats i que, tots plegats, serveixen per fer una web completament. Tenim un m\u00f2dul per programar el servidor (backend): 'DWES', un per al client (frontend): 'DWEC' i un per a la interf\u00edcie d'usuari: 'DIW'. El m\u00f2dul DWEC, per tant, ha de suposar que hi ha un servidor funcionant correctament, aix\u00ed com el m\u00f2dul de DWES suposa que alg\u00fa far\u00e0 el frontend. A m\u00e9s, a DWEC no ens vam preocupar massa de la part est\u00e8tica, tot i que \u00e9s inevitable construir HTML i reaccionar a les accions de l'usuari. Per tant, aquest m\u00f2dul se centra en com recollir dades del servidor, mostrar-les i fer alguna cosa amb ells. At\u00e8s que aquest m\u00f2dul \u00e9s gaireb\u00e9 tot 'Javascript', la manera de tractar-lo m\u00e9s intensament i en tots els aspectes del frontend \u00e9s fer una 'SPA' (ja veurem qu\u00e8 \u00e9s aix\u00f2). \u00c9s important recalcar que vam veure un subconjunt molt petit de totes les maneres diferents que hi ha per enfocar un projecte de frontend i que no t\u00e9 perqu\u00e8 ser el millor en tots els casos. L' alumnat d' aquests cicles ha d' afegir a la seva rutina personal alguna manera d' estar al dia de les novetats del desenvolupament web. Per exemple, seguir la MDN en xarxes, /r/javascript a Reddit, Canals de Youtube, Hacker News, la W3C...</p> <p>Podem separar el curs en dos grans blocs amb els temes seg\u00fcents:</p> <ul> <li>Javascript \"vainilla\":</li> <li>Programaci\u00f3 Javascript per al frontend</li> <li>Testing</li> <li>Comunicaci\u00f3 amb el servidor<ul> <li>Promeses</li> <li>Fetch</li> </ul> </li> <li>Programaci\u00f3 moderna a Javascript<ul> <li>Vite</li> <li>CI/CD</li> <li>Desplegament</li> <li>Observables i programaci\u00f3 reactiva</li> <li>Programaci\u00f3 funcional</li> </ul> </li> <li>Frameworks</li> <li>Typescript</li> <li>Angular</li> <li>Components, rutes, serveis...</li> <li>Formularis</li> </ul> <p>At\u00e8s que tot est\u00e0 m\u00e9s ben documentat a les webs oficials de cada tecnologia, a MDN o W3CSchool i altres, no cal ser exhaustiu a cada secci\u00f3. Ens aturarem en les parts m\u00e9s interessants i representatives del frontend amb exemples pr\u00e0ctics i intentant sempre aplicar les millors pr\u00e0ctiques.</p> <p>Actualment hi ha poca gent que programi directament a Javascript \"Vanilla\". En un m\u00f2dul per a formaci\u00f3 professional ens podem preguntar si no seria millor ensenyar directament un framework. I tamb\u00e9 si no seria millor ensenyar el framework \"de moda\". Els motius per al fet d'explicar els fonaments a Javascript sense frameworks o moltes biblioteques i de seguir amb Angular han estat reflexionats amb altres professors i amb tutors a empreses. D'una banda hi ha el fet que cal con\u00e8ixer la base i no dependre d'una llibreria en concret. Per\u00f2 \u00e9s que l'\u00fas de frameworks, tot i ser massiu, tamb\u00e9 t\u00e9 la seva controv\u00e8rsia. Con\u00e8ixer els fonaments i les bones pr\u00e0ctiques \u00e9s millor que saber programar r\u00e0pidament una cosa comercial. Pel que fa al framework, Angular \u00e9s usat massivament per gent que no publicita la seva feina en xarxes socials. La majoria d'empreses de la zona l'utilitzen. A m\u00e9s, \u00e9s un framework totalment actualitzat a les metodologies modernes, que for\u00e7a a tenir una disciplina i con\u00e8ixer arquitectures, patrons de disseny i bones pr\u00e0ctiques.</p> <p>Desenvolupament frontend</p>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html","title":"La Web i el Desenvolupament Web","text":"<p>La Web \u00e9s un dels conjunts de protocols m\u00e9s reeixits d'Internet, i la seva creaci\u00f3 va marcar un abans i un despr\u00e9s en la manera com accedim i compartim informaci\u00f3. Va ser inventada per Tim Berners-Lee al CERN (Organitzaci\u00f3 Europea per a la Recerca Nuclear) i ha evolucionat fins a convertir-se en una eina fonamental en la vida quotidiana i professional de milions de persones.</p> <p>La Web es basa en el concepte de <code>hipertext</code>, una tecnologia que permet enlla\u00e7ar diferents documents i recursos a trav\u00e9s d'enlla\u00e7os o hipervincles. Aquesta capacitat denlla\u00e7 \u00e9s el que permet la navegaci\u00f3 entre diferents p\u00e0gines i llocs web.</p> <p>El World Wide Web Consortium (W3C) \u00e9s lorganitzaci\u00f3 que sencarrega de desenvolupar est\u00e0ndards per a la Web. El seu objectiu \u00e9s garantir que la Web continu\u00ef sent oberta, accessible i funcional per a tothom. Aquests est\u00e0ndards inclouen tecnologies fonamentals com HTML, CSS i JavaScript.</p>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#components-de-la-web","title":"Components de la Web","text":"<p>La Web es compon de diversos elements clau:</p> <ul> <li>Hipertext: Permet la creaci\u00f3 denlla\u00e7os entre documents.</li> <li>Protocol HTTP: \u00c9s el protocol de comunicaci\u00f3 que permet la transfer\u00e8ncia de dades a la Web.</li> <li>Servidors i Clients: Els servidors allotgen els llocs web i els clients (navegadors web) els sol\u00b7liciten i mostren.</li> <li>DNS (Sistema de Noms de Domini): Tradueix els noms de domini llegibles per humans (com www.ejemplo.com) en adreces IP que els ordinadors poden entendre.</li> </ul>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#el-desenvolupament-web","title":"El Desenvolupament Web","text":"<p>El desenvolupament web \u00e9s un camp multidisciplinari que abasta diverses \u00e0rees i tecnologies. A continuaci\u00f3, es descriuen les principals \u00e0rees professionals del desenvolupament web:</p> <p>Contingut</p> <p>El contingut es refereix a l'organitzaci\u00f3, sem\u00e0ntica, presentaci\u00f3 i estructura de la informaci\u00f3 a la web. El llenguatge fonamental per al contingut web \u00e9s HTML (HyperText Markup Language), que defineix lestructura i el contingut duna p\u00e0gina web.</p> <p>Disseny</p> <p>El disseny se centra en laspecte visual i els elements gr\u00e0fics duna p\u00e0gina web. Utilitza tecnologies com CSS (Cascading Style Sheets) per definir estils i plantilles que controlen l'aparen\u00e7a de les p\u00e0gines.</p> <p>Tecnologia Frontend</p> <p>Les tecnologies frontend s\u00f3n les que s'executen al navegador de l'usuari i s\u00f3n responsables dels elements interactius d'una p\u00e0gina web. El principal llenguatge de programaci\u00f3 frontend \u00e9s JavaScript, que permet crear interf\u00edcies din\u00e0miques i reactives.</p> <p>Tecnologia Backend</p> <p>El backend s'encarrega de la l\u00f2gica del servidor, l'acc\u00e9s a les bases de dades i el processament de les sol\u00b7licituds dels usuaris. Els llenguatges comuns de backend inclouen PHP, Python i Node.js, entre d'altres.</p> <p>Distribuci\u00f3</p> <p>La distribuci\u00f3 fa refer\u00e8ncia a com es despleguen i gestionen els llocs web. Aix\u00f2 inclou tant el maquinari (servidors, m\u00e0quines virtuals, contenidors) com el programari (servidors web com Apache, IIS i NGINX).</p> <p>Prop\u00f2sit</p> <p>Les webs es fan per a alguna cosa. Definir el prop\u00f2sit pot ser que no sigui la tasca m\u00e9s t\u00e8cnica, per\u00f2 calen perfils intermedis que s\u00e0piguen traslladar les necessitats dels clients als desenvolupadors. O fins i tot inventar nous models de negoci basats en tecnologies web.</p>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#arquitectura-client-servidor","title":"Arquitectura Client - Servidor","text":"<p>L'arquitectura client-servidor \u00e9s el model fonamental en qu\u00e8 es basa la web. Es divideix en dues parts principals:</p> <ul> <li>Server-side (Costat del servidor)</li> <li>Maquinari: Inclou servidors i elements de xarxa, m\u00e0quines virtuals i contenidors.</li> <li>Programari: Involucra servidors web (com Apache, IIS, NGINX) i llenguatges CGI (com Perl, PHP, C). Tamb\u00e9 inclou llenguatges i frameworks amb servidors web integrats, com ara Python, Java, Node.js i C++.</li> <li>Client-side (Costat del client)</li> <li>Clients web: navegadors web com ara Firefox, Chrome, Vivaldi, Opera, Edge i Internet Explorer.</li> <li>Llenguatges de marques: HTML, XHTML, HTML5 i CSS.</li> <li>Llenguatges de programaci\u00f3 de l'entorn Client: Principalment JavaScript.</li> </ul>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#el-cami-del-frontend","title":"El Cam\u00ed del Frontend","text":"<p>Per a m\u00e9s detalls, podeu consultar Full de ruta per a desenvolupadors de front-end.</p> <p>Aquest terme, extret de la web anterior, reflecteix l'itinerari formatiu recomanat per ser un professional del desenvolupament web a la part del Frontend. Aquest m\u00f2dul no \u00e9s suficient per dominar-ho tot i \u00e9s important ser conscients que estem veient una petita part de les m\u00faltiples possibilitats que tenim al nostre abast.</p>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#del-costat-del-servidor-vs-del-costat-del-client","title":"Del costat del servidor vs del costat del client","text":"<p>En el desenvolupament web, tant el costat del servidor (server-side) com el costat del client (client-side) juguen els seus rols. No obstant aix\u00f2, moltes tasques poden dur-se a terme a qualsevol dels dos costats, i lelecci\u00f3 don implementar una funcionalitat espec\u00edfica dep\u00e8n de diversos factors, com la tecnologia adequada per al cas o la comoditat del desenvolupador amb una tecnologia particular.</p>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#tasques-comunes-a-server-side-i-client-side","title":"Tasques comunes a Server-side i Client-side","text":"<ul> <li>Validar formularis: La validaci\u00f3 es pot fer al client per millorar l'experi\u00e8ncia de l'usuari, per\u00f2 s'ha de verificar novament al servidor per raons de seguretat.</li> <li>Desar dades permanents: Generalment es fa al servidor utilitzant bases de dades.</li> <li>Presentaci\u00f3 de diapositives: \u00c9s m\u00e9s com\u00fa al costat del client, utilitzant JavaScript o frameworks de frontend.</li> <li>Eliminar un par\u00e0graf: Aquesta tasca es realitza t\u00edpicament al client, utilitzant JavaScript per modificar el DOM (Document Object Model).</li> <li>Calcular dades: Els c\u00e0lculs es poden fer a banda i banda, depenent de la naturalesa del c\u00e0lcul i els requisits de seguretat.</li> <li>Accedir a bases de dades: Aquesta tasca es realitza al servidor per mantenir la seguretat i la integritat de les dades.</li> </ul>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#javascript-al-costat-del-client","title":"JavaScript al costat del client","text":"<p>JavaScript \u00e9s el llenguatge de programaci\u00f3 m\u00e9s utilitzat al costat del client. Tot i aix\u00f2, t\u00e9 les seves limitacions i particularitats:</p> <ul> <li>Limitacions de JavaScript:</li> <li>No podeu escriure directament al servidor.</li> <li>No tots els navegadors suporten JavaScript i es pot desactivar, de manera que una p\u00e0gina web ben dissenyada hauria de funcionar sense.</li> <li>No podeu modificar prefer\u00e8ncies del navegador, llan\u00e7ar aplicacions, llegir o escriure fitxers al client, retransmetre streaming, enviar correus electr\u00f2nics, interactuar amb llenguatges de servidor, accedir a un web d'un domini diferent, protegir l'origen de les imatges, ni implementar multiprocessos.</li> <li>Tecnologia as\u00edncrona:</li> <li>JavaScript pot sol\u00b7licitar dades al servidor de forma as\u00edncrona utilitzant tecnologies com AJAX (Asynchronous JavaScript and XML).</li> <li>Usos de JavaScript:</li> <li>Fer que la web reaccioni a la interacci\u00f3 de lusuari.</li> <li>Proporcionar una interf\u00edcie agradable per a les dades.</li> <li>Controlar finestres, marcs i applets al document HTML.</li> <li>Preprocessar dades abans d'enviar-les al servidor.</li> <li>Modificar l'estil i el contingut de manera din\u00e0mica en funci\u00f3 de la interacci\u00f3 de l'usuari.</li> <li>Sol\u00b7licitar o enviar fitxers al servidor.</li> </ul>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#compatibilitat-i-validacio-html","title":"Compatibilitat i Validaci\u00f3 HTML","text":"<p>Per evitar problemes de compatibilitat, el codi HTML ha de ser v\u00e0lid. Es pot utilitzar el validador d'HTML del W3C (https://validator.w3.org/) per assegurar-se que el codi compleixi amb els est\u00e0ndards.</p>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#seguretat-en-javascript","title":"Seguretat en JavaScript","text":"<p>El JavaScript s'executa en un entorn segur sense contacte directe amb el sistema operatiu del client. Implementa una \"pol\u00edtica del mateix origen\", cosa que significa que nom\u00e9s t\u00e9 acc\u00e9s a dades rebudes del mateix servidor des del qual va ser carregat.</p>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#entorns-de-programacio-web-per-al-client","title":"Entorns de Programaci\u00f3 Web per al Client","text":"<p>L'elecci\u00f3 del programari per al desenvolupament web dep\u00e8n de les necessitats i la complexitat del projecte:</p> <ul> <li>Programari per a modificacions casuals:</li> <li>Editors de text lleugers i r\u00e0pids com Gedit, Nano, Notepad.</li> <li>Editors de text avan\u00e7ats:</li> <li>Eines m\u00e9s potents com Sublim Text, Brackets, Jedit, Visual Studio Code, Vim.</li> <li>Entorns de Desenvolupament Integrats (IDEs):</li> <li>Solucions completes com NetBeans, Eclipse, WebStorm.</li> </ul>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#preparar-lentorn-de-desenvolupament","title":"Preparar l'entorn de desenvolupament","text":"<p>En un entorn de desenvolupament t\u00edpic, com una classe de programaci\u00f3 web, es pot utilitzar Visual Studio Code amb les extensions seg\u00fcents:</p> <ul> <li>M\u00e9s bonica: Per formatar fitxers de manera autom\u00e0tica, ja sigui manualment o en desar.</li> <li>EsLint: Ajuda a detectar errors d'estil o programaci\u00f3 que JavaScript no pot detectar per si mateix (requereix instal\u00b7lar eslint al projecte).</li> <li>Servidor en directe: Per provar la web en un servidor local de manera r\u00e0pida i senzilla.</li> </ul> <p>M\u00e9s endavant anirem instal\u00b7lant alguna extensions m\u00e9s.</p>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#altres-eines","title":"Altres Eines","text":"<ul> <li>Tecla F12 als navegadors: Accedeix a les eines de desenvolupament del navegador.</li> <li>Edici\u00f3 per a desenvolupadors de Firefox: Una versi\u00f3 del navegador Firefox amb eines avan\u00e7ades per a desenvolupadors web.</li> </ul>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#tipus-daplicacions-web-segons-el-frontend","title":"Tipus d'aplicacions web segons el Frontend","text":"<p>El desenvolupament d'aplicacions web ha evolucionat significativament amb el temps i avui dia hi ha diverses maneres d'abordar el frontend. A continuaci\u00f3, explorarem els diferents tipus d'aplicacions web segons les tecnologies de frontend que es facin servir, aix\u00ed com l'evoluci\u00f3 de les mateixes.</p> <ul> <li>Amb JavaScript 'Vanilla': Es refereix a la utilitzaci\u00f3 de JavaScript pur sense cap biblioteca o framework addicional. \u00c9s una manera directa i eficient de programar sobretot quan s\u00f3n aplicacions petites i senzilles.</li> <li>Amb Biblioteques:</li> <li>JQuery: Facilita la manipulaci\u00f3 del DOM, esdeveniments i AJAX.</li> <li>Prototip: Simplifica les tasques de programaci\u00f3 orientada a objectes en JavaScript.</li> <li>D3.js: S'utilitza per crear visualitzacions de dades.</li> <li>Bootstrap: Biblioteca de CSS i JavaScript per a disseny responsiu.</li> <li>View.js: Ofereix una manera progressiva de construir interf\u00edcies dusuari.</li> <li>Reacciona: Biblioteca per construir interf\u00edcies d'usuari, principalment en aplicacions d'una sola p\u00e0gina.</li> <li>Con Frameworks:</li> <li>Angular: Framework de JavaScript de Google per construir aplicacions din\u00e0miques duna sola p\u00e0gina.</li> <li>Reacciona: Encara que \u00e9s una biblioteca, tamb\u00e9 s'utilitza com a framework quan es combina amb altres eines.</li> <li>View.js: Igual que React, es pot considerar un framework quan s'utilitza en projectes m\u00e9s grans.</li> <li>Phaser: Framework per al desenvolupament de jocs en HTML5.</li> <li>Con Frameworks Full Stack:</li> <li>Odoo: Plataforma de codi obert que proporciona un conjunt complet d'aplicacions empresarials.</li> <li>Blitz: Framework de React basat en Next.js per a aplicacions de pila completa.</li> <li>Next.js: Framework de React per a aplicacions de servidor i client.</li> <li>SvelteKit: Framework per construir aplicacions r\u00e0pides i modernes.</li> </ul>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#evolucio-de-les-aplicacions-web","title":"Evoluci\u00f3 de les Aplicacions Web","text":"<ol> <li>P\u00e0gines Web Est\u00e0tiques: Les primeres aplicacions web eren simples p\u00e0gines est\u00e0tiques amb hipervincles.</li> <li>P\u00e0gines Web Generades pel Servidor: Amb el temps, es va introduir una mica de JavaScript per millorar la interacci\u00f3.</li> <li>Introducci\u00f3 d'AJAX: Permet carregar o pujar dades al servidor de manera as\u00edncrona, millorant la interactivitat sense recarregar la p\u00e0gina.</li> <li>Aplicaci\u00f3 d'una sola p\u00e0gina (SPA): Les aplicacions d'una sola p\u00e0gina es comuniquen amb el servidor usant JSON o XML, proporcionant una experi\u00e8ncia m\u00e9s fluida.</li> </ol> <p>Evoluci\u00f3 de les aplicacions web.</p> <p>Actualment es poden fer p\u00e0gines web de moltes maneres. En aquest llibre, cap al final, ens enfoquem m\u00e9s a imitar els frameworks actuals, que solen estar pensats per a SPA amb una API. No obstant aix\u00f2, es poden fer p\u00e0gines nom\u00e9s amb HTML est\u00e0tic, o generat una vegada a partir de Markdown, com aquest mateix llibre (Jekyll, Jupyter Books...), tamb\u00e9 es pot generar HTML amb PHP, Node, Java... O es pot tenir un CMS com a Wordpress i programar plugins. Es pot tenir un CMS Headless o generat mitjan\u00e7ant Micro-Frontends. O aplicacions progressives PWA o H\u00edbrides amb Ionic i Cordova. Pel que fa a servir-les, tenim els hostings i servidors tradicionals o \"Serverless\", plataformes \"Low Code\"... La llista no s'acaba i cadascuna d'aquestes idees t\u00e9 moltes m\u00e9s opcions.</p>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#aplicacions-duna-sola-pagina-spa","title":"Aplicacions d'una sola p\u00e0gina (SPA)","text":"<ul> <li>SPA com a sobreenginyeria: En molts casos, utilitzar SPA pot complicar innecess\u00e0riament el desenvolupament web. Tot seguit veurem la justificaci\u00f3 per fer web d'aquesta manera.</li> <li>Freq\u00fc\u00e8ncia d'\u00fas: \u00c9s important considerar si l'aplicaci\u00f3 ser\u00e0 utilitzada constantment o espor\u00e0dicament. Una aplicaci\u00f3 web utilitzada espor\u00e0dicament no ha de ser molt pesada i \u00e9s millor que sigui generada pel servidor o est\u00e0tica per millorar el SEO. No obstant aix\u00f2, una aplicaci\u00f3 web que el client mant\u00e9 sempre oberta, pot ser m\u00e9s agradable dutilitzar si \u00e9s una SPA.</li> <li>Servidor vs Client: Crear l'HTML i l'estil al servidor pot ser menys complicat, per\u00f2 en aplicacions grans, podeu sobrecarregar el servidor i dificultar la separaci\u00f3 de la vista del model i controlador.</li> <li>SPA al nostre m\u00f2dul: Optarem per una SPA pel fet que \u00e9s m\u00e9s adequat per al m\u00f2dul que estem desenvolupant. Una SPA requereix saber construir elements del DOM, comunicar-se amb el servidor mitjan\u00e7ant peticions as\u00edncrones amb Javascript i manejar els esdeveniments i la reactivitat. Per tant, \u00e9s l'escusa perfecta per impartir els nostres continguts.</li> </ul>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#entre-la-pagina-web-i-lapp","title":"Entre la p\u00e0gina web i l'APP","text":"<ol> <li>P\u00e0gines Web: Contingut est\u00e0tic i din\u00e0mic accessible a trav\u00e9s de navegadors.</li> <li>Aplicacions Web: Poden ser SPA o no.</li> <li>Aplicacions Web Responsives: Dissenyades per adaptar-se a diferents dispositius.</li> <li>PWA (aplicaci\u00f3 web progressiva): Combinen el millor de les p\u00e0gines web i les aplicacions m\u00f2bils.</li> <li>Apps H\u00edbrides: Utilitzen frameworks com Ionic per funcionar en m\u00faltiples plataformes.</li> <li>Aplicacions pr\u00e0cticament natives: Utilitzen tecnologies com React Native o Flutter per apropar-se al rendiment de les aplicacions natives.</li> </ol>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#les-biblioteques","title":"Les Biblioteques","text":"<ul> <li>Caracter\u00edstiques: Aporten funcionalitats espec\u00edfiques al llenguatge de programaci\u00f3.</li> <li>Flexibilitat: No obliguen a canviar la manera de programar.</li> <li>Simplificaci\u00f3: Faciliten la programaci\u00f3 de tasques concretes.</li> <li>Desavantatges: Poden crear depend\u00e8ncia al programador.</li> <li>Reempla\u00e7ament: Algunes biblioteques, com Underscore, Lodash o JQuery, han perdut rellev\u00e0ncia amb la introducci\u00f3 d'ES6.</li> </ul>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#els-frameworks","title":"Els Frameworks","text":"<ul> <li>Modificaci\u00f3: Canvien completament la manera de programar.</li> <li>Integraci\u00f3: S'encarreguen de plantilles, comunicacions, encaminaments, components, m\u00f2duls, etc.</li> <li>Corba d'aprenentatge: S\u00f3n complexos d'aprendre.</li> <li>Efici\u00e8ncia: Un cop dominats, fan la programaci\u00f3 m\u00e9s \u00e0gil i correcta.</li> <li>In\u00e8rcia: Poden dificultar el canvi a un altre framework.</li> <li>Obsolesc\u00e8ncia: Si el framework queda obsolet, la web tamb\u00e9.</li> </ul>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#utilitat-dels-frameworks","title":"Utilitat dels Frameworks","text":"<ul> <li>Aplicacions espec\u00edfiques: S\u00f3n \u00fatils si es desenvolupen per a una aplicaci\u00f3 en particular.</li> <li>Normes: S\u00f3n valuosos si permeten exportar components.</li> <li>Valor afegit: Han d'aportar una cosa \u00fanica.</li> <li>Aplicacions no cr\u00edtiques: S\u00f3n ideals per a aplicacions que no s\u00f3n cr\u00edtiques.</li> </ul>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#obtencio-de-biblioteques-i-frameworks","title":"Obtenci\u00f3 de Biblioteques i Frameworks","text":"<ul> <li>Desc\u00e0rrega directa: Descarregar un fitxer .js o un directori comprimit del web oficial i copiar-lo al projecte.</li> <li>CDN: Utilitzar un CDN directament des de la web oficial.</li> <li>Gestors de paquets: Utilitzar NPM o Yarn per gestionar depend\u00e8ncies.</li> </ul>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#modes-i-tendencies","title":"Modes i Tend\u00e8ncies","text":"<p>Les xarxes socials s\u00f3n plenes de gent intentant vendre el seu curs. Al m\u00f3n professional hi ha molta m\u00e9s gent treballant silenciosament i efica\u00e7ment en productes de qualitat i duradors. Encara que els primers tinguin una mica de ra\u00f3 a dir que PHP, JQuery o altres estan obsolets, el m\u00f3n laboral de vegades diu el contrari. Cal prendre una certa dist\u00e0ncia per triar la millor tecnologia per a cada ocasi\u00f3. (https://www.bitecode.dev/p/hype-cycles)</p>"},{"location":"Moduls/DWEC/desenvolupamentfrontend.html#posar-la-web-en-produccio","title":"Posar la Web en Producci\u00f3","text":"<p>Perqu\u00e8 una web amb HTML, CSS i Javascript funcioni tan sols necessitem un servidor web que serveixi <code>est\u00e0ticament</code> aquests fitxers quan se us faci una petici\u00f3 HTTP. Aquest servidor sol estar accessible per Internet mitjan\u00e7ant SFTP, SSH o qualsevol protocol. Aquests HTML, CSS i JS poden ser tractats de dues maneres:</p> <ol> <li>M\u00e8tode tradicional: Copiar tot el contingut de les carpetes al servidor al voltant del fitxer index.html.</li> <li>Eina de creaci\u00f3 de JavaScript: Utilitzar eines que compilen el codi font, el minifiquen, unifiquen, optimitzen i comprimeixen per millorar la velocitat de c\u00e0rrega i evitar incompatibilitats entre navegadors.</li> </ol> <p>M\u00e9s endavant, al cap\u00edtol del CI/CD parlarem d'una metodologia per automatitzar tot el proc\u00e9s. Amb aquesta metodologia podrem centrar-nos a escriure codi c\u00f2modament mentre que les nostres eines ho proven tot i ho posen en producci\u00f3.</p>"},{"location":"Moduls/DWES/_DWES24245.html","title":"Desenvolupament web en entorn servidor - DAW","text":""},{"location":"Moduls/PSP/_PSP2425.html","title":"Programaci\u00f3 Serveis i Processos - DAM","text":""},{"location":"Moduls/SI/_SI2425.html","title":"Seguretat Inform\u00e0tica - SMX","text":""},{"location":"Practiques/Bloc%201-%20Practica%201.1.html","title":"Bloc 1  Practica 1.1","text":""},{"location":"Practiques/Bloc%201-%20Practica%201.1.html#bloc-1-php-ut2-introduccio","title":"Bloc 1: PHP UT.2: Introducci\u00f3","text":""},{"location":"Practiques/Bloc%201-%20Practica%201.1.html#practica-1","title":"Pr\u00e0ctica 1","text":"<p>Baixa el seg\u00fcent repositori del github classroom, i fes les tasques que s'indiquen a continuaci\u00f3:</p> <ol> <li> <p>Separa el fixter index.php creant les vistes que estaran al directori /views/partials</p> <ul> <li>head.view.php</li> <li>navigation.view.php</li> <li>header.view.php</li> <li>section.view.php</li> <li>footer.view.php</li> </ul> </li> <li> <p>La vista section.php mostra els articles. Carrega-los des de l'array products.php que est\u00e0 definit dins del fitxer /config/products.php</p> </li> <li>La vista navegation.php mostra el menu. Carrega-lo des de l'array menu.php que est\u00e0 definit dins del fitxer /config/menu.php</li> <li>Crea una funci\u00f3 loadView($vista) que carregue una vista. Guarda la funci\u00f3 en el fitxer myHelpers.php.</li> <li>Modifica el fitxer index.php per a que gaste esta funci\u00f3.</li> </ol>"},{"location":"Practiques/Bloc%201-%20Practica%201.2.html","title":"Bloc 1  Practica 1.2","text":""},{"location":"Practiques/Bloc%201-%20Practica%201.2.html#bloc-1-php-ut2-introduccio","title":"Bloc 1: PHP UT.2: Introducci\u00f3","text":""},{"location":"Practiques/Bloc%201-%20Practica%201.2.html#practica-2","title":"Pr\u00e0ctica 2","text":"<p>Del repositori anterior heu de fer les seg\u00fcents tasques:</p> <ol> <li>Crea un formulari per pujar un producte newProduct.php. El formulari acceptar\u00e0 el seg\u00fcents camps:<ul> <li>name: required amb llargada de 10 a 30 caracters.</li> <li>original_price: required i num\u00e8ric.</li> <li>discount_price: num\u00e8ric.</li> <li>stars: num\u00e8ric de 1 a 5.</li> <li>category: pot ser Computer, Tablet o Mobile</li> <li>photo: que es pujar\u00e0 al directori /public/img</li> </ul> </li> <li>Una vegada introdu\u00efdes les dades es mostraran en pantalla (no en la inicial).</li> <li>Crea un formulari per a fer el login login.php i un altre de registre registre.php.</li> <li>De moment les dades recaptades del dos formularis es mostraran per pantalla.</li> </ol>"},{"location":"Practiques/Bloc%201-%20Practica%202.1.html","title":"Bloc 1  Practica 2.1","text":""},{"location":"Practiques/Bloc%201-%20Practica%202.1.html#bloc-1-php-ut3-classes-i-objectes","title":"Bloc 1: PHP UT.3: Classes i objectes","text":""},{"location":"Practiques/Bloc%201-%20Practica%202.1.html#practica-3","title":"Pr\u00e0ctica 3","text":"<p>Del repositori anterior heu de fer les seg\u00fcents tasques:</p> <ol> <li>Crea una classe category amb :<ul> <li>id</li> <li>name</li> </ul> </li> <li>Crea un array d'objectes category amb el contingut de l'array que est\u00e0 en config/categories.php </li> <li>Modifica les vistes per acceptar l'array d'objectes compte de l'array categories.</li> <li>Crea una classe Producte amb el camps:<ul> <li>id</li> <li>name</li> <li>features</li> </ul> </li> <li>Utilitzan el m\u00e8todes m\u00e0gics __get() i __set() per construir un array d'objectes a partir de l'array ubicat a config/products.php. </li> <li>Modifica les vistes i el resultat del formulari per treballar amb els objectes creats.</li> </ol>"},{"location":"Practiques/Bloc%201-%20Practica%202.1.html#practica-4","title":"Practica 4","text":"<p>Del repositori anterior</p> <ol> <li> <p>Crea una classe per a tractar les seg\u00fcents exempcions:</p> <ul> <li>RequiredField</li> <li>NoFitField</li> <li>NoNumericField</li> <li>isNotAnImageFile</li> <li>passwordIsNotSame</li> </ul> </li> <li> <p>Utilita-les per a gestionar els errors en els formularis de l'aplicacion.</p> </li> </ol>"},{"location":"Practiques/Bloc%201-%20Practica%203.1.html","title":"Bloc 1  Practica 3.1","text":""},{"location":"Practiques/Bloc%201-%20Practica%203.1.html#bloc-1-php-ut3-classes-i-objectes","title":"Bloc 1: PHP UT.3: Classes i objectes","text":""},{"location":"Practiques/Bloc%201-%20Practica%203.1.html#practica-5","title":"Pr\u00e0ctica 5","text":"<p>Del repositori anterior heu de fer les seg\u00fcents tasques:</p> <ol> <li>Importa la taula productes en la bd test de la m\u00e0quina vagrant (es proporciona amb l'enunciat).</li> <li>Fes que la p\u00e0gina principal funcione ara agafant les dades de la BD en compte de l'array de productes.</li> <li>En la p\u00e0gina principal nom\u00e9s es voran els primers 8 productes de la BD.</li> <li>Si hi ha imatge del producte es traur\u00e0 en el lloc adient, en cas contrari continuar\u00e0 la imatge actual.</li> <li>Si l'usuari marca l'enlla\u00e7 All Products es voran tots (m\u00e9s de 8)</li> <li>Si l'usuari marca l'enlla\u00e7 Populars es voran els que tenen 5 estreles sense importar el n\u00famero.</li> <li>Si l'usuari marca l'enlla\u00e7 News es voran els 8 amb el createdAt m\u00e9s recient.</li> </ol> <p>Opcional:</p> <ol> <li>Fes paginaci\u00f3 en la p\u00e0gina principal.</li> </ol>"},{"location":"Practiques/Bloc%201-%20Practica%203.1.html#practica-6","title":"Pr\u00e0ctica 6","text":"<ol> <li>Fes un CRUD de la taula Productes :<ul> <li>Una taula per a mostrar tots els elements (productes.php)</li> <li>Amb un bot\u00f3 per a inserir uno nou (newProducte.php)</li> <li>Amb dos icones per linea per tal de modificar (updateProducte.php) i eliminar element de la taula (deleteProducte.php).</li> <li>Amb una icona per a vore m\u00e9s dades de cada element (showProducte.php)</li> </ul> </li> </ol>"},{"location":"Practiques/Bloc%201-%20Practica%205.1.html","title":"Bloc 1  Practica 5.1","text":""},{"location":"Practiques/Bloc%201-%20Practica%205.1.html#bloc-1-php-ut5-seguretat","title":"Bloc 1: PHP UT.5: Seguretat","text":""},{"location":"Practiques/Bloc%201-%20Practica%205.1.html#practica-7","title":"Pr\u00e0ctica 7","text":"<p>Del repositori anterior heu de fer les seg\u00fcents tasques:</p> <p>Crea tot el sistema d'indentificaci\u00f3 d'usuaris:</p> <ul> <li>Esborra la taula productes i importa el fitxers test.sql per afegir la taula users a la BD</li> <li>Crea la funcionalitat de register.php i login.php, per a que un usuari puga registrar-se i loguejar-se.</li> <li>Hi ha un usuari amb rol 1  (ja esta en la BD). Eixe usuari pot accedir al Load del menu. La resta no.</li> <li>El nom de l'usuari eixira en compte del bot\u00f3 de Login.</li> <li>Crea la funcionalitat per recuper la contrasenya enviant un email.</li> <li>Fes el logout. El bot\u00f3 tan sols eixira quan l'usuari estiga loguejat.</li> </ul>"},{"location":"Practiques/Bloc%201-%20Practica%205.1.html#practica-8","title":"Pr\u00e0ctica 8","text":"<p>Torna a catalogar el productes:</p> <ul> <li>Fes que es puga seleccionar la categoria des de la taula categories de la BD</li> <li>Fes que la categoria ixca en el producte i que quan la marque es carreguen soles els productes d'eixa categoria.</li> </ul>"},{"location":"Practiques/Bloc%201-%20Recuperacio.html","title":"Bloc 1  Recuperacio","text":""},{"location":"Practiques/Bloc%201-%20Recuperacio.html#bloc-1-php-ut5-recuperacio","title":"Bloc 1: PHP UT.5: Recuperaci\u00f3","text":""},{"location":"Practiques/Bloc%201-%20Recuperacio.html#practica-8","title":"Pr\u00e0ctica 8","text":"<p>Afegir carret compra:</p> <ul> <li>A partir d'ara quan un usuari crea un producte se li assigna com a propietari mitjan\u00e7ant el camp user de la taula productes.</li> <li>Un usuari identificat pot llan\u00e7ar ofertes sobre els productes que no estan venuts. Es fara en mode carret de la compra, quan un usuari polse en un article se li obrir\u00e0 una p\u00e0gina amb un formulari per a que pose preu i confirme. Eixe article anir\u00e0 al carret de la compra, que l'usuari haur\u00e0 de validar quan acabe de fer ofertes.</li> <li>En el moment que l'usuari valida el carret, se li enviaran emails als usuaris propietaris per a que coneguen la situaci\u00f3 de l'oferta.</li> <li>Al mateix temps es guardar\u00e0 const\u00e0ncia de la oferta en la taula d'ofertes.</li> <li>El producte eixira com a venut a la p\u00e0gina principal.</li> </ul>"},{"location":"Practiques/Bloc%202-%20Practica%201.html","title":"Bloc 2  Practica 1","text":""},{"location":"Practiques/Bloc%202-%20Practica%201.html#bloc-2-laravel","title":"Bloc 2: Laravel","text":""},{"location":"Practiques/Bloc%202-%20Practica%201.html#practica-1","title":"Pr\u00e0ctica 1","text":"<p>Crea les migracions per al BatoiPOP:</p> <p>Products (id, name, original_price, discount_price, sale, category_id, img, user_id) amb els timestamps</p> <p>Categories (id,name,img) sense timestaps</p> <p>Offers (id,product_id,user_id,price,accepted) amb els timestamps</p> <p>Likes (product_id, user_id) amb els timestamps</p> <p>S'han de crear tamb\u00e9 les relacions entre les tables.</p> <p>Crea els seeders i el factories necessaris per donar d'alta</p> <ul> <li>500 usuaris</li> <li>250 productes d'usuaris aleatoris i de 10 categories</li> <li>100 ofertes. Has de tindre en compte que si hi ha oferta el camp sale del producte estar\u00e0 a true.</li> <li>4000 Likes de productes aleatoris </li> </ul>"},{"location":"Practiques/Bloc%202-%20Practica%201.html#practica-2","title":"Pr\u00e0ctica 2","text":"<ul> <li>Crea el models Product,Category,Offer ja que User ja est\u00e0 creada</li> <li>Crea les relacions entre els models tamb\u00e9 ac\u00ed.</li> <li>Like no \u00e9s en si un model sin\u00f3 una relaci\u00f3 molts a molts entre Product i User.</li> </ul>"},{"location":"Practiques/Bloc%202-%20Practica%201.html#practica-3","title":"Pr\u00e0ctica 3","text":"<ul> <li>Fes que a la p\u00e0gina principal es mostres tots el productes p\u00e0ginats de 8 en 8.</li> <li>Fes que funcionen els menus de mostrar els m\u00e9s nous i els m\u00e9s valorats. </li> </ul>"},{"location":"Practiques/Bloc%202-%20Practica%201.html#coses-a-tindre-en-compte","title":"Coses a tindre en compte","text":"<ul> <li>Els numeros en els seeder son aproximats, no cal que siguen exactes</li> <li>Un usuari aleatori pot ser un numero aleatori de 1 a 500.</li> </ul> <pre><code>    'user_id' =&gt; $this-&gt;faker-&gt;numberBetween(1,500)\n</code></pre> <ul> <li>Dins dels m\u00e8todes dels factories es poden utilitzar variables per fer calculs, o altres m\u00e8todes.</li> </ul> <pre><code> public function definition()\n    {\n        $original_price = $this-&gt;faker-&gt;randomFloat(2,1,2000);\n        return [\n                    'name' =&gt; $this-&gt;faker-&gt;text(75),\n                    'original_price' =&gt; $original_price,\n                    ...\n        ]    \n    }            \n</code></pre> <ul> <li>Per a crear una relaci\u00f3 likes entre usuaris i productes es pot utilitzar el m\u00e8tode attach</li> </ul> <pre><code>Product::factory(250)-&gt;create()-&gt;each(function ($product){\n\n            $product-&gt;Likes()-&gt;attach($this-&gt;randomArray());\n        });\n</code></pre> <ul> <li>Si poseu una imatge per defecte en cada producte, s'estalvieu un @if en la vista.</li> <li>La vista products/fitxa est\u00e0 per adaptar</li> <li>Podeu gastar un controlador LandingPage per a gestionar les p\u00e0gines d'inici no loguejades ja que el HomeController necessita Autoritzaci\u00f3.</li> <li>Haureu de modificar el menu que est\u00e0 en config/menu.php per canviar els enlla\u00e7os per adaptar-los al PSR-4.   Aix\u00ed tindrem /populars /news en compte de /?opcion=populars.</li> <li>Cal mirar com paginar en bootstrap</li> <li>Per a saber com ordenar per numero de likes podeu mirar el seg\u00fcent enlla\u00e7</li> </ul>"},{"location":"Practiques/Bloc%202-%20Practica%202.html","title":"Bloc 2  Practica 2","text":""},{"location":"Practiques/Bloc%202-%20Practica%202.html#bloc-2-laravel","title":"Bloc 2: Laravel","text":""},{"location":"Practiques/Bloc%202-%20Practica%202.html#practica-4","title":"Pr\u00e0ctica 4","text":"<ul> <li> <p>Quan un usuari \u00e9s logueja: </p> <ul> <li>Ha de redirigir a la mateixa p\u00e0gina.</li> <li>El seu nom ha d'apar\u00e8ixer en el bot\u00f3 de logout.</li> <li>Podr\u00e0 fer like o llevar-lo en els productes (cal crear una ruta per autoritzats, amb el seu m\u00e8tode al control\u00b7lador)</li> </ul> </li> </ul> <pre><code>// per saber si un usuari ha fet un like sobre un producte\ncount($this-&gt;Likes-&gt;where('id',Auth::user()-&gt;id))\n// per llevar el like o possar en like en un producte\n$product-&gt;Likes()-&gt;detach(Auth::user()-&gt;id);\n$product-&gt;Likes()-&gt;attach(Auth::user()-&gt;id);\n</code></pre>"},{"location":"Practiques/Bloc%202-%20Practica%202.html#practica-5","title":"Pr\u00e0ctica 5","text":"<p>Si l'usuari \u00e9s premium podr\u00e0 fer un mateniment dels seus productes:</p> <pre><code>* Caldr\u00e0 afegir una camp a l'usuari amb el tipus d'usuari.\n* Hi tindreu que crear un middleware premium.\n* Fer un CRUD amb la taula productes limitat als meus productes\n</code></pre> <p>Encara que no \u00e9s necessari crear un middleware owner perqu\u00e8 als usuaris tan sols li han d'eixir els propis productes, estaria b\u00e9 fer-lo per a que un premiun no puga modificar o esborrar (a cegues) un producte que no \u00e9s seu. </p> <p><pre><code>public function handle($request, Closure $next,$model)\n    {\n        $Model = 'App\\\\Models\\\\'.$model;\n        $id = $request-&gt;segments()[1];\n        $registre = $Model::findOrFail($id);\n\n        if ($registre-&gt;user_id !== Auth::user()-&gt;id) {\n            abort(403, 'Must Be Owner.');\n        }\n\n        return $next($request);\n    }\n</code></pre> i per assignar-lo a una ruta, per exemple:</p> <pre><code>Route::resource('products', ProductController::class)-&gt;except(['index','create','store'])-&gt;middleware(['auth','owner:Post']);\n</code></pre>"},{"location":"Practiques/Bloc%202-%20Practica%202.html#practica-6","title":"Pr\u00e0ctica 6","text":"<p>Un usuari normal:</p> <pre><code>* Podr\u00e0 llan\u00e7ar ofertes per a un o varios productes.\n  * Canvia el camp accepted per a que puga ser nullable i que per defecte o siga. Si \u00e9s null \u00e9s que encara el propietari no s'ha decidit. \n  * Afegix un camp sended en la taula ofertes. Esta indicar\u00e0 si l'oferta ha sigut enviada al propietari del producte.\n  * Quan un usuari polse sobre el bot\u00f3 Nova Oferta. Se li obrir\u00e0 una pantalla amb totes les ofertes que ha fet, la m\u00e9s nova primera.\n  * Tamb\u00e9 hi haur\u00e0, en la pantalla principal, un enlla\u00e7 a les meues ofertes, per si l'usuari no vol fer de noves.\n  * L'oferta polsada s'haur\u00e0 afegit amb preu 0 i no enviada. Al acceptar un preu es canviar\u00e0 l'estat a enviada. \n  * Les ofertes que han sigut rebutjades, podr\u00e0 tornar a ser enviades amb un preu superior.\n  * Podem gastar colors per saver si una oferta ha estat acceptada, rebutjada o encara no s'han decidit.\n</code></pre> <p>Un usuari premium:</p> <pre><code>* Podr\u00e0 vore les ofertes rebudes i processar-les.\n  * Seria b\u00f3 no gastar el mateix control\u00b7lador per a les ofertes que faig i les que hem fam.\n  * Des de la pantala del productes. Polsant sobre un d'ells entre en la pantalla de vore les ofertes sobre eixe produte, adre\u00e7ades pre preu.\n  * Cal un bot\u00f3 per acceptar-les o rebutjar-les.\n</code></pre>"},{"location":"Practiques/Bloc%203-%20Practica%201.html","title":"Bloc 3  Practica 1","text":""},{"location":"Practiques/Bloc%203-%20Practica%201.html#bloc-3-apirestful","title":"Bloc 3 - APIRESTFUL","text":""},{"location":"Practiques/Bloc%203-%20Practica%201.html#practica-1","title":"Practica 1","text":"<p>Sobre el projecte batoipop , afegirem aquests canvis:</p> <ul> <li> <p>Afig dos controlador de tipus api anomenats OfferController i ProductController</p> </li> <li> <p>Emplena els m\u00e8todes index , show , store , update i destroy perqu\u00e8, respectivament,facen el seg\u00fcent:</p> <ul> <li>index haur\u00e0 de retornar en format JSON el llistat de tots els registres, amb un codi 200</li> <li>show haur\u00e0 de retornar la informaci\u00f3 del registre que rep, amb un codi 200</li> <li>store haur\u00e0 d'inserir un nou registre amb les dades rebudes, amb un codi 201, i utilitzant el   els validadors  que ja vas fer. </li> <li>put haur\u00e0 de modificar els camps del registre rebuts, amb un codi 200.</li> <li>destroy haur\u00e0 d'eliminar el post rebut, retornant null amb un codi 204</li> </ul> </li> </ul> <p>Crea una col\u00b7lecci\u00f3 en Postman anomenada BatoiPop que definisca una petici\u00f3 per a cadascun dels cinc serveis implementats. Comprova que funcionen correctament i exporta la col\u00b7lecci\u00f3 a un arxiu.</p>"},{"location":"Practiques/Bloc%203-%20Practica%201.html#practica-2","title":"Practica 2","text":"<p>Crea una api Resource per a tornar les dades del dos controladors anteriors.</p>"},{"location":"Practiques/Bloc%203-%20Practica%201.html#practica-3","title":"Practica 3","text":"<p>Seguiu els passos indicats per protegir aplicacions basades en serveis REST mitjan\u00e7ant laravel Sanctum.</p>"},{"location":"Practiques/Bloc%203-%20Practica%201.html#practica-4","title":"Practica 4","text":"<p>Documenta els m\u00e8todes creats amb swagger. S'ha de fer tant els m\u00e8todes com els schemas.</p>"}]}